# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    replace => {
      "[event][module]" => "syslog"
      "[observer][vendor]" => "rsyslog"
      "[observer][product]" => "rsyslog"
      "[observer][type]" => "syslog"
    }
  }
  # discard header to get actual log
  dissect {
    mapping => {
      "message" => '%{?data} {name=%{?data}} %{syslog_msg}'
    }
  }
  mutate {
    gsub => [ "syslog_msg", '\\\"', '"']
    gsub => [ "syslog_msg", '[\\]', '']
  }
  # this is supposed to be json but RHEL6 has legacy rsyslog and the json template does not work
  # the format is supposed to be fixed as defined by the template
  # Using dissect to extract everything upto message
  dissect {
    mapping => {
      "syslog_msg" => '{"type":"%{[[event][dataset]]}","@timestamp":"%{[[event][created]]}","host":"%{[[host][name]]}","severity":"%{[[log][syslog][priority]]}","facility":"%{[[log][syslog][facility][code]]}","syslog-tag":"%{?syslog-tag}","source":"%{[[event][kind]]}","message":%{tmp}'
    }
  }
  if [event][created] =~ "^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}(\-|\+)\d{2}:\d{2}" {
    # remove extra decimal values we get for seconds
    # changing date format from "2021-09-27T18:57:38.390908+02:00" to "2021-09-27T18:57:38.390+02:00"
    mutate {
      gsub => ["[event][created]","^(.*?)T(.*?\.\d\d\d)\d\d\d(.*?$)","\1 \2"]
    }
  }
  # removing quotes and closing brace from the json
  grok {
    match => {
      "tmp" => '^(\")?(?<actual_msg>.*)"}$'
    }
    timeout_millis => 500
    tag_on_failure => ["msg_extraction_failure"]
  }
  # lower case actual message before checking conditions for [event][kind] - to avoid casing confusion
  mutate {
    lowercase => [ "actual_msg" ]
  }
  # if it is auditd it can be one of many kinds, treat them accordingly
  if [event][kind] =~ "^audispd" {
    grok {
      match => { "actual_msg" => "^.*\stype=(?<[event][category]>.*?)\s(?<details>.*)$" }
      timeout_millis => 500
      tag_on_failure => ["auditd_type_extraction_failure"]
    }
    if [event][category] == "execve" {
      grok {
        match => { "details" => "^.*:\s(argc=(?<argcount>.*?)\s(?<[process][command_line]>.*))?$" }
        timeout_millis => 500
        tag_on_failure => ["auditd_args_extraction_failure"]
      }
      mutate {
        gsub => [
        # replace a0=, a1= with empty string to get full command
        # then replace any " character
        "[process][command_line]", 'a(\d)=', "",
        "[process][command_line]", '"', ''
        ]
      }
    }  
    if [event][category] == "cwd" {
      grok {
        match => {
          "details" => '^.*msg=(?<data>.*?)\scwd=\"(?<[process][working_directory]>.*)\"$'
        }
        timeout_millis => 500
        tag_on_failure => ["auditd_cwd_grok_failure"]
      }
    }
    if [event][category] == "path" {
      grok {
        match => { "details" => '(^.*msg=(?<data>.*?) name=\"?(?<[file][name]>.*?)\"? inode=(?<[file][inode]>.*?) dev=(?<data>.*?) mode=(?<[file][mode]>.*?) ouid=(?<[file][uid]>.*?) ogid=(?<[file][gid]>.*?) rdev=(?<data>.*?) nametype=(?<[event][type]>.*)$)|(^.*msg=(?<data>.*?) name=\"?(?<[file][name]>.*?)\"? nametype=(?<[event][type]>.*)$)' }
        timeout_millis => 500
        tag_on_failure => ["auditd_path_grok_failure"]
      }
    }
    if [event][category] == "syscall" {
      grok {
        match => { "details" => '^.*msg=(?<data>.*?) arch=(?<data>.*?) syscall=(?<data>.*?) success=(?<is_success>.*?) exit=(?<[process][exit_code]>.*?) a0=(?<data>.*?) items=(?<data>.*?) ppid=(?<[process][ppid]>.*?) pid=(?<[process][pid]>.*?) auid=(?<data>.*?) uid=(?<[user][id]>.*?) gid=(?<user.group.id>.*?) euid=(?<data>.*)$' }
        timeout_millis => 500
        tag_on_failure => ["auditd_syscall_grok_failure"]
      }
      if [is_success] {
        if [is_success] == "yes" {
          mutate {
            add_field => { "[event][outcome]" => "success" }
          }
        } else if [is_success] == "no" {
          mutate {
            add_field => { "[event][outcome]" => "failure" }
          }
        }
        mutate {
          remove_field => [ "is_success" ]
        }
      }
    }
    if [event][category] == "cred_acq" or [event][category] == "cred_disp" or [event][category] == "cred_refr" {
      grok {
        match => { "details" => "^.*msg=(?<data>.*?) pid=(?<[process][pid]>.*?) uid=(?<[user][id]>.*?) auid=(?<data>.*?) msg='(?<tmp_msg>.*)'$" }
        timeout_millis => 500
        tag_on_failure => ["auditd_cred_grok_failure_1"]
      }
      if [tmp_msg] {
        grok {
          match => { "tmp_msg" => '^.*op=(?<[event][action]>.*?)( grantors=(?<data>.*?))? acct=\"(?<[user][name]>.*?)\" exe=\"(?<[process][executable]>.*?)\" hostname=(?<data>.*?)( addr=(?<data>.*?))? res=(?<[event][outcome]>.*)$' }
          timeout_millis => 500
          tag_on_failure => ["auditd_cred_grok_failure_2"]
        }
      }
    }
    if [event][category] == "crypto_key_user" {
      grok {
        match => { "details" => "^.*msg=(?<data>.*?) pid=(?<[process][pid]>.*?) uid=(?<[user][id]>.*?) auid=(?<data>.*?) msg='(?<tmp_msg>.*)'$" }
        timeout_millis => 500
        tag_on_failure => ["auditd_cryptokey_grok_failure_1"]
      }
      if [tmp_msg] {
        grok {
          match => { "tmp_msg" => '^.*op=(?<[event][action]>.*?) kind=(?<data>.*?) spid=(?<[process][pid]>.*?) suid=(?<data>.*?) (rport=(?<[server][port]>.*?) laddr=(?<[source][address]>.*) lport=(?<[source][port]>.*?)(\s)?)? exe=\"(?<[process][executable]>.*?)\" hostname=(?<data>.*?) addr=(?<[server][address]>.*) terminal=(?<data>.*?) res=(?<[event][outcome]>.*)$' }
          timeout_millis => 500
          tag_on_failure => ["auditd_cryptokey_grok_failure_2"]
        }
      }
    }
    if [event][category] == "crypto_session" {
      grok {
        match => { "details" => "^.*msg=(?<data>.*?) pid=(?<[process][pid]>.*?) uid=(?<[user][id]>.*?) auid=(?<data>.*?) ses=(?<data>.*?) msg='(?<tmp_msg>.*)'$" }
        timeout_millis => 500
        tag_on_failure => ["auditd_cryptosession_grok_failure_1"]
      }
      if [tmp_msg] {
        grok {
          match => { "tmp_msg" => '^.*op=(?<[event][action]>.*?) direction=(?<data>.*?) cipher=(?<[tls][cipher]>.*?) ksize=(?<data>.*?) spid=(?<[process][pid]>.*?) suid=(?<data>.*?) rport=(?<[server][port]>.*?) laddr=(?<[source][address]>.*) lport=(?<[source][port]>.*?) exe=\"(?<[process][executable]>.*?)\" hostname=(?<data>.*?) addr=(?<[server][address]>.*?) terminal=(?<data>.*?) res=(?<[event][outcome]>.*)$' }
          timeout_millis => 500
          tag_on_failure => ["auditd_cryptosession_grok_failure_2"]
        }
      }
    }
    if [event][category] == "service_start" or [event][category] == "service_stop" {
      grok {
        match => { "details" => "^.*msg=(?<data>.*?) pid=(?<[process][pid]>.*?) uid=(?<[user][id]>.*?) auid=(?<data>.*?) ses=(?<data>.*?) msg='(?<tmp_msg>.*)'$" }
        timeout_millis => 500
        tag_on_failure => ["auditd_session_start_grok_failure_1"]
      }
      if [tmp_msg] {
        grok {
          match => { "tmp_msg" => '^.*unit=(?<data>.*?) comm=\"(?<[event][provider]>.*?)\" exe=\"(?<[process][executable]>.*?)\" hostname=(?<data>.*?) res=(?<[event][outcome]>.*)$' }
          timeout_millis => 500
          tag_on_failure => ["auditd_session_start_grok_failure_2"]
        }
      }
    }
    if [event][category] =~ "user_" {
      grok {
        match => { "details" => "^.*msg=(?<data>.*?) pid=(?<[process][pid]>.*?) uid=(?<[user][id]>.*?) auid=(?<data>.*?) ses=(?<[service][id]>.*?)( data=(?<data>.*?))?( msg='(?<tmp_msg>.*)')?$" }
        timeout_millis => 500
        tag_on_failure => ["auditd_user_grok_failure_1"]
      }
      mutate {
        gsub => [ "tmp_msg", '\\\"', '"']
      }
      if [tmp_msg] { 
        if [event][category] == "user_acct" or [event][category] == "user_start" or [event][category] == "user_end" {
          grok {
            match => { "tmp_msg" => '^.*op=(?<[event][action]>.*?)( grantors=(?<data>.*?))? acct=\"(?<[user][name]>.*?)\" exe=\"(?<[process][executable]>.*?)\" hostname=(?<data>.*?) res=(?<[event][outcome]>.*)$' }
            timeout_millis => 500
            tag_on_failure => ["auditd_user_grok_failure_2"]
          }
        }
        if [event][category] == "user_auth" {
          grok {
            match => { "tmp_msg" => '^.*op=(?<[event][action]>.*?)( algo=(?<data>.*?) fp=(?<[tls][server][hash][sha256]>.*?))? rport=(?<[server][port]>.*?) acct=\"(?<[user][name]>.*?)\" exe=\"(?<[process][executable]>.*?)\" hostname=(?<data>.*?) addr=(?<[server][address]>.*?) terminal=(?<data>.*?) res=(?<[event][outcome]>.*)$' }
            timeout_millis => 500
            tag_on_failure => ["auditd_user_auth_grok_failure"]
          }
        }
        if [event][category] == "user_login" or [event][category] == "user_logout" {
          grok {
            match => { "tmp_msg" => '^.*op=(?<[event][action]>.*?) id=(?<[cloud][account][id]>.*?) exe=\"(?<[process][executable]>.*?)\" hostname=(?<[host][hostname]>.*?) addr=(?<[server][address]>.*?) terminal=(?<data>.*?) res=(?<[event][outcome]>.*)$' }
            timeout_millis => 500
            tag_on_failure => ["auditd_user_logging_grok_failure"]
          }
          if [server][address] == "?" {
            mutate {
              remove_field => [ "[server][address]" ]
            }
          }
        }
      }
    }
    if [event][category] == "tty" {
      grok {
        match => { "details" => "^.*msg=(?<data>.*?) pid=(?<[process][pid]>.*?) uid=(?<[user][id]>.*?) auid=(?<data>.*?) ses=(?<data>.*?) major=(?<data>.*?) data=(?<tmp_data>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["auditd_tty_grok_failure"]
      }
      ruby { 
        code => "
                  text = event.get('tmp_data')
                  if text
                    event.set('[process][command_line]', text.split.pack('H*'))
                  end 
                "
      }
    }
    mutate {
      remove_field => ["details", "argcount", "tmp_msg"]
    }
  }
  else if [event][kind] == "dataeng" {
    if [actual_msg] =~ "starting" and [actual_msg] =~ "\[.*\]" {
      grok {
        match => { "actual_msg" => "^starting (?<[service][name]>.*): (?<data>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["dataeng_grok_failure"]
      }
    }
  }
  else if [event][kind] == "dbus" {
    if [actual_msg] =~ "successfully activated" {
      grok {
        match => { "actual_msg" => "^.* successfully activated service (?<[service][name]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["dbus_grok_failure1"]
      }
    }
    else if [actual_msg] =~ "activating" {
      grok {
        match => { "actual_msg" => "^.* activating (.*)?service name='(?<[service][name]>.*)' (unit='(?<[file][name]>.*)')?(?<data>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["dbus_grok_failure2"]
      }
    }
  }
  else if [event][kind] == "dbus-daemon" {
    if [actual_msg] =~ "successfully activated" {
      dissect {
        mapping => { "actual_msg" => "[%{} uid=%{[[user][id]]} pid=%{[[process][pid]]}] %{[[event][action]]} %{+[[event][action]]} %{+[[event][action]]} '%{[[service][name]]}'" }
        tag_on_failure => "daemon_dissect_failure1"
      }
    }
    else if [actual_msg] =~ "activating via" {
      dissect {
        mapping => { "actual_msg" => "[%{} uid=%{[[user][id]]} pid=%{[[process][pid]]}] %{[[event][action]]} %{+[[event][action]]} %{+[[event][action]]}: service name='%{[[service][name]]}' unit='%{[[file][name]]}' %{} %{} %{} (uid=%{} pid=%{[[process][ppid]]} comm=%{[[event][provider]]})" }
        tag_on_failure => "daemon_dissect_failure2"
      }
      mutate {
        gsub => [ '[event][provider]', '\"', '' ]
      }
    }
  }
  else if [event][kind] == "nscd" {
    grok {
      match => { "actual_msg" => "^\d+ (?<[event][original]>.*)$" }
      timeout_millis => 500
      tag_on_failure => ["nscd_grok_failure1"]
    }
    grok {
      match => { "[event][original]" => "^.*monitoring .*? `(?<[file][directory]>.*?)` .*$" }
      timeout_millis => 500
      tag_on_failure => ["nscd_grok_failure2"]
    }
  }
  else if [event][kind] == "passwd" {
    if [actual_msg] =~ "error" {
      grok {
        match => { "actual_msg" => "^.*?: (?<[event][action]>.*?): (?<[error][message]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["passwd_grok_failure1"]
      }
    }
    else if [actual_msg] =~ "changed" {
      grok {
        match => { "actual_msg" => "^.*?: (?<[event][action]>.*) for (?<[user][name]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["passwd_grok_failure2"]
      }
    }
    else if [actual_msg] =~ "failure" {
      grok {
        match => { "actual_msg" => "^.*?: (?<[event][action]>.*?); logname=(?<[user][name]>.*?) uid=(?<[user][id]>.*?) .*$" }
        timeout_millis => 500
        tag_on_failure => ["passwd_grok_failure3"]
      }
    }
  }
  else if [event][kind] == "patrolagent" {
    if [actual_msg] =~ "started" {
      grok {
        match => { "actual_msg" => "^\[log\](?<[event][action]>.*) on port (?<[destination][port]>.*), pid is (?<[process][pid]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["patrolagent_grok_failure1"]
      }
    }
    else {
      grok {
        match => { "actual_msg" => "^\[log\](?<[event][original]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["patrolagent_grok_failure2"]
      }
    }
  }
  else if [event][kind] == "pbrun9.4.1-03" or [event][kind] == "pblocald9.4.1-03" {
    grok {
      match => { "actual_msg" => "^\[\d+\] (?<[event][action]>.*)$" }
      timeout_millis => 500
      tag_on_failure => ["pb_grok_failure1"]
    }
    if [event][action] =~ "user&pid" {
      grok {
        match => { "[event][action]" => "^.*user (?<[user][id]>.*?) pid (?<[process][pid]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["pb_grok_failure2"]
      }
    }
    else if [event][action] =~ "seconds" {
      grok {
        match => { "[event][action]" => "^.* \((?<process.uptime>.*?) seconds\)$" }
        timeout_millis => 500
        tag_on_failure => ["pb_grok_failure3"]
      }
    }
    else if [event][action] =~ "request rejected" {
      grok {
        match => { "[event][action]" => "^request rejected by (?<[user][name]>.*?) on (?<[host][hostname]>.*).$" }
        timeout_millis => 500
        tag_on_failure => ["pb_grok_failure4"]
      }
    }
  }
  else if [event][kind] == "powerpath" {
    if [actual_msg] =~ "starting" {
      grok {
        match => { "actual_msg" => "^(?<[event][action]>.*?): (?<[event][original]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["powerpath_grok_failure1"]
      }
    }
    else if [actual_msg] == "failed" {
      grok {
        match => { "actual_msg" => "^(?<[event][outcome]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["powerpath_grok_failure2"]
      }
    }
    else if [actual_msg] =~ "error" {
      grok {
        match => { "actual_msg" => "^.*error: (?<[error][message]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["powerpath_grok_failure3"]
      }
    }
    else {
      mutate {
        copy => { "actual_msg" => "[event][original]" }
      }
    }
  }
  else if [event][kind] == "python" {
    if [actual_msg] =~ "^ansible-cli_command" {
      grok {
        match => { "actual_msg" => "^(?<[event][reason]>.*) with .* command=(?<[process][command_line]>.*?) .*$" }
        timeout_millis => 500
        tag_on_failure => ["ansible_grok_failure1"]
      }
    }
    else if [actual_msg] =~ "error" {
      grok {
        match => { "actual_msg" => "^(?<[event][action]>.*) in \'(?<[file][directory]>.*?)\', (?<[error][message]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["ansible_grok_failure2"]
      }
    }
  }
  else if [event][kind] == "rhnsd" {
    grok {
      match => { "actual_msg" => "^(?<[file][directory]>.*?) does not .*$" }
      timeout_millis => 500
      tag_on_failure => ["rhnsd_grok_failure"]
    }
  }
  else if [event][kind] == "rpc.mountd" {
    grok {
      match => { "actual_msg" => "^(?<[event][reason]>.*) from (?<[source][ip]>.*):(?<[source][port]>.*) for (?<[file][directory]>.*)$" }
      timeout_millis => 500
      tag_on_failure => ["rpc_grok_failure"]
    }
  }
  else if [event][kind] == "run-parts(" {
    grok {
      match => { "actual_msg" => "^(?<[service][state]>.*?) (?<[service][name]>.*)$" }
      timeout_millis => 500
      tag_on_failure => ["run_parts_grok_failure1"]
    }
  }
  else if [event][kind] == "run-parts" {
    grok {
      match => { "actual_msg" => "^\((?<[file][path]>.*)\) (?<[service][state]>.*) (?<[service][name]>.*)$" }
      timeout_millis => 500
      tag_on_failure => ["run_parts_grok_failure2"]
    }
  }
  else if [event][kind] == "smartd" {
    mutate {
      copy => { "actual_msg" => "[event][original]" }
    }
    if [actual_msg] =~ "device" and [actual_msg] !~ "lu id" {
      grok {
        match => { "actual_msg" => "^device.*\], (?<[event][reason]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["smartd_grok_failure1"]
      }
    }
    else if [actual_msg] =~ "^configuration file" {
      grok {
        match => { "actual_msg" => "^configuration file (?<[file][path]>.*?) .*$" }
        timeout_millis => 500
        tag_on_failure => ["smartd_grok_failure2"]
      }
    }
    else if [actual_msg] =~ "^opened configuration" {
      grok {
        match => { "actual_msg" => "^opened configuration file (?<[file][path]>.*?)$" }
        timeout_millis => 500
        tag_on_failure => ["smartd_grok_failure2"]
      }
    }
    else {
      mutate {
        copy => { "actual_msg" => "[event][original]" }
      }
    }
  }
  else if [event][kind] == "sshd" {
    if [actual_msg] =~ "pam_unix" {
      grok {
        match => { "actual_msg" => "pam_unix.*: (?<[event][action]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["sshd_grok_failure1"]
      }
    }
    else if [actual_msg] =~ "^received disconnect" {
      grok {
        match => { "actual_msg" => "^received disconnect from (?<[source][ip]>.*) port (?<[source][port]>.*): (?<[event][action]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["sshd_grok_failure2"]
      }
    }
    else if [actual_msg] =~ "^disconnected" {
      if [actual_msg] =~ "user" {
        grok {
          match => { "actual_msg" => "^disconnected .* user (?<[user][name]>.*) (?<[source][ip]>.*) port (?<[source][port]>.*?)( \[(?<data>.*)\])?$" }
          timeout_millis => 500
          tag_on_failure => ["sshd_grok_failure3"]
        }
      }
      else {
        grok {
          match => { "actual_msg" => "^disconnected from (?<[source][ip]>.*) port (?<[source][port]>.*)$" }
          timeout_millis => 500
          tag_on_failure => ["sshd_grok_failure4"]
        }
      }
    }
    else if [actual_msg] =~ "^accepted publickey" {
      grok {
        match => { "actual_msg" => "^accepted publickey.* from (?<[source][ip]>.*) port (?<[source][port]>.*?) (?<data>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["sshd_grok_failure5"]
      }
    }
    else if [actual_msg] =~ "kex_exchange_identification" {
      grok {
        match => { "actual_msg" => "^.*: (?<[event][action]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["sshd_grok_failure6"]
      }
    }
    else if [actual_msg] =~ "identification" {
      grok {
        match => { "actual_msg" => "^(?<[event][action]>.*) from (?<[source][ip]>.*?)( port (?<[source][port]>.*?))?$" }
        timeout_millis => 500
        tag_on_failure => ["sshd_grok_failure7"]
      }
    }
    else {
      mutate {
        copy => { "actual_msg" => "[event][original]" }
      }
    }
  }
  else if [event][kind] == "startnodemanager.sh" {
    dissect {
      mapping => {
        "actual_msg" => "<%{data}> <%{+data}> <%{+data}> <%{+data}> <%{[[event][action]]}>"
      }
      tag_on_failure => ["ndmngr_dissect_failure"]
    }
    if [event][action] =~ "directory" {
      grok {
        match => { "[event][action]" => "^working directory is '(?<[process][working_directory]>.*?)'$" }
        timeout_millis => 500
        tag_on_failure => ["ndmngr_grok_failure1"]
      }
    }
    else if [event][action] =~ "process id" {
      grok {
        match => { "[event][action]" => "^the server '(?<[process][name]>.*?)' with process id (?<[process][pid]>.*?) .*$" }
        timeout_millis => 500
        tag_on_failure => ["ndmngr_grok_failure2"]
      }
    }
    else if [event][action] =~ "log file" {
      grok {
        match => { "[event][action]" => "^.* log file is '(?<[log][file][path]>.*)'$" }
        timeout_millis => 500
        tag_on_failure => ["ndmngr_grok_failure3"]
      }
    }
    else if [event][action] =~ "command line" {
      grok {
        match => { "[event][action]" => "^.* command line: (?<[process][command_line]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["ndmngr_grok_failure4"]
      }
    }
    else {
      mutate {
        copy => { "actual_msg" => "[event][original]" }
      }
    }
  }
  else if [event][kind] == "startweblogic.sh" {
    if [actual_msg] =~ "<" and [actual_msg] =~ ">" {
      dissect {
        mapping => {
          "actual_msg" => "<%{data}> <%{+data}> <%{+data}> <%{+data}> <%{[[event][action]]}.%{}"
        }
        tag_on_failure => ["weblogic_dissect_failure"]
      }
      if [event][action] =~ "url" {
        grok {
          match => { "[event][action]" => "^.* redirect url is (?<[url][original]>.*).$" }
          timeout_millis => 500
          tag_on_failure => ["weblogic_grok_failure1"]
        }
      }
      else if [event][action] =~ "io error" {
        grok {
          match => { "[event][action]" => "^.* io error: (?<[error][type]>.*)$" }
          timeout_millis => 500
          tag_on_failure => ["weblogic_grok_failure2"]
        }
      }
    }
    else if [actual_msg] =~ "user-agent" {
      grok {
        match => { "actual_msg" => "^user-agent: (?<[user_agent][original]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["weblogic_grok_failure3"]
      }
    }
    else {
      mutate {
        copy => { "actual_msg" => "[event][action]" }
      }
    }
  }
  else if [event][kind] == "su" or [event][kind] == "sudo" {
    if [actual_msg] =~ "pam_unix" {
      if [actual_msg] =~ "session closed" {
        grok {
          match => { "actual_msg" => "^.* user (?<[user][name]>.*)$" }
          timeout_millis => 500
          tag_on_failure => ["su_grok_failure1"]
        }
      }
      if [actual_msg] =~ "session opened" {
        grok {
          match => { "actual_msg" => "^.* user (?<[user][name]>.*) by (.*)?\(uid=(?<[user][id]>\d+)\)$" }
          timeout_millis => 500
          tag_on_failure => ["su_grok_failure2"]
        }
      }
    }
    else if [actual_msg] =~ "command" {
      grok {
        match => { "actual_msg" => "^(?<[user][name]>.*?):.*pwd=(?<[process][working_directory]>.*) ; user=(?<[user][roles]>.*) ; command=(?<[process][command_line]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["su_grok_failure3"]
      }
      mutate {
        strip => [ "user.name" ]
      }
    }
    else if [actual_msg] =~ "faulty" {
      grok {
        match => { "actual_msg" => "^.* module: (?<[file][name]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["su_grok_failure4"]
      }
    }
    else if [actual_msg] =~ "pam unable to dlopen" {
      grok {
        match => { "actual_msg" => "^.*?: (?<[file][name]>.*?): (?<[error][message]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["su_grok_failure5"]
      }
    }
    else {
      grok {
        match => { "actual_msg" => "^\(to (?<[user][name]>.*)\) .*$" }
        timeout_millis => 500
        tag_on_failure => ["su_grok_failure6"]
      }
    }
  }
  else if [event][kind] == "systemd-fsck" {
    if [actual_msg] =~ "xfs file system" {
      grok {
        match => { "actual_msg" => "^(?<[file][path]>.*?): (?<[file][name]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["fsck_grok_failure1"]
      }
    }
    else {
      grok {
        match => { "actual_msg" => "^(?<[event][action]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["fsck_grok_failure2"]
      }
    }
  }
  else if [event][kind] == "systemd-hibernate-resume" {
    grok {
      match => { "actual_msg" => "^.* resume from '(?<[file][path]>.*)'.*$" }
      timeout_millis => 500
      tag_on_failure => ["resume_grok_failure"]
    }
  }
  else if [event][kind] == "systemd-sysctl" {
    grok {
      match => { "actual_msg" => "^.* to '(?<[file][path]>.*)': (?<[error][message]>.*)$" }
      timeout_millis => 500
      tag_on_failure => ["sysctl_grok_failure"]
    }
  }
  else if [event][kind] == "systemd-logind" {
    if [actual_msg] =~ "removed" {
      grok {
        match => { "actual_msg" => "^(?<[event][action]>.*) (?<[service][id]>.*)$" }
        timeout_millis => 500
        tag_on_failure => "logind_grok_failure_1"
      }
    }
    else if [actual_msg] =~ "logged out" {
      grok {
        match => { "actual_msg" => "^session (?<[service][id]>.*?) .*\. (?<[event][action]>.*)$" }
        timeout_millis => 500
        tag_on_failure => "logind_grok_failure_2"
      }
    }
    else {
      grok {
        match => { "actual_msg" => "^(?<[event][action]>.*) (?<[service][id]>.*) of user (?<[user][name]>.*).$" }
        timeout_millis => 500
        tag_on_failure => "logind_grok_failure_3"
      }
    }
  }
  else if [event][kind] == "systemd-sysv-generator" {
    dissect {
      mapping => { "actual_msg" => "%{[[event][action]]} %{+[[event][action]]} %{[[file][path]]} %{+[[event][action]]}. %{[[event][recommendation]]}" }
      tag_on_failure => ["sysc_dissect_failure"]
    }
  }
  else if [event][kind] == "systemd-udevd" {
    if [actual_msg] =~ "link_config" {
      grok {
        match => { "actual_msg" => "^link_config: (?<[error][message]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["udevd_grok_failure1"]
      }
    }
    else {
      grok {
        match => { "actual_msg" => "^(?<[event][action]>.*): (?<[error][message]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["udevd_grok_failure2"]
      }
    }
  }
  else if [event][kind] == "xinetd" {
    if [actual_msg] =~ "^start" {
      grok {
        match => { "actual_msg" => "^start: (?<[process][name]>.*) pid=(?<[process][pid]>.*) from=(?<[source][ip]>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["xinetd_grok_failure1"]
      }
      mutate {
        gsub => [ "[source][ip]", "::ffff:", "" ]
      }
    }
    else {
      grok {
        match => { "actual_msg" => "^exit: (?<[process][name]>.*) status=(?<data>.*) pid=(?<[process][pid]>.*) duration=(?<data>.*)$" }
        timeout_millis => 500
        tag_on_failure => ["xinetd_grok_failure2"]
      }
    }
  }
  else if [event][kind] =~ "^abrtd" {
    mutate {
      copy => { "actual_msg" => "[event][original]" }
    }
    if "main loop" in [actual_msg] {
      mutate {
        add_field => { "[event][outcome]" => "Initialization complete" }
      }
    }
    if "maxcrashreportssize" in [actual_msg] {
      mutate {
        add_field => { "[event][reason]" => "crash report size exceeds" }
      }
    }
  } 
  else if [event][kind] =~ "^abrt-server" {
    mutate {
      copy => { "actual_msg" => "[event][original]" }
    }
    grok {
      match => {
        "actual_msg" => "^.*\s'(?<[file][path]>.*?)'.*$"
      }
      timeout_millis => 500
      tag_on_failure => ["file_path_extraction_failure"]
    }
    if "post-create" in [actual_msg] {
      mutate {
        add_field => { "[event][action]" => "Post Created" }
      }
    } else if "deleting problem directory" in [actual_msg] {
      mutate {
        add_field => { "[event][action]" => "Directory deleted" }
      }
    }
  } 
  else if [event][kind] =~ "^abrt-hook-ccpp" {
    mutate {
      copy => { "actual_msg" => "[event][original]" }
    }
    grok {
      match => {
        "actual_msg" => "^.*?\s(?<[process][pid]>\d+).*$"
      }
      timeout_millis => 500
      tag_on_failure => ["ccpp_process_id_extraction_failure"]
    }
  } 
  else if [event][kind] =~ "^agent" {
    mutate {
      copy => { "actual_msg" => "[event][original]" }
    }
    if "invalid argument" in [actual_msg]{
      mutate {
        add_field => { "[event][reason]" => "invalid argument" }
      }
    }
  } 
  else if [event][kind] =~ "^anacron" {
    if "cron" in [actual_msg]{
      mutate {
        copy => { "actual_msg" => "[event][reason]" }
      }
    } else {
      mutate {
        copy => { "actual_msg" => "[event][outcome]" }
      }
    }
  } 
  else if [event][kind] =~ "^atd" {
    mutate {
      copy => { "actual_msg" => "[event][outcome]" }
    }
    if "starting job" in [actual_msg] {
      grok {
        match => {
          "actual_msg" => "^.*?\s(?<[process][pid]>\d+)\s(?<[process][entity_id]>.*?\)).*$"
        }
        timeout_millis => 500
        tag_on_failure => ["atd_process_id_extraction_failure"]
      }
    }
  } 
  else if [event][kind] =~ "^auditctl" {
    mutate {
      copy => { "actual_msg" => "[event][reason]" }
    }
  } 
  else if [event][kind] =~ "^auditd" {
    if "pid" in [actual_msg] {
      grok {
        match => {
          "actual_msg" => "^(?<[event][outcome]>.*?):\s(?<[file][path]>.*?):.*?\s(?<[process][pid]>\d+)$"
        }
        timeout_millis => 500
        tag_on_failure => ["auditd_process_id_extraction_failure"]
      } 
    } else {
      mutate {
        copy => { "actual_msg" => "[event][outcome]" }
      }
    }
  } 
  else if [event][kind] =~ "^augenrules" {
    if "pid" in [actual_msg] {
      grok {
        match => {
          "actual_msg" => "^.*?\s(?<[process][pid]>\d+)$"
        }
        timeout_millis => 500
        tag_on_failure => ["augenrules_process_id_extraction_failure"]
      }
    } else {
      mutate {
        copy => { "actual_msg" => "[event][reason]" }
      }
    }
  } 
  else if [event][kind] =~ "^bgssd.exe" {
    mutate {
      copy => { "actual_msg" => "[event][outcome]" }
    }
  } 
  else if [event][kind] =~ "^chef-client" {
    if "error" in [actual_msg] {
      grok {
        match => {
          "actual_msg" => "^.*?:\s(?<[error][message]>.*)$"
        }
        timeout_millis => 500
      }
    } else {
      mutate {
        copy => { "actual_msg" => "[event][outcome]" }
      }
    }
  } 
  else if [event][kind] =~ "^chronyd" {
    if "selected source" in [actual_msg] {
      grok {
        match => {
          "actual_msg" => "^.*?\s(?<[source][ip]>\d+.\d+.\d+.\d+)$"
        }
        timeout_millis => 500
      }
    } else {
      mutate {
        copy => { "actual_msg" => "[event][outcome]" }
      }
    }
  } 
  else if [event][kind] =~ "^crond" {
    if "postdrop" in [actual_msg] {
      mutate {
        add_field => { "[event][outcome]" => "Email delivery fails" }
      }
      grok {
        match => {
          "actual_msg" => "^.*:\s\w+\s\w+\s(?<[file][path]>.*?):\s(?<[error][message]>.*)"
        }
        timeout_millis => 500
      }
    }
    if "cmd" in [actual_msg] {
      grok {
        match => {
          "actual_msg" => "^.*?\s\((?<[process][command_line]>.*?)\)"
        }
        timeout_millis => 500
      }
    }
  } 
  else if [event][kind] =~ "^goferd" {
    if "file" in [actual_msg] {
      grok {
        match => {
          "actual_msg" => '^.*?]\[(?<[error][code]>.*?)].*?"(?<[file][path]>.*?)".*$'
        }
        timeout_millis => 500
      }
    } else {
      grok {
        match => {
          "actual_msg" => "^.*?]\[(?<[error][code]>.*?)].*$"
        }
        timeout_millis => 500
      }
    }
  } 
  else if [event][kind] =~ "^haproxy$" {
    mutate {
      copy => { "actual_msg" => "[event][original]" }
    }
    grok {
      match => {
        "actual_msg" => "^\s(?<[source][ip]>\d+.\d+.\d+.\d+):(?<[source][port]>\d+).*$"
      }
      timeout_millis => 500
    }
  } 
  else if [event][kind] =~ "^instsvcdrv"  or [event][kind] =~ "^keepalived_vrrp" or [event][kind] =~ "^kernel" or [event][kind] =~ "^microcode_ctl" or [event][kind] =~ "^polkitd" or [event][kind] =~ "^pulseaudio" or [event][kind] =~ "rabbitmq-server" or [event][kind] =~ "sapdc1_10" or [event][kind] =~ "^server_administrator" or [event][kind] =~ "^systemd" or [event][kind] =~ "^trace-agent" or [event][kind] =~ "^watchdogd" or [event][kind] =~ "^yum" {
    mutate {
      copy => { "actual_msg" => "[event][outcome]" }
    }
  } 
  else if [event][kind] =~ "^journal" {
    mutate {
      copy => { "actual_msg" => "[event][original]" }
    }
  } 
  else if [event][kind] =~ "^kdumpctl" or [event][kind] =~ "^rsyslogd-2177" {
    mutate {
      copy => { "actual_msg" => "[event][reason]" }
    }
  } 
  else if [event][kind] =~ "^mgsusageag" {
    if "error" in [actual_msg] {
      mutate {
        copy => { "actual_msg" => "[error][message]" }
      }
    } else {
      mutate {
        copy => { "actual_msg" => "[event][outcome]" }
      }
    }
  } 
  else if [event][kind] =~ "^pgpool" {
    grok {
      match => {
        "actual_msg" => "^(?<[event][modified]>\d+-\d+-\d+\s\d+:\d+:\d+).*?(?<[process][pid]>\d+).*?\s\s(?<[event][outcome]>.*)$"
      }
      timeout_millis => 500
      tag_on_failure => ["pgpool_process_id_extraction_failure"]
    }
  } 
  else if [event][kind] =~ "^ppme" or [event][kind] =~ "^rabbitmqctl" {
    mutate {
      copy => { "actual_msg" => "[event][action]" }
    }
  } 
  else if [event][kind] =~ "^ppmt" {
    grok {
      match => {
        "actual_msg" => "^.*?\s(?<[host][uptime]>\d+.\d+).*$"
      }
      timeout_millis => 500
      tag_on_failure => ["time_duration_extraction_failure"]
    }
  } 
  else if [event][kind] =~ "^process-agent" {
    grok {
      match => {
        "actual_msg" => "^.*?\).*?\|\s(?<[event][outcome]>.*)$"
      }
      timeout_millis => 500
      tag_on_failure => ["event_outcome_extraction_failure"]
    }
  }
  else if [event][kind] =~ "^unix" {
    grok {
      match => { "actual_msg" => "^.* command (?<[process][command_line]>.*?),.* (?<[user][id]>\d+)$" }
      timeout_millis => 500
      tag_on_failure => ["_grokfailure_unix"]
    }
  }
  # if none of the conditions matched, actual message will be stored before getting removed.
  else {
    mutate {
      copy => { "actual_msg" => "[event][original]" }
    }
  }
  # remove non ecs fields
  mutate {
    remove_field => [ "syslog_msg", "tmp", "actual_msg", "data" ]
  }
  date {
    match => ["[event][created]" , "dd-MMM-yyyy HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss.SSS"]
    timezone => "GMT"
    locale => "ec"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags] {
    mutate {
      remove_field => [ "[event][created]" ]
    }
  }
  date {
    match => ["[event][modified]" , "yyyy-MM-dd HH:mm:ss"]
    timezone => "GMT"
    target => "[event][modified]"
    tag_on_failure => "_dateparsefailure_em"
  }
  if "_dateparsefailure_em" in [tags] {
    mutate {
      remove_field => [ "[event][modified]" ]
    }
  }
}
output {
  pipeline {
    send_to => [enrichments]
  }
}