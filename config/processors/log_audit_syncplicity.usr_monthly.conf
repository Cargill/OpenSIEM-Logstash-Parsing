input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "log.source.hostname" => "syncplicity.api" }
    add_field => { "event.module" => "syncplicity.api" }
    add_field => { "event.dataset" => "syncplicity.api.user_logs" }
    add_field => { "observer.vendor" => "syncplicity" }
    add_field => { "observer.product" => "syncplicity.secure_file_transfer" }
    add_field => { "observer.type" => "secure_file_transfer" }
  }
#  -Header "Syncplicity Folder: Name", "Syncplicity Folder: GUID", "Syncplicity Folder: Owner", "Syncplicity Folder: Owner Email", "Syncplicity Folder: Owner Group", "Folder: Path", "Folder: Name", "File: Name", "Action: Type", "Shared Link: Type", "Shared Link: Outcome", "Action: Date and Time: UTC", "Action: Date and Time: UTC_1", "Action By: User Name", "Action By: Email", "Action By: Device Name", "Action By: IP Address", "On Behalf Of: User Name", "On Behalf Of: Email", "Folder Shared/Unshared: Group Name", "Folder Shared/Unshared: User Name", "Folder Shared/Unshared: Email", "Folder Shared/Unshared: Permissions", "Shared Link: Group Name", "Shared Link: User Name", "Shared Link: Email", "Tags", "Lock: Owner Name", "Lock: Owner Email", "Lock: Duration", "Lock: Expiration Date and Time: UTC"
#  -Header  "Lock: Duration", "Lock: Expiration Date and Time: UTC"

  csv {
    source => "message"
    columns => ["file.directory","event.id","source.user.name","source.user.email","group.name","file.path","file.type","file.name","event.action","rule.category","rule.ruleset","drop_field","event.start","user.full_name","user.email","host.hostname","source.ip","drop_field_2","client.user.email","drop_field_3","drop_field_4","drop_field_5","rule.name","file.group","destination.user.name","destination.user.email","drop_field_6","user.full_name","user.email","event.duration","event.end"]
    convert => {
      "event.duration" => "integer"
    }
    skip_empty_columns => true
    skip_empty_rows => true
  }
  mutate {
    remove_field => ["msg","drop_field","drop_field_2","drop_field_3","drop_field_4","drop_field_5","drop_field_6"]
  }
  date {
    match => [ "event.start", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss.SSS","MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss"]
    timezone => "GMT"
    locale => "en"
    target => "event.start"
  }
  # Do not remove this, due to internal need.
  if [host.hostname] and ([host.hostname] != "" or [host.hostname][0] != "" ){
    mutate {
      copy => { "host.hostname" => "host.name" }
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
