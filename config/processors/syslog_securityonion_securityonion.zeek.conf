# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  if [dataset] == "syslog" {
    drop {}
  }
  mutate {
    add_field => {
      "[event][module]" => "securityonion"
      "[event][dataset]" => "securityonion.zeek"
    }
  }
  json {
    source => "message"
    target => "tmp" 
  }
  mutate {
    copy => { "[host][name]" => "[log][source][hostname]" }
    rename => { "[category]" => "[event][category]" }
    rename => { "[dataset]" => "[event][kind]" }
    rename => { "[tmp][ts]" => "[event][created]" }
    rename => { "[tmp][proto]" => "[network][protocol]" }
    rename => { "[tmp][id.orig_h]" => "[source][ip]" }
    rename => { "[tmp][id.orig_p]" => "[source][port]" }
    rename => { "[tmp][id.resp_h]" => "[destination][ip]" }
    rename => { "[tmp][id.resp_p]" => "[destination][port]" }
    rename => { "[tmp][orig_bytes]" => "[source][bytes]" }
    rename => { "[tmp][resp_bytes]" => "[destination][bytes]" }
    rename => { "[tmp][orig_pkts]" => "[source][packets]" }
    rename => { "[tmp][resp_pkts]" => "[destination][packets]" }
    rename => { "[tmp][duration]" => "[event][duration]" }
    rename => { "[tmp][community_id]" => "[rule][uuid]" }
    rename => { "[tmp][orig_mac_oui]" => "[network][name]" }
    rename => { "[tmp][times.modified]" => "[file][mtime]" }
    rename => { "[tmp][times.created]" => "[file][created]" }
    rename => { "[tmp][times.changed]" => "[file][ctime]" }
    rename => { "[tmp][times.accessed]" => "[file][accessed]" }
    rename => { "[tmp][protoqtype_name]" => "[dns][question][type]" }
    rename => { "[tmp][query]" => "[dns][question][name]" }
    rename => { "[tmp][answers]" => "[dns][answers]" }
    rename => { "[tmp][method]" => "[http][request][method]" }
    rename => { "[tmp][user_agent]" => "[user_agent][original]" }
    rename => { "[tmp][status_code]" => "[http][response][status_code]" }
    rename => { "[tmp][status_msg]" => "[event][action]" }
    rename => { "[tmp][resp_mime_type]" => "[http][request][mime_type]" }
    rename => { "[tmp][proxied]" => "[event][code]" }
    rename => { "[tmp][size]" => "[file][size]" }
    rename => { "[tmp][path]" => "[file][path]" }
    rename => { "[tmp][action]" => "[event][action]" }
    rename => { "[tmp][server_name]" => "[destination][address]" }
    rename => { "[tmp][ja3]" => "[tls][client][ja3]" }
    rename => { "[tmp][ja3s]" => "[tls][server][ja3s]" }
    rename => { "[tmp][validation_status]" => "[event][action]" }
    rename => { "[tmp][tunnel_type]" => "[service][type]" }
    rename => { "[tmp][endpoint]" => "[event][action]" }
    rename => { "[tmp][host]" => "[url][domain]" }
    rename => { "[tmp][uid]" => "[event][id]" }
    rename => { "[tmp][conn_state]" => "[service][state]" }
    rename => { "[tmp][orig_ip_bytes]" => "[host][network][egress][bytes]" }
    rename => { "[tmp][resp_ip_bytes]" => "[host][network][ingress][bytes]" }
    rename => { "[tmp][client_addr]" => "[source][ip]" }
    rename => { "[tmp][server_addr]" => "[destination][ip]" }
    rename => { "[tmp][host_name]" => "[host][hostname]" }
    rename => { "[tmp][domain]" => "[host][domain]" }
    rename => { "[tmp][assigned_addr]" => "[host][ip]" }
    rename => { "[tmp][user]" => "[user][name]" }
    rename => { "[tmp][command]" => "[process][command_line]" }
    rename => { "[tmp][file_size]" => "[file.size]" }
    rename => { "[tmp][reply_code]" => "[http.response.status_code]" }
    rename => { "[tmp][value]" => "[http][request][body][content]" }
    rename => { "[tmp][request_type]" => "[process][name]" }
    rename => { "[tmp][till]" => "[tls.client][not_after]" }
    rename => { "[tmp][cipher]" => "[tls][cipher]" }
    rename => { "[tmp][func]" => "[event][outcome]" }
    rename => { "[tmp][result]" => "[event][outcome]" }
    rename => { "[tmp][ttl]" => "[event][duration]" }
    rename => { "[tmp][security_protocol]" => "[event][outcome]" }
    rename => { "[tmp][request_from]" => "[source][address]" }
    rename => { "[tmp][request_to]" => "[destination][address]" }
    rename => { "[tmp][community]" => "[network][community_id]" }
    rename => { "[tmp][up_since]" => "[process][start]" }
    rename => { "[tmp][request_p]" => "[client][port]" }
    rename => { "[tmp][bound.host]" => "[server][address]" }
    rename => { "[tmp][bound_p]" => "[server][port]" }
    rename => { "[tmp][request.host]" => "[client][address]" }
    rename => { "[tmp][machine]" => "[file][pe][architecture]" }
    rename => { "[tmp][section_names]" => "[file][pe][original_file_name]" }
    rename => { "[tmp][compile_ts]" => "[file][created]" }
    rename => { "[tmp][os]" => "[host][os][full]" }
    rename => { "[tmp][subsystem]" => "[file][pe][product]" }
    rename => { "[tmp][fingerprint]" => "[file][hash][sha256]" }
    rename => { "[tmp][certificate.version]" => "[file][x509][version_number]" }
    rename => { "[tmp][certificate.serial]" => "[file][x509][serial_number]" }
    rename => { "[tmp][certificate.not_valid_before]" => "[file][x509][not_before]" }
    rename => { "[tmp][certificate.not_valid_after]" => "[file][x509][not_after]" }
    rename => { "[tmp][certificate.key_alg]" => "[file][x509][public_key_algorithm]" }
    rename => { "[tmp][certificate.key_length]" => "[file][x509][public_key_size]" }
    rename => { "[tmp][certificate.sig_alg]" => "[file][x509][signature_algorithm]" }
    rename => { "[tmp][certificate.curve]" => "[file][x509][public_key_curve]" }
    rename => { "[tmp][certificate.exponent]" => "[file][x509][public_key_exponent]" }
    rename => { "[tmp][san.dns]" => "[file][x509][alternative_names]" }
    rename => { "[tmp][certificate.subject]" => "[file][x509][subject][distinguished_name]" }
    rename => { "[tmp][certificate.issuer]" => "[file][x509][issuer][distinguished_name]" }
    rename => { "[tmp][fuid]" => "[file][uid]" }
    rename => { "[tmp][note]" => "[event][code]" }
    rename => { "[tmp][msg]" => "[error][message]" }
    rename => { "[tmp][sub]" => "[event][original]" }
    rename => { "[tmp][peer_descr]" => "[observer][name]" }
    rename => { "[tmp][actions]" => "[event][action]" }
    rename => { "[tmp][email_dest]" => "[destination][user][email]" }
    rename => { "[tmp][suppress]" => "[event][duration]" }
    rename => { "[tmp][analyzer]" => "[process][name]" }
    rename => { "[tmp][failure_reason]" => "[error][message]" }
    rename => { "[tmp][peer]" => "[observer][name]" }
    rename => { "[tmp][source]" => "[service][name]" }
    rename => { "[tmp][share_type]" => "[file][device]" }
    rename => { "[tmp][reply_msg]" => "[event][outcome]" }
    rename => { "[tmp][fc_request]" => "[dns][op_code]" }
    rename => { "[tmp][fc_reply]" => "[dns][response_code]" }
    rename => { "[tmp][lease_time]" => "[process][uptime]" }
    rename => { "[tmp][msg_types]" => "[event.outcome]" }
    rename => { "[tmp][trans_id]" => "[transaction][id]" }
    rename => { "[tmp][rtt]" => "[event][duration]" }
    rename => { "[tmp][qclass_name]" => "[dns][question][class]" }
    rename => { "[tmp][qtype_name]" => "[dns][question][type]" }
    rename => { "[tmp][rcode_name]" => "[dns][response_code]" }
    rename => { "[tmp][filename]" => "[file][name]" }
    rename => { "[tmp][total_bytes]" => "[source][bytes]]" }
    rename => { "[tmp][seen_bytes]" => "[destination][bytes]" }
    rename => { "[tmp][md5]" => "[file][hash][md5]" }
    rename => { "[tmp][sha1]" => "[file][hash][sha1]" }
    rename => { "[tmp][mime_type]" => "[file][mime_type]" }
    rename => { "[tmp][extracted_size]" => "[file][size]" }
    rename => { "[tmp][data_channel.orig_h]" => "[source][nat][ip]" }
    rename => { "[tmp][data_channel.resp_h]" => "[destination][nat][ip]" }
    rename => { "[tmp][data_channel.resp_p]" => "[destination][nat][port]" }
    rename => { "[tmp][referrer]" => "[http][request][referrer]" }
    rename => { "[tmp][file_desc]" => "[file][pe][description]" }
    rename => { "[tmp][file_mime_type]" => "[file][mime_type]" }
    rename => { "[tmp][seen.node]" => "[service][node][name]" }
    rename => { "[tmp][sources]" => "[event][provider]" }
    rename => { "[tmp][seen.where]" => "[event][reference]" }
    rename => { "[tmp][seen.indicator]" => "[rule][name]" }
    rename => { "[tmp][seen.indicator_type]" => "[rule][reference]" }
    rename => { "[tmp][dcc_file_name]" => "[file][name]" }
    rename => { "[tmp][dcc_file_size]" => "[file][size]" }
    rename => { "[tmp][dcc_mime_type]" => "[file][mime_type]" }
    rename => { "[tmp][nick]" => "[user][effective][name]" }
    rename => { "[tmp][addl]" => "[rule][description]" }
    rename => { "[tmp][error_msg]" => "[error][message]" }
    rename => { "[tmp][from]" => "[source][user][email]" }
    rename => { "[tmp][server_cert_subject]" => "[tls][server][certificate]" }
    rename => { "[tmp][exception]" => "[error][message]" }
    rename => { "[tmp][cmd]" => "[database][instance]" }
    rename => { "[tmp][mime]" => "[file][mime_type]" }
    rename => { "[tmp][desc]" => "[file][pe][description]" }
    rename => { "[tmp][src]" => "[source][nat][ip]" }
    rename => { "[tmp][dst]" => "[destination][nat][ip]" }
    rename => { "[tmp][client_name]" => "[client][user][name]" }
    rename => { "[tmp][authentication_method]" => "[event][type]" }
    rename => { "[tmp][event_msg]" => "[event][reason]" }
    rename => { "[tmp][sig_id]" => "[rule][id]" }
    rename => { "[tmp][sub_msg]" => "[rule][description]" }
    rename => { "[tmp][helo]" => "[client][user][domain]" }
    rename => { "[tmp][useragent]" => "[user_agent][original]" }
    rename => { "[tmp][fuids]" => "[file][uid]" }
    rename => { "[tmp][analyzers]" => "[process][name]" }
    rename => { "[tmp][subject]" => "[email][subject]" }
    rename => { "[tmp][mailfrom]" => "[source][user][email]" }
    rename => { "[tmp][direction]" => "[network][direction]" }
    rename => { "[tmp][hostname]" => "[host][hostname]" }
    rename => { "[tmp][domainname]" => "[host][domain]" }
    rename => { "[tmp][server_dns_computer_name]" => "[server][address]" }
    rename => { "[tmp][server_tree_name]" => "[server][domain]" }
    rename => { "[tmp][server_nb_computer_name]" => "[observer][name]" }
    rename => { "[tmp][status]" => "[event][action]" }
    rename => { "[tmp][history]" => "[service][id]" }
    rename => { "[tmp][request_body_len]" => "[http][request][body][bytes]" }
    rename => { "[tmp][response_body_len]" => "[http][response][body][bytes]" }
    rename => { "[tmp][matched]" => "[threat][list][type]" }
    rename => { "[tmp][suppress_for]" => "[event][duration]" }
    rename => { "[tmp][software_type]" => "[package][type]" }
    rename => { "[tmp][missed_bytes]" => "[network][bytes]" }
    rename => { "[tmp][named_pipe]" => "[group][name]" }
    rename => { "[tmp][operation]" => "[service][name]" }
    rename => { "[tmp][reply_code]" => "[event][code]" }
    rename => { "[tmp][rows]" => "[event][sequence]" }
    rename => { "[tmp][id]" => "[event][id]" }
    rename => { "[tmp][cert_count]" => "[process][args_count]" }
    rename => { "[tmp][desktop_name]" => "[service][id]" }
    rename => { "[tmp][last_reply]" => "[event][action]" }
    rename => { "[tmp][trans_depth]" => "[event][risk_score]" }
    rename => { "[tmp][kex_alg]" => "[tls][server][x509][signature_algorithm]" }
    rename => { "[tmp][client]" => "[tls][client][x509][version_number]" }
    rename => { "[tmp][server]" => "[tls][server][x509][version_number]" }
    rename => { "[tmp][auth_attempts]" => "[event][sequence]" }
    rename => { "[tmp][host_key_alg]" => "[tls][server][x509][public_key_algorithm]" }
    lowercase => [ "[event][kind]" ]
  }
  if [event][kind] == "smtp" {
    ruby {
      code => "
        email_recipient = []        
        if event.get('[tmp][rcptto]').kind_of? Array
          event.get('[tmp][rcptto]').each do |item|
            if item!= ''  
              email_recipient.push(item)
            end
          end
        end
        if event.get('[tmp][cc]').kind_of? Array
          event.get('[tmp][cc]').each do |item|
            if item!= ''  
              email_recipient.push(item)
            end
          end
        end
        if !email_recipient.empty?
          event.set('[destination][user][email]', email_recipient)
        end
      "
      tag_on_exception => "ruby_block_exception"
    }
  }

  if [event][kind] == "x509" {
    # KV subject distinguished_name
    kv {
      source => "[file][x509][subject][distinguished_name]"
      target => "[tmp][subject_split]"
      transform_key => "lowercase"
      value_split => "="
      field_split => ","
    }
	  # issuer distinguished_name
    kv {
      source => "[file][x509][issuer][distinguished_name]"
      target => "[tmp][issuer_split]"
      transform_key => "lowercase"
      value_split => "="
      field_split => ","
    }
	  # rename issuer and subject distinguished_name subfields
    mutate {
	    rename => { "[tmp][subject_split][countryname]" => "[file][x509][subject][country]" }
      rename => { "[tmp][subject_split][c]" => "[file][x509][subject][country]" }
      rename => { "[tmp][subject_split][organizationname]" => "[file][x509.subject][organization]" }
      rename => { "[tmp][subject_split][o]" => "[file][x509][subject][organization]" }
      rename => { "[tmp][subject_split][organizationalunitname]" => "[file][x509][subject][organizational_unit]" }
      rename => { "[tmp][subject_split][ou]" => "[file][x509][subject][organizational_unit]" }
      rename => { "[tmp][subject_split][commonname]" => "[file][x509][subject][common_name]" }
      rename => { "[tmp][subject_split][cn]" => "[file][x509][subject][common_name]" }
      rename => { "[tmp][subject_split][stateorprovincename]" => "[file][x509][subject][state_or_province]" }
      rename => { "[tmp][subject_split][st]" => "[file][x509][subject][state_or_province]" }
      rename => { "[tmp][subject_split][locality]" => "[file][x509][subject][locality]" }
      rename => { "[tmp][subject_split][l]" => "[file][x509][subject][locality]" }
      rename => { "[tmp][subject_split][role]" => "[user][roles]" }
      rename => { "[tmp][subject_split][title]" => "[user][title]" }
	    rename => { "[tmp][issuer_split][countryname]" => "[file][x509][issuer][country]" }
      rename => { "[tmp][issuer_split][c]" => "[file][x509][issuer][country]" }
      rename => { "[tmp][issuer_split][organizationname]" => "[file][x509.subject][organization]" }
      rename => { "[tmp][issuer_split][o]" => "[file][x509][issuer][organization]" }
      rename => { "[tmp][issuer_split][organizationalunitname]" => "[file][x509][issuer][organizational_unit]" }
      rename => { "[tmp][issuer_split][ou]" => "[file][x509][issuer][organizational_unit]" }
      rename => { "[tmp][issuer_split][commonname]" => "[file][x509][issuer][common_name]" }
      rename => { "[tmp][issuer_split][cn]" => "[file][x509][issuer][common_name]" }
      rename => { "[tmp][issuer_split][stateorprovincename]" => "[file][x509][issuer][state_or_province]" }
      rename => { "[tmp][issuer_split][st]" => "[file][x509][issuer][state_or_province]" }
      rename => { "[tmp][issuer_split][locality]" => "[file][x509][issuer][locality]" }
      rename => { "[tmp][issuer_split][l]" => "[file][x509][issuer][locality]" }
      rename => { "[tmp][issuer_split][role]" => "[source][user][roles]" }
      rename => { "[tmp][issuer_split][title]" => "[source][user][title]" }
    }
	  # create full_name field if subject has user info
	  if [tmp][subject_split][givenname] {
      mutate {
        add_field => { "[user][full_name]" => "%{[tmp][subject_split][givenname]} %{[tmp][subject_split][surname]}" }
      }
	  } else if [tmp][subject_split][gn] {
      mutate {
        add_field => { "[user][full_name]" => "%{[tmp][subject_split][gn]} %{[tmp][subject_split][sn]}" }
      }      	
	  }
	  # create full_name field if issuer has user info
	  if [tmp][issuer_split][givenname] {
      mutate {
        add_field => { "[source][user][full_name]" => "%{[tmp][issuer_split][givenname]} %{[tmp][issuer_split][surname]}" }
      }
	  } else if [tmp][issuer_split][gn] {
      mutate {
        add_field => { "[source][user][full_name]" => "%{[tmp][issuer_split][gn]} %{[tmp][issuer_split][sn]}" }
      }      	
	  }
  }

  if [event][kind] == "sip" {
    grok {
      match => { "[tmp][uri]" => "^(?<[url][query]>sip:(?<source_address>.*?)@(?<[client][ip]>.*?)(?<[client][port]>.*?)?;transport=(?<[network][transport]>).*?)$" }
    }
  } else {
    mutate {
      rename => { "[tmp][uri]" => "[url][query]" }
    }
  }
  if [event][kind] == "rdp" {
    grok {
      match => { "[tmp][cookie]" => "^(?<[user][domain]>.*?)\\+(?<[user][name]>.*?)$" }
    }
  }

  if [event][kind] == "mysql" {	
    mutate {
      rename => { "[tmp][arg]" => "[process][command_line]" }
    }
  } else {
    mutate {
      rename => { "[tmp][arg]" => "[url][full]" }
    }   
  }	
  
  if [event][kind] == "radius" or [event][kind] == "ntlm" {
    mutate {
      rename => { "[tmp][username]" => "[user][name]" }
    }    
  } else if [tmp][username] {  
      grok {
        match => { "[tmp][username]" => "^((?<[user][domain]>.*?)\\+)?(?<[user][name]>.*?)$" }
      }
  }
  if [event][kind] != "ssh" and [tmp][client]{   
    grok {
      match => { "[tmp][client]" => "^(?<[user][name]>.*?)\/(?<[user][domain]>.*?)$" }
    }  
  }
  if [event][kind] == "kerberos" {
    grok {
      match => { "[tmp][service]" => "^(?<[service][name]>.*?)\/(?<[destination][domain]>.*?)$" }
    }
  } else {
    mutate {
       rename => { "[tmp][service]" => "[service][name]" } 
    }
  }
  if [event][kind] == "dhcp" {
    mutate {
      rename => { "[tmp][mac]" => "[host][mac]" }
    }
  } else {
    mutate {
      rename => { "[tmp][mac]" => "[source][mac]" }
    }
  }
  if [event][kind] == "tls" {
    mutate {
     rename => { "[tmp][version]" => "[tls][version]" }
    }
  } else {
    mutate {
     rename => { "[tmp][version]" => "[service][version]" }
    }
  }
  if [tmp][success] {       
      mutate {
        add_tag => [ "success" ]
      }
  }
  if [event][kind] == "smb_file" {
    grok {
      match => { "[tmp][name]" => "^(?<[url][full]>.*\\(?<[file][name]>.*?))$" }
    }
  } else {
    mutate {
      rename => { "[tmp][name]" => "[rule][name]" }
    }
  }
  # add tags
  if [tmp][sni_matches_cert] {
      mutate {
        add_tag => [ "sni_matches_cert" ]
      }
	}
	if [tmp][local_orig] {
      mutate {
        add_tag => [ "local_orig" ]
      }
	}
  if [tmp][local_resp] {
      mutate {
        add_tag => [ "local_resp" ]
      }
	}
  if [tmp][forwardable] {
      mutate {
        add_tag => [ "forwardable" ]
      }
	}
  if [tmp][renewable] {
      mutate {
        add_tag => [ "renewable" ]
      }
	}
  if [tmp][is_webmail] {
      mutate {
        add_tag => [ "is_webmail" ]
      }
	}
  if [tmp][is_64it] {
      mutate {
        add_tag => [ "is_64it" ]
      }
	}
  if [tmp][is_exe] {
      mutate {
        add_tag => [ "is_exe" ]
      }
	}
  if [tmp][uses_aslr] {
      mutate {
        add_tag => [ "uses_aslr" ]
      }
	}
  if [tmp][uses_dep] {
      mutate {
        add_tag => [ "uses_dep" ]
      }
	}
  if [tmp][uses_code_integrity] {
      mutate {
        add_tag => [ "uses_code_integrity" ]
      }
	}
  if [tmp][uses_seh] {
      mutate {
        add_tag => [ "uses_seh" ]
      }
	}
  if [tmp][has_import_table] {
      mutate {
        add_tag => [ "has_import_table" ]
      }
	}
  if [tmp][has_export_table] {
      mutate {
        add_tag => [ "has_export_table" ]
      }
	}
  if [tmp][has_cert_table] {
      mutate {
        add_tag => [ "has_cert_table" ]
      }
	}
  if [tmp][has_debug_data] {
      mutate {
        add_tag => [ "has_debug_data" ]
      }
	}
  if [tmp][host_cert] {
      mutate {
        add_tag => [ "host_cert" ]
      }
	}
  if [tmp][client_cert] {
      mutate {
        add_tag => [ "client_cert" ]
      }
	}
  if [tmp][notice] {
      mutate {
        add_tag => [ "notice" ]
      }
	}
  if [tmp][auth_success] {
      mutate {
        add_tag => [ "auth_success" ]
      }
	}
	if [tmp][auth] {
      mutate {
        add_tag => [ "auth_success" ]
      }
	}
  if [tmp][share_flag] {
      mutate {
        add_tag => [ "share_flag" ]
      }
	}
  if [tmp][tls] {
      mutate {
        add_tag => [ "tls" ]
      }
  }
  if [event][kind] == "smtp" {
      mutate {
        remove_field => ["[file][path]" ]
      }
	}
  if [tmp][dropped] {
      mutate {
        add_tag => [ "dropped" ]
      }
	}
  if [event][kind] == "dns" {
    if [tmp][AA]{
      mutate {
        add_tag => [ "authoritative" ]
      }
    }
    if [tmp][TC]{
      mutate {
        add_tag => [ "truncated" ]
      }
    }
    if [tmp][RD]{
      mutate {
        add_tag => [ "recursion desired" ]
      }
    }
    if [tmp][RA]{
      mutate {
        add_tag => [ "recursion available" ]
      }
    }
    if [tmp][rejected]{
      mutate {
        add_tag => [ "rejected" ]
      }
    }
  }	
  mutate {
    remove_field => [ "tmp", "type", "metadata.beat", "metadata.ip_address", "metadata.type", "metadata.version", "module" ]
  }
  date {
    match => [ "[process][start]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[process][start]"
    tag_on_failure => "_dateparsefailure_ps"
  }
  date {
    match => [ "[tls.client][not_after]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[tls.client][not_after]"
    tag_on_failure => "_dateparsefailure_tcnf"
  }
  date {
    match => [ "[file][mtime]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[file][mtime]"
    tag_on_failure => "_dateparsefailure_fmt"
  }
  date {
    match => [ "[file][created]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[file][created]"
    tag_on_failure => "_dateparsefailure_fc"
  }
  date {
    match => [ "[file][ctime]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[file][ctime]"
    tag_on_failure => "_dateparsefailure_fct"
  }
  date {
    match => [ "[file][accessed]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[file][accessed]"
    tag_on_failure => "_dateparsefailure_fa"
  }
  date {
    match => [ "[event][created]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_es"
  }
  date {
    match => [ "[file][x509][not_before]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[file][x509][not_before]"
    tag_on_failure => "_dateparsefailure_es"
  }
  date {
    match => [ "[file][x509][not_after]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[file][x509][not_after]"
    tag_on_failure => "_dateparsefailure_es"
  }
}
output {
  pipeline { send_to => [enrichments] }
}