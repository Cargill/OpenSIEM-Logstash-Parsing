# Copyright [2023] [Cargill, Incorporated.]
# SPDX-License-Identifier:Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "gitguardian" }
    add_field => { "[event][dataset]" => "gitguardian.incidents" }
    add_field => { "[log][source][hostname]" => "api_gitguardian_incidents" }
    lowercase => [ "message" ]
  }
  json {
    source => "message"
    target => "tmp"
  }
  mutate {
    rename => { "[tmp][id]" => "[event][id]" }
    rename => { "[tmp][url]" => "[event][url]" }
    rename => { "[tmp][created_at]" => "[event][created]" }
    rename => { "[tmp][status]" => "[event][outcome]" }
    rename => { "[tmp][file_path]" => "[file][path]" }
    rename => { "[tmp][first_occurrence_date]" => "[event][start]"}
    rename => { "[tmp][last_occurrence_date]" => "[event][end]" }
    rename => { "[tmp][category]" => "[event][category]" }
    rename => { "[tmp][name]" => "[event][type]" }
    rename => { "[tmp][display_name]" => "[rule][name]" }
    rename => { "[tmp][assignee]" => "[assignee][user][email]" }
    rename => { "[tmp][severity_rule]" => "[event][severity_name]" }
    rename => { "[tmp][incident_note_count]" => "[event][sequence]" }
    rename => { "[tmp][api_url]" => "[url][original]" }
    rename => { "[tmp][public_link]" => "[url][full]" }
    rename => { "[tmp][commit_sha]" => "[event][hash]" }
    rename => { "[tmp][repo_name]" => "[repository][name]" }
    rename => { "[tmp][github_organization]" => "[organization][name]" }
    rename => { "[tmp][first_occurrence_id]" => "[span][id]" }
    rename => { "[tmp][resolved_at]" => "[event][modified]" }
    rename => { "[tmp][occurrence_count]" => "[event][duration]" }
    rename => { "[tmp][validity_status]" => "[event][recommendation]" }
  }
  ruby {
    code => "
      detail_list = []
      reason_list = []
      user_email = []
      user_name = []
      user_id = []
      user_type = []
      description_list = []      
      if event.get('[tmp][relations]').kind_of? Array
        event.get('[tmp][relations]').each do |item|
          if item['detail'] != ''  
            detail_list.push(item['detail'])
          end
          if item['reason'] != ''
            reason_list.push(item['reason'])
          end
        end
      end
      if event.get('[tmp][who]').kind_of? Array
        event.get('[tmp][who]').each do |item|
          if item['developer_type'] != ''  
            user_type.push(item['developer_type'])
          end
          if item['email'] != ''
            user_email.push(item['email'])
          end
          if item['name'] != ''
            user_name.push(item['name'])
          end
          if item['id'] != ''
            user_id.push(item['id'])
          end
        end
      end
      if event.get('[tmp][tags]').kind_of? Array
        event.get('[tmp][tags]').each do |item|
          if item['long_description'] != ''  
            description_list.push(item['long_description'])
          end
        end
      end
      if !detail_list.empty?
        event.set('[rule][description]', detail_list)
      end
      if !reason_list.empty?
        event.set('[event][reason]', reason_list)
      end
      if !user_email.empty?
        event.set('[user][email]', user_email)
      end
      if !user_name.empty?
        event.set('[user][name]', user_name)
      end
      if !user_id.empty?
        event.set('[user][id]', user_id)
      end
      if !user_type.empty?
        event.set('[user][roles]', user_type)
      end
      if !description_list.empty?
        event.set('[rule][reference]', description_list)
      end
    "
    tag_on_exception => "ruby_block_exception"
  }
  if [tmp][is_shared]{
      mutate {
        add_tag => [ "shared" ]
      }
  }
  if [tmp][has_feedback]{
      mutate {
        add_tag => [ "feedback" ]
      }
  }
  date {
    match => [ "[event][start]", "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_es"
  }
  date {
    match => [ "[event][end]", "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][end]"
    tag_on_failure => "_dateparsefailure_ee"
  }
  date {
    match => [ "[event][created]", "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  date {
    match => [ "[event][modified]", "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][modified]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  mutate {
    remove_field => [ "tmp" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}