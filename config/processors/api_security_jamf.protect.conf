# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[cloud][provider]" => "jamf" }
    add_field => { "[event][module]" => "jamf" }
	add_field => { "[event][dataset]" => "jamf.endpoint_protection" }
    add_field => { "[log][source][hostname]" => "api_jamf"}
  }
  json {
    source => "message"
    target => "tmp"
  }
  mutate {
    rename => { "[tmp][ips]" => "[host][ip]" }
    rename => { "[tmp][serial]" => "[host][serial]" }
    rename => { "[tmp][hostname]" => "[host][name]" }
    rename => { "[tmp][event][path]" => "[file][path]" }
    rename => { "[tmp][event][timestamp]" => "[event][created]" }
    rename => { "[tmp][event.description]" => "[event][description]" }
    rename => { "[tmp][eventType]" => "[event][type]" }
    rename => { "[tmp][reportType]" => "[event][provider]" }
  }
  
  ruby {
    code => "
      process_name_list = []
      process_path_list = []
      process_authorities_list = []
      user_name_list = []
      
      if event.get('[tmp][processes]').kind_of?(Array)
        event.get('[tmp][processes]').each do |item|
          if item['name'] != ''
            process_name_list.push(item['name'])
          end
          if item['path'] != ''
            process_path_list.push(item['path'])
          end
          if item['signingInfo'] != ''
            item['signingInfo'].each do |key, value|
              if key == 'authorities' and !value.empty?
                process_authorities_list.push(item['signingInfo'].fetch('authorities'))
              end
            end
          end
        end
      end

      if event.get('[tmp][user][name]').kind_of?(Array)
        event.get('[tmp][user][name]').each do |item|
          if item['name'] != ''
            user_name_list.push(item['name'])
          end
        end
      end

      if !process_name_list.empty?
        event.set('[process][name]', process_name_list)
      end
      if !process_path_list.empty?
        event.set('[process][executable]', process_path_list)
      end
      if !process_authorities_list.empty?
        event.set('[file][x509][issuer][common_name]', process_authorities_list)
      end
      if !user_name_list.empty?
        event.set('[user][name]', user_name_list)
      end
    "
    tag_on_exception => "ruby_block_exception"
  }
  
  date {
    match => [ "[event][created]" , "UNIX" ]
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if [_dateparsefailure_ec] in [tags] {
    mutate {
      remove_field => ["[event][created]"]
    }
  }
  mutate {
    remove_field => [ "tmp" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
