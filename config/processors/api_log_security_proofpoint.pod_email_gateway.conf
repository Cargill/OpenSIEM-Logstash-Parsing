# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => {"log.source.hostname" => "api_proofpoint_pod"}
  }
  json {
    source => "message"
    target => "pp"
  }
  mutate {
    rename => { "[pp][msg][parsedAddresses][from]" => "source.user.email" }
    rename => { "[pp][msg][parsedAddresses][to]" => "destination.user.email" }
    update => { "[pp][msg][parsedAddresses][cc]" => "destintaion.user.email" }
    rename => { "[pp][msg][normalizedHeader][subject]" => "email.subject" }
    rename => { "[pp][ts]" => "event.created" }
    rename => { "[pp][guid]" => "rule.uuid" }
    rename => { "[pp][pps][cid]" => "observer.name" }
    rename => { "[pp][pps][agent]" => "observer.hostname" }
    rename => { "[pp][pps][version]" => "observer.version" }
    rename => { "[pp][filter][disposition]" => "event.outcome" }
    rename => { "[pp][filter][quarantine][folder]" => "file.path" }
    rename => { "[pp][filter][quarantine][rule]" => "rule.name" }
    rename => { "[pp][filter][routeDirection]" => "network.direction" }
    rename => { "[pp][filter][startTime]" => "event.start"}
    rename => { "[pp][connection][ip]" => "source.ip" }
    rename => { "[pp][connection][host]" => "source.address" }

    add_field => { "observer.vendor" => "proofpoint" }
    add_field => { "observer.product" => "proofpoint e-mail filter" }
    add_field => { "observer.type" => "e-mail filter" }
    add_field => { "event.dataset" => "proofpoint" }
    add_field => { "event.module" => "proofpoint.pod" }
  }

  ruby {
    code => "
      detected_name_list = []
      detected_size_bytes_list = []
      md5_list = []
      sha256_list = []
      urls_list = []
      if event.get('[pp][msgParts]').kind_of?(Array)
        event.get('[pp][msgParts]').each do |item|
          if item['detectedName'] != ''
            detected_name_list.push(item['detectedName'])
          end
          if item['detectedSizeBytes'] != ''
            detected_size_bytes_list.push(item['detectedSizeBytes'])
          end
          if item['sha256'] != ''
            sha256_list.push(item['sha256'])
          end
          if item['md5'] != ''
            md5_list.push(item['md5'])
          end
          if item['urls'] != ''
            item['urls'].each do |url|
              if url !=''
                urls_list.push(url['url'])
              end
            end
          end
        end
      end
      if !detected_name_list.empty?
        event.set('file.name', detected_name_list)
      end
      if !detected_size_bytes_list.empty?
        event.set('file.size', detected_size_bytes_list)
      end
      if !md5_list.empty?
        event.set('file.hash.md5', md5_list)
      end
      if !sha256_list.empty?
        event.set('file.hash.sha256', sha256_list)
      end
      if !urls_list.empty?
        event.set('url.full', urls_list)
      end
    "
    tag_on_exception => "msgparts_ruby_block"
  }

  ruby {
    # flattening filter actions
    code => "
      event_original_list = []
      if event.get('[pp][filter][actions]').kind_of?(Array)
        event.get('[pp][filter][actions]').each do |item|
          event_row = ''
          if !item['rule'].to_s.empty?
            event_row = event_row + 'rule:' + item['rule'].to_s + ', '
          end
          if !item['module'].to_s.empty?
            event_row = event_row + 'module:' + item['module'].to_s + ', '
          end
          if !item['action'].to_s.empty?
            event_row = event_row + 'action:' + item['action'].to_s + ', '
          end
          if !item['isFinal'].to_s.empty?
            event_row = event_row + 'isFinal:' + item['isFinal'].to_s + ', '
          end
          event_original_list.append(event_row.delete_suffix(', '))
        end
      end
      event.set('event.action', event_original_list)
    "
    tag_on_exception => "actions_ruby_block"
  }

  dissect {
    mapping => {
      "[pp][connection][protocol]" => "%{?data}:%{network.protocol}"
    }
  }

  if [pp][filter][ismsgencrypted] == "true" {
    mutate {
      add_tag => [ "file encrypted" ]
    }
  }


  date {
    match => ["event.created","yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
      if ![log.original] {
        mutate {
            copy => { "message" => "log.original" }
          }
      }
    mutate {
      remove_field => ["event.created"]
    }
  }
  date {
    match => ["event.start","yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ"]
    timezone => "GMT"
    locale => "en"
    target => "event.start"
    tag_on_failure => "_dateparsefailure_es"
  }
  if "_dateparsefailure_es" in [tags]  {
      if ![log.original] {
        mutate {
            copy => { "message" => "log.original" }
          }
      }
    mutate {
      remove_field => ["event.start"]
    }
  }
  mutate {
    # mutate cannot have tag on failure
    remove_field => ["pp"]
  }
   
}
output {
  pipeline { send_to => [enrichments] }
}
