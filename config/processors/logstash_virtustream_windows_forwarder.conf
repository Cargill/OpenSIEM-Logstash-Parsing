# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    copy => { "message" => "log.original" }
  }
  json {
    source => "message"
    target => "tmp"
  }
  mutate {
    rename => { "[tmp][Domain]" => "destination.domain" }
    rename => { "[tmp][ErrorCode]" => "error.code" }
    rename => { "[tmp][type]" => "agent.type" }
    rename => { "[tmp][Hostname]" => "log.source.hostname" }
    rename => { "[tmp][host]" => "host.ip" }
    rename => { "[tmp][port]" => "source.port" }
    rename => { "[tmp][@timestamp]" => "event.created" }
    rename => { "[tmp][EventTime]" => "event.start" }
    rename => { "[tmp][EventReceivedTime]" => "event.ingested" }
    rename => { "[tmp][EventID]" => "event.id" }
    rename => { "[tmp][ObjectType]" => "process.args" }
    rename => { "[tmp][UserID]" => "user.id" }
    rename => { "[tmp][TargetUserSid]" => "user.id" }
    rename => { "[tmp][TargetUserName]" => "user.name" }
    rename => { "[tmp][EventType]" => "event.type" }
    rename => { "[tmp][SeverityValue]" => "event.severity" }
    rename => { "[tmp][Channel]" => "event.dataset" }
    rename => { "[tmp][AccountName]" => "source.user.id" }
    rename => { "[tmp][LogonGuid]" => "destination.user.group.id" }
    rename => { "[tmp][LogonProcessName]" => "process.name" }
    rename => { "[tmp][ProcessID]" => "process.pid" }
    rename => { "[tmp][ThreadID]" => "process.thread.id" }
    rename => { "[tmp][OperationElaspedTimeInMilliSeconds]" => "event.duration" }
    rename => { "[tmp][param6]" => "source.user.domain" }
    rename => { "[tmp][param9]" => "source.address" }
  }
  if [event.duration] {
    mutate {
      convert => { "event.duration" => "float" }
    }
    ruby {
      code => "event.set('event.duration',event.get('event.duration')*10e6)"
    }
  }
  date {
    match => ["event.ingested", "yyyy-MM-dd HH:mm:ss" ] 
    timezone => "GMT"
    target => "event.ingested"
    tag_on_failure => "_dateparsefailure_ei"
  }
  if "_dateparsefailure_ei" in [tags]  {
    mutate {
     remove_field => [ "event.ingested" ]
    }
  }
  date {
    match => ["event.start" , "yyyy-MM-dd HH:mm:ss" ]
    timezone => "GMT"
    target => "event.start"
    tag_on_failure => "_dateparsefailure_es"
  }
  if "_dateparsefailure_es" in [tags]  {
    mutate {
     remove_field => [ "event.start" ]
    }
  }
  date {
    match => ["event.created" , "ISO8601" ] 
    timezone => "GMT"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
    mutate {
     remove_field => [ "event.created" ]
    }
  }
  mutate {
    remove_field => [ "tmp", "host", "port" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}