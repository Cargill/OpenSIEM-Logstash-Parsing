# Copyright [2024] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
    if [message] == "" or ![message] {
    drop {}
  }
  mutate {
    add_field => {
      "[event][module]" => "aws"
      "[event][dataset]" => "aws.elb"
      "[cloud][provider]" => "aws"
    }
  }
  grok {
    match => {
      "message" => '^((?<[tmp][type]>.*?) )?(?<[tmp][ingested]>.*?) (?<[tmp][instance_id]>.*?) (?<[tmp][client_ip]>.*?):(?<[tmp][client_port]>\d+) (-|((?<[tmp][dst_ip]>.*?):(?<[tmp][dst_port]>\d+))) (-|(?<[tmp][request_processing_time]>\.*?))(-|(?<[tmp][target_processing_time]>.*?)) (-|(?<[tmp][response_processing_time]>.*?)) (-|(?<[tmp][elb_status_code]>.*?)) (-|(?<[tmp][target_status_code]>.*?)) (-|(?<[tmp][received_bytes]>.*?)) (-|(?<[tmp][sent_bytes]>.*?)) "(-|(?<[tmp][method]>.*?)) (?<[tmp][url_full]>.*?) (?<[tmp][next_protocol]>.*?)" "(-|(?<[tmp][user_agent]>.*?))" (-|(?<[tmp][ssl_cipher]>.*?)) (-|(?<[tmp][ssl_protocol]>.*?))( (-|(?<[tmp][target_group_arn]>.*?)) "(-|(?<[tmp][trace_id]>.*?))" "(-|(?<[tmp][domain_name]>.*?))" "(-|(?<[tmp][chosen_cert_arn]>.*?))" (-|(?<[tmp][matched_rule_priority]>.*?)) (-|(?<[tmp][request_creation_time]>.*?)) "(-|(?<[tmp][actions_executed]>.*?))" "(-|(?<[tmp][redirect_url]>.*?))" "(-|(?<[tmp][error_reason]>.*?))" "(-|(?<[tmp][target_port_list]>.*?))" "(-|(?<[tmp][target_status_code_list]>.*?))" "(-|(?<[tmp][classification]>.*?))" "(-|(?<[tmp][classification_reason]>.*?))")?$'
    }
  }
  mutate{
    add_field => {
      "[log][source][hostname]" => "%{[tmp][instance_id]}"
    }
  }
  # did not mapp
  # "[tmp][target_processing_time]"
  # "[tmp][response_processing_time]"
  # "[tmp][target_group_arn]"
  mutate {
    rename => {
      "[tmp][request_creation_time]" => "[event][created]"
      "[tmp][ingested]" => "[event][ingested]"
      "[tmp][request_processing_time]" => "[event][duration]"
      "[tmp][matched_rule_priority]" => "[event][severity]"
      "[tmp][classification]" => "[event][category]"
      "[tmp][error_reason]" => "[event][reason]"
      "[tmp][instance_id]" => "[cloud][instance][name]"
      "[tmp][type]" => "[url][scheme]"
      "[tmp][url_full]" => "[url][full]"
      "[tmp][domain_name]" => "[url][domain]"
      "[tmp][elb_status_code]" => "[http][response][status_code]"
      "[tmp][received_bytes]" => "[http][request][bytes]"
      "[tmp][sent_bytes]" => "[http][response][bytes]"
      "[tmp][method]" => "[http][request][method]"
      "[tmp][redirect_url]" => "[http][request][referrer]"
      "[tmp][user_agent]" => "[user_agent][name]"
      "[tmp][ssl_cipher]" => "[tls][cipher]"
      "[tmp][ssl_protocol]" => "[tls][version_protocol]"
      "[tmp][chosen_cert_arn]" => "[tls][client][server_name]"
      "[tmp][trace_id]" => "[trace][id]"
      "[tmp][actions_executed]" => "[rule][name]"
      "[tmp][classification_reason]" => "[rule][description]"
      "[tmp][client_port]" => "[source][port]"
      "[tmp][client_ip]" => "[source][ip]"
      "[tmp][dst_ip]" => "[destination][ip]"
      "[tmp][dst_port]" => "[destination][port]"
      "[tmp][next_protocol]" => "[tls][next_protocol]"
    }
  }
  if [tmp][target_port_list] != "-" {
    mutate {
      split => { "[tmp][target_port_list]" => " " }
    }
    grok {
      tag_on_failure => "_parsefailure_grok_ip_port"
      match => { "[tmp][target_port_list]" => "(?<[destination][ip]>.*?):(?<[destination][port]>.*?)$" }
    }
  }
  if [tmp][target_status_code] != "-" {
    mutate {
      split => { "[tmp][target_status_code]" => " " }
    }
  }
  # "time" => "2023-03-11T11:30:53.264914Z"
  date {
    match => ["[event][created]", "yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'"]
    timezone => "GMT"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  date {
    match => ["[event][ingested]", "yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'"]
    timezone => "GMT"
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_ei"
  }
  mutate {
    remove_field => [ "[tmp]" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}