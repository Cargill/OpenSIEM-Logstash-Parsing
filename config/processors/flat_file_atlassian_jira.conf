# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "atlassian_jira" }
    add_field => { "[event][dataset]" => "jira" }
  }
  mutate {
    #rename => { "[host][ip]" => "[log][source][ip]" }
    #rename => { "[fields][event][module]" => "[event][module]" }
    rename => { "[host][name]" => "[log][source][hostname]" }
    rename => { "[log][file][path]" => "[log][file][path]" }
    rename => { "@timestamp" => "[event][created]" }
    rename => { "[agent][id]" => "[agent][id]" }
    rename => { "[agent][ephemeral_id]" => "[agent][ephemeral_id]" }
    rename => { "[agent][type]" => "[agent][type]" }
    rename => { "[agent][version]" => "[agent][version]" }
    #copy => { "[host][hostname]" => "[host][ip]" }
    copy => { "[log][source][hostname]" => "[host][ip]" }
  }
  mutate {
    gsub => [ "[host][ip]", "ip-", "" ,
               "[host][ip]", "\-", "." ]
    copy => { "[host][ip]" => "[log][source][ip]"}
  }
  if [message] =~ "destroyed" {
    if [message] =~ "Container" {
      dissect {
        mapping => { "message" => "%{} %{} %{[[process][thread][name]]->} %{[[event][action]]} %{?data} %{+[[event][action]]} for '%{[[user][name]]}'" }
        tag_on_failure => "_dissectfailure"
      }
    }
    else {
      grok {
        match => { "message" => "^(?<data>.*? .*?) (?<[process][thread][name]>.*?) ((?<data>.*?) (?<data>.*?) (?<data>.*?) (?<[source][ip]>.*),(?<[network][forwarded_ip]>.*) (?<[url][path]>.*?) )?(?<action1>.*?) \[(?<data>.*)\] (?<action2>.*) for '(?<[user][name]>.*?)'$" }
        timeout_millis => 500
        tag_on_failure => "_grokfailure_1"
      }
    }
  }
  else if [message] =~ "created" {
    grok {
      match => { "message" => "^(?<data>.*? .*?) (?<[process][thread][name]>.*?) ((?<[user][name]>.*?) (?<data>.*?) (?<[file][name]>.*?) (?<[source][ip]>.*),(?<[network][forwarded_ip]>.*?) (?<[url][path]>.*?) )?(?<[event][action]>.*?) \[(?<data>.*)\]$" }
      timeout_millis => 500
      tag_on_failure => "_grokfailure_2"
    }
    if [file][name] == "/" or [file][name] == "-" {
      mutate {
        remove_field => [ "[file][name]" ]
      }
    }
  }
  if [action1] and [action2] {
    mutate {
      strip => [ "action1", "action2" ]
      add_field => { "[event][action]" => "%{action1} %{action2}" }
    }
  }
  if [event][action] =~ "-" {
    mutate {
      gsub => [ "[event][action]", "\-", "" ]
    }
  }
  if [url][path] == "/" {
    mutate {
      remove_field => [ "[url]" ]
    }
  }
  date {
    match => [ "[event][created]" , "yyyy-MM-dd HH:mm:ss,SSSZZ", "ISO8601" ]
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags] {
    mutate {
      #copy => { "message" => "[log][original]" }
      remove_field => [ "[event][created]" ]
    }
  }
  mutate {
    remove_field => [  "action1", "action2", "data","@metadata","[log][offset]","[agent][hostname]","input" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}