# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    lowercase => [ "message" ]
  }
  if [message] =~ '^{"records": \[' {
    json {
      source => "message"
      target => "tmp"
      skip_on_invalid_json => true
    }
    split {
      field => "[tmp][records]"
      target => "az"
    }
    mutate {
      replace => { "message" => "%{az}" }
    }
  } else {
    json {
      source => "message"
      target => "az"
      skip_on_invalid_json => true
    }
  }
  mutate{
    add_field => { "[event][module]" => "azure" }
    add_field => { "[event][dataset]" => "azure.audit" }
    add_field => { "[log][source][hostname]" => "%{[az][tenantid]}" }
  }
  mutate {
    rename => { "[az][aadoperationtype]" => "[event][action]" }
    rename => { "[az][aadtenantid]" => "[rule][id]" }
    rename => { "[az][activitydatetime]" => "[event][created]" }
    rename => { "[az][activitydisplayname]" => "[rule][name]" }
    rename => { "[az][category]" => "[event][category]" }
    rename => { "[az][durationms]" => "[event][duration]" }
    rename => { "[az][id]"=>"[event][id]" }
    rename => { "[az][initiatedby][user][id]"=>"[source][user][id]" }
    rename => { "[az][initiatedby][user][displayname]"=>"[source][user][name]" }
    rename => { "[az][initiatedby][user][userprincipalname]"=>"[source][user][email]" }
    rename => { "[az][initiatedby][user][ipaddress]"=>"[source][ip]" }
    rename => { "[az][level]" => "[event][severity]" }
    rename => { "[az][operationversion]"=>"[rule][version]" }
    rename => { "[az][result]" => "[event][outcome]" }
    rename => { "[az][resultdescription]" => "[rule][description]" }
    rename => { "[az][timegenerated]" => "[event][ingested]" }
    rename => { "[az][type]" => "[event][type]" }  
  }
  ruby {
    code => "
      id_lst = []
      name_lst = []
      email_lst = []
      
      if event.get('[az][targetresources]').kind_of?(Array)
        event.get('[az][targetresources]').each do |item|
          if item['id'] != ''
            id_lst.push(item['id'])
          end
          if item['displayname'] != ''
            name_lst.push(item['displayname'])
          end
          if item['userprincipalname'] != ''
            email_lst.push(item['userprincipalname'])
          end
        end
      end
 
      if !id_lst.empty?
        event.set('[destination][user][id]', id_lst)
      end
      if !name_lst.empty?
        event.set('[destination][user][name]', name_lst)
      end
      if !email_lst.empty?
        event.set('[destination][user][email]', email_lst)
      end
    "
    tag_on_exception => "ruby_block_exception"
  }
  mutate {
    remove_field => [ "az", "tmp" ]
  }
  date {
    match => [ "[event][ingested]" , "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_ei"
  }
  date {
    match => [ "[event][created]" , "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
}
output {
  pipeline { send_to => [enrichments] }
}