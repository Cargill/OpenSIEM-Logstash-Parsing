# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "windows.event.forwarding" }
    add_field => { "event.dataset" => "wef" }
    add_field => { "observer.vendor" => "windows" }
    add_field => { "observer.product" => "windows" }
    add_field => { "observer.type" => "wef" }
  }
  mutate {
    rename => {"type" => "agent.type"}
    rename => {"[agent][hostname]" => "agent.name"}
    rename => {"[winlog][keywords]" => "rule.category"}
    rename => {"[winlog][channel]"  => "event.dataset"}
    # User
    rename => {"[winlog][user][domain]" => "user.domain"}
    rename => {"[winlog][user][name]" => "user_name"}
    # Destination
    rename => {"[winlog][event_data][TargetLogonGuid]" => "destination.user.group.id"}
    rename => {"[winlog][event_data][TargetDomainName]" => "destination.domain"}
    rename => {"[winlog][event_data][TargetOutboundUserName]" => "destinationuser_name"}
    rename => {"[winlog][event_data][TargetUserName]" => "hostuser_name"}
    rename => {"[winlog][event_data][DestAddress]" => "destination.ip"}
    rename => {"[winlog][event_data][Group]"  => "destination.user.group.name"}
    rename => {"[winlog][event_data][DestPort]" => "destination.port"}
    rename => {"[winlog][event_data][ClientName]" => "client.user.name"}
    rename => {"[winlog][event_data][ClientAddress]" => "client.ip"}
    rename => {"[winlog][event_data][ClientIP]" => "client_ip"}
    # File
    rename => {"[winlog][event_data][OriginalFileName]" => "file.path"}
    rename => {"[winlog][event_data][Path]" => "file.path"}
    rename => {"[winlog][event_data][ShareLocalPath]" => "file.target_path"}
    rename => {"[winlog][event_data][ObjectName]" => "file.path"}
    rename => { "[winlog][event_data][ServiceFileName]" => "file.path" }
    # Process fields
    rename => {"[winlog][event_data][TaskName]" => "process.name"}
    # these next 2 may be wrong
    rename => {"[winlog][event_data][ProcessID]" => "process.pid"}
    rename => {"[winlog][user_data][ProcessID]" => "process.pid"}
    rename => {"[winlog][process][pid]" => "process.pid"}
    rename => {"[winlog][event_data][NewProcessName]" => "process.path"}
    rename => {"[winlog][event_data][ProcessName]" => "process.name"}
    rename => {"[winlog][event_data][ServiceName]" => "service.name"}
    rename => {"[winlog][event_data][Service]" => "service.name"}
    rename => {"[winlog][event_data][ServiceSid]" => "process.pid"}
    rename => {"[winlog][event_data][ParentProcessName]" => "process.parent.name"}
    rename => {"[winlog][event_data][LogonProcessName]" => "process.name"}
    rename => {"[winlog][event_data][Application]" => "process.name"}
    rename => {"[winlog][event_data][ObjectType]" => "process.args"}
    rename => {"[winlog][event_data][SourceProcessId]" => "process.parent.pid"}
    rename => {"[winlog][event_data][ProcessId]" => "process.pid"}
    rename => {"[winlog][event_data][ProcessPath]" => "process.path"}
    rename => {"[winlog][event_data][ProcessPid]" => "process.pid"}
    rename => {"[winlog][process][thread][id]" => "process.thread.id"}
    # Source
    rename => {"[winlog][event_data][SubjectDomainName]" => "source.user.domain"}
    rename => {"[winlog][user_data][SubjectDomainName]" => "source.user.domain"}
    rename => {"[winlog][event_data][AccountName]" => "source.user.id"}
    rename => {"[winlog][event_data][AccountDomain]" => "source.user.domain"}
    rename => {"[winlog][event_data][IpAddress]" => "source.ip"}
    rename => {"[winlog][event_data][IpPort]" => "source.port"}
    rename => {"[winlog][event_data][SourceAddress]" => "source.ip"}
    rename => {"[winlog][event_data][SourcePort]" => "source.port"}
    rename => {"[winlog][event_data][SubjectUserName]" => "sourceuser_name"}
    rename => {"[winlog][user_data][SubjectUserName]" => "sourceuser_name"}
    rename => {"[winlog][user_data][SubjectUserSid]" => "sourceuser_id"}
    rename => {"[winlog][event_data][SubjectUserSid]" => "sourceuser_id"}
    # Other
    rename => {"[winlog][event_data][PackageName]" => "package.name"}
    rename => {"[winlog][event_data][Protocol]" => "network.iana_number"}
    rename => {"[winlog][event_data][LogonType]" => "rule.uuid"}
    rename => {"[winlog][event_data][RuleId]" => "rule.id"}
    rename => {"[winlog][event_data][RuleName]" => "rule.name"}
    rename => {"[winlog][event_data][ConnType]" => "network.transport"}
    #rename => {"[winlog][event_data][FailureReason]" => "error.message"}
    #rename => {"[winlog][event_data][SubStatus]" => "error.code"}
    # Flattening these fields
    # Host
    rename => {"[host][name]" => "log.source.hostname"}
    rename => {"[winlog][event_data][WorkstationName]" => "destination.address"}
    rename => {"[winlog][computer_name]" => "log.source.hostname"}
    # log
    rename => {"[log][level]" => "log.level"}
    # event
    rename => {"[event][action]" => "event.action"}
    rename => {"[winlog][event_id]" => "event.id"}
    rename => {"[event][created]" => "event.created"}
    rename => {"[event][provider]" => "event.provider"}
    rename => {"[event][kind]" => "event.kind"}
    rename => {"[log][event][original]" => "event.original"}
    rename => {"[winlog][event_data][Status]" => "event.code"}
    rename => {"destination.geo.country_code2" => "destination.geo.country_iso_code"}
    rename => {"source.geo.country_code2" => "source.geo.country_iso_code"}

    # drop process.pid as it is not useful, and we see hex values for them
    # drop timestamp to let it regenerated by indexer
    # remove_field => ["message", "[event][original]"]
  }
  mutate {
    convert => {
      "event.id" => "string"
    }
  }
  date {
    match => ["event.created", "yyyy-MM-dd'T'HH:mm:ssZ","ISO8601","yyyy-MM-dd't'HH:mm:ss.SSSz"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
  }
  # spliting client ip and port
  if [client_ip] {
    if [client_ip] =~ ":" {
      dissect {
        mapping => {
          client_ip => "%{client.ip}:%{client.port}"
        }
      }
      mutate {remove_field => ["client_ip"]}
    }
    else {
      mutate {
        rename => {"client_ip" => "client.ip"}
      }
    }
  }
  # spliting user name and domain
  if [user_name] {
    if [user_name] =~ "@" {
      dissect {
        mapping => {
          user_name => "%{user.name}@%{user.domain}"
        }
      }
      mutate {remove_field => ["user_name"]}
    }
    else {
      mutate {
        rename => {"user_name" => "user.name"}
      }
    }
  }
  if [sourceuser_name] {
    if [sourceuser_name] =~ "@" {
      dissect {
        mapping => {
          sourceuser_name => "%{source.user.name}@%{source.user.domain}"
        }
      }
      mutate {remove_field => ["sourceuser_name"]}
    }
    else {
      mutate {
        rename => {"sourceuser_name" => "source.user.name"}
      }
    }
  }
  if [destinationuser_name] {
    if [destinationuser_name] =~ "@" {
      dissect {
        mapping => {
          destinationuser_name => "%{destination.user.name}@%{destination.user.domain}"
        }
      }
      mutate {remove_field => ["destinationuser_name"]}
    }
    else {
      mutate {
        rename => {"destinationuser_name" => "destination.user.name"}
      }
    }
  }
  if [sourceuser_id] {
    if [sourceuser_id] =~ "@" {
      dissect {
        mapping => {
          sourceuser_id => "%{source.user.id}@%{source.user.domain}"
        }
      }
      mutate {remove_field => ["sourceuser_id"]}
    }
    else {
      mutate {
        rename => {"sourceuser_id" => "source.user.id"}
      }
    }
  }
  if [hostuser_name] and [hostuser_name] != "None" {
    if [hostuser_name] =~ "@" {
      dissect {
        mapping => {
          hostuser_name => "%{host.user.name}@%{host.user.domain}"
        }
      }
      mutate {remove_field => ["hostuser_name"]}
    }
    else {
      mutate {
        rename => {"hostuser_name" => "host.user.name"}
      }
    }
  }
  mutate {
    copy => { "message" => "tmp" }
  }
  mutate {    
    gsub => [ "tmp", "\r", "" ]
    gsub => [ "tmp", "\n", "" ]
  }
  if [event.id] == "5829" {
    grok {
      tag_on_failure => "_grokparsefailure_1"
      match => { "tmp" => "^(?<error.message>.*?) Warning: (.*?please visit  (?<event.reference>.*?)\.\s+).*?Machine SamAccountName: (?<observer.name>.*?) .*?Domain: (?<source.domain>.*?\.) .*?Account Type:" }
    }
  }
  if [event.id] == "411" {
    grok {
      tag_on_failure => "_grokparsefailure_2"
      match => { "tmp" => "^(?<event.action>.*?) Additional Data(.*?) Token Type: (?<event.url>.*?)(\s)?  Client IP: (?<client.ip>.*?) Error message: (?<error.message>.*?) Exception details: (?<error.type>.*?):(.*)" }
    }
  }
  if [event.id] == "7036" {  
    mutate {
      rename => { "[winlog][event_data][param1]" => "service.name" }
      rename => { "[winlog][event_data][param2]" => "service.state" }
    }
  }
  if [event.id] == "1149" {  
    mutate {
      rename => { "[winlog][event_data][Param1]" => "source.user.name" }
      rename => { "[winlog][event_data][Param2]" => "source.user.domain" }
      rename => { "[winlog][event_data][Param2]" => "source.ip" }
    }
  }
  if [event.id] == "4769" {  
    mutate {
      rename => { "[winlog][event_data][TicketOptions]" => "ticket_option" }
      rename => { "[winlog][event_data][TicketEncryptionType]" => "ticket_encrypt" }
    }
    translate {
      field => "ticket_encrypt"
      destination => "tls.cipher"
      dictionary => {
        "0x1" => "DES-CBC-CRC"
        "0x3" => "DES-CBC-MD5"
        "0x11" => "AES128-CTS-HMAC-SHA1-96"
        "0x12" => "AES256-CTS-HMAC-SHA1-96"
        "0x17" => "RC4-HMAC"
        "0x18" => "RC4-HMAC-EXP"
      }
        fallback => "Audit Failures"
    }
    if [ticket_option] {
      ruby {
        code => "
            # decimal representations for the 32 bit binaries with check bit set
            # https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4769
            hash = {
              1073741824 => 'Forwardable',
              536870912 => 'Forwarded',
              268435456 => 'Proxiable',
              134217728 => 'Proxy',
              67108864 => 'Allow-postdate',
              33554432 => 'Postdated',
              16777216 => 'Invalid',
              8388608 => 'Renewable',
              4194304 => 'Initial',
              2097152 => 'Pre-authent',
              1048576 => 'Opt-hardware-auth',
              524288 => 'Transited-policy-checked',
              262144 => 'Ok-as-delegate',
              131072 => 'Request-anonymous',
              65536 => 'Name-canonicalize',
              32 => 'Disable-transited-check',
              16 => 'Renewable-ok',
              8 => 'Enc-tkt-in-skey',
              4 => 'Unused',
              2 => 'Renew',
              1 => 'Validate'
            }
            hexNum = event.get('ticket_option')
            num = hexNum.to_i(16)
            values_array = []
            hash.each do |bit_flag, flag_value|
              # bitwise multiplication on binary representation
              result = num & bit_flag
              if result == bit_flag
                values_array.append(flag_value)
              end
            end
            event.set('service.type', values_array)
        "
      }
    }
  }
  if [source.ip] {
    if [source.ip] =~ "::ffff:" {
      mutate {
        gsub => ["source.ip","::ffff:",""]
      }
    }
  }
  if [destination.ip] {
    if [destination.ip] =~ "::ffff:" {
      mutate {
        gsub => ["destination.ip","::ffff:",""]
      }
    }
  }
  mutate {
    remove_field => [ "[winlog]", "log", "ecs", "[winlog][event_data]", "@timestamp", "tmp", "[host]", "[agent]", "[organization]", "ticket_encrypt", "destination.geo.latitude", "destination.geo.longitude", "destination.geo.country_code3", "source.geo.country_code3", "ticket_option", "[fields]" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
