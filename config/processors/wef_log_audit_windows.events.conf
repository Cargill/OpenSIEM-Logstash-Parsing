# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "windows.event.forwarding" }
    add_field => { "event.dataset" => "wef" }
    add_field => { "observer.vendor" => "windows" }
    add_field => { "observer.product" => "windows" }
    add_field => { "observer.type" => "wef" }
  }
  mutate {
    remove_field => [ "host"]
  }
  mutate {
    rename => {"type" => "agent.type"}
    rename => {"[agent][hostname]" => "agent.name"}
    rename => {"[winlog][keywords]" => "rule.category"}
    rename => {"[winlog][channel]"  => "event.dataset"}
    rename => {"[winlog][provider_name]" => "event.type"}
    # User
    rename => {"[winlog][user][domain]" => "user.domain"}
    rename => {"[winlog][user][name]" => "user_name"}
    # Destination
    rename => {"[winlog][event_data][TargetLogonGuid]" => "destination.user.group.id"}
    rename => {"[winlog][event_data][TargetDomainName]" => "destination.domain"}
    rename => {"[winlog][event_data][TargetOutboundUserName]" => "destinationuser_name"}
    rename => {"[winlog][event_data][TargetUserName]" => "hostuser_name"}
    rename => {"[winlog][event_data][DestAddress]" => "destination.ip"}
    rename => {"[winlog][event_data][Group]"  => "destination.user.group.name"}
    rename => {"[winlog][event_data][DestPort]" => "destination.port"}
    # File
    rename => {"[winlog][event_data][OriginalFileName]" => "file.path"}
    rename => {"[winlog][event_data][Path]" => "file.path"}
    rename => {"[winlog][event_data][ShareLocalPath]" => "file.target_path"}
    rename => {"[winlog][event_data][ObjectName]" => "file.path"}
    # Process fields
    rename => {"[winlog][event_data][TaskName]" => "process.name"}
    # these next 2 may be wrong
    rename => {"[winlog][event_data][ProcessID]" => "process.pid"}
    rename => {"[winlog][user_data][ProcessID]" => "process.pid"}
    rename => {"[winlog][process][pid]" => "process.pid"}
    rename => {"[winlog][event_data][NewProcessName]" => "process.path"}
    rename => {"[winlog][event_data][ProcessName]" => "process.name"}
    rename => {"[winlog][event_data][ServiceName]" => "process.name"}
    rename => {"[winlog][event_data][ServiceSid]" => "process.pid"}
    rename => {"[winlog][event_data][ParentProcessName]" => "process.parent.name"}
    rename => {"[winlog][event_data][LogonProcessName]" => "process.name"}
    rename => {"[winlog][event_data][Application]" => "process.name"}
    rename => {"[winlog][event_data][ObjectType]" => "process.args"}
    rename => {"[winlog][event_data][SourceProcessId]" => "process.parent.pid"}
    rename => {"[winlog][event_data][ProcessId]" => "process.pid"}
    rename => {"[winlog][event_data][ProcessPath]" => "process.path"}
    rename => {"[winlog][event_data][ProcessPid]" => "process.pid"}
    rename => {"[winlog][process][thread][id]" => "process.thread.id"}
    # Source
    rename => {"[winlog][event_data][SubjectDomainName]" => "source.user.domain"}
    rename => {"[winlog][user_data][SubjectDomainName]" => "source.user.domain"}
    rename => {"[winlog][event_data][IpAddress]" => "source.ip"}
    rename => {"[winlog][event_data][IpPort]" => "source.port"}
    rename => {"[winlog][event_data][SourceAddress]" => "source.ip"}
    rename => {"[winlog][event_data][SourcePort]" => "source.port"}
    rename => {"[winlog][event_data][SubjectUserName]" => "sourceuser_name"}
    rename => {"[winlog][user_data][SubjectUserName]" => "sourceuser_name"}
    rename => {"[winlog][user_data][SubjectUserSid]" => "sourceuser_id"}
    rename => {"[winlog][event_data][SubjectUserSid]" => "sourceuser_id"}
    # Other
    rename => {"[winlog][event_data][PackageName]" => "package.name"}
    rename => {"[winlog][event_data][Protocol]" => "network.iana_number"}
    rename => {"[winlog][event_data][LogonType]" => "rule.uuid"}
    #rename => {"[winlog][event_data][FailureReason]" => "error.message"}
    #rename => {"[winlog][event_data][Status]" => "error.type"}
    #rename => {"[winlog][event_data][SubStatus]" => "error.code"}
    # Flattaning these fields
    # Host
    rename => {"[host][name]" => "log.source.hostname"}
    rename => {"[winlog][event_data][WorkstationName]" => "destination.address"}
    rename => {"[winlog][computer_name]" => "log.source.hostname"}
    # log
    rename => {"[log][level]" => "log.level"}
    # event
    rename => {"[event][action]" => "event.action"}
    rename => {"[winlog][event_id]" => "event.id"}
    rename => {"[event][created]" => "event.created"}
    rename => {"[event][provider]" => "event.provider"}
    rename => {"[event][kind]" => "event.kind"}
    rename => {"[log][event][original]" => "event.original"}
    rename => {"[winlog][event_data][Status]" => "event.code"}

    # drop process.pid as it is not useful, and we see hex values for them
    # drop timestamp to let it regenerated by indexer
    remove_field => [ "[winlog]", "log", "ecs", "[winlog][event_data]", "@timestamp"]
    # remove_field => ["message", "[event][original]"]
  }
  date {
    match => ["event.created", "yyyy-MM-dd'T'HH:mm:ssZ","ISO8601","yyyy-MM-dd't'HH:mm:ss.SSSz"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
  }
  # spliting user id and domain
  if [user_name] {
    if [user_name] =~ "@" {
      dissect {
        mapping => {
          user_name => "%{user.name}@%{user.domain}"
        }
      }
      mutate {remove_field => ["user_name"]}
    }
    else {
      mutate {
        rename => {"user_name" => "user.name"}
      }
    }
  }
  if [sourceuser_name] {
    if [sourceuser_name] =~ "@" {
      dissect {
        mapping => {
          sourceuser_name => "%{source.user.name}@%{source.user.domain}"
        }
      }
      mutate {remove_field => ["sourceuser_name"]}
    }
    else {
      mutate {
        rename => {"sourceuser_name" => "source.user.name"}
      }
    }
  }
  if [destinationuser_name] {
    if [destinationuser_name] =~ "@" {
      dissect {
        mapping => {
          destinationuser_name => "%{destination.user.name}@%{destination.user.domain}"
        }
      }
      mutate {remove_field => ["destinationuser_name"]}
    }
    else {
      mutate {
        rename => {"destinationuser_name" => "destination.user.name"}
      }
    }
  }
  if [sourceuser_id] {
    if [sourceuser_id] =~ "@" {
      dissect {
        mapping => {
          sourceuser_id => "%{source.user.id}@%{source.user.domain}"
        }
      }
      mutate {remove_field => ["sourceuser_id"]}
    }
    else {
      mutate {
        rename => {"sourceuser_id" => "source.user.id"}
      }
    }
  }
  if [hostuser_name] {
    if [hostuser_name] =~ "@" {
      dissect {
        mapping => {
          hostuser_name => "%{host.user.name}@%{host.user.domain}"
        }
      }
      mutate {remove_field => ["hostuser_name"]}
    }
    else {
      mutate {
        rename => {"hostuser_name" => "host.user.name"}
      }
    }
  }
  if [source.ip] {
    if [source.ip] =~ "::ffff:" {
      mutate {
        gsub => ["source.ip","::ffff:",""]
      }
    }
  }
  if [destination.ip] {
    if [destination.ip] =~ "::ffff:" {
      mutate {
        gsub => ["destination.ip","::ffff:",""]
      }
    }
  }
  mutate {
    copy => { "message" => "tmp" }
  }
  mutate {    
    gsub => [ "tmp", "\r", "" ]
    gsub => [ "tmp", "\n", "" ]
  }
  if [event.id] == "5829" {
    grok {
      match => { "tmp" => "^(?<error.message>.*?) Warning: (.*?please visit  (?<event.reference>.*?)\.\s+).*?Machine SamAccountName: (?<observer.name>.*?) .*?Domain: (?<source.domain>.*?\.) .*?Account Type:" }
    }
  }
  if [event.id] == "411" {
    grok {
      match => { "tmp" => "^(?<rule.description>.*?) Additional Data(.*?) Token Type: (?<event.url>.*?)(\s)?  Client IP: (?<client.ip>.*?) Error message: (?<error.message>.*?) Exception details: (?<error.type>.*?):(.*)" }
    }
  }
  if [event.id] == "7036" {    
    xml {
      remove_namespaces => true
      source => "event.original"
      store_xml => false
      xpath => ["/Event/EventData/Data[@Name='param1']/text()", "service.name", 
                "/Event/EventData/Data[@Name='param2']/text()", "service.state"]
    }
  }
  mutate {
    remove_field => [ "tmp" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
