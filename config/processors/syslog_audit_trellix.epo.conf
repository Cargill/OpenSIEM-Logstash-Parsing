# Copyright [2023] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "trellix" }
    add_field => { "[event][dataset]" => "trellix.epo" }
    remove_field => [ "agent", "host" ]
  }
  grok {
    match => { "message" => "^.*?(?<[tmp][header]>epoevents.*?) (.|\n)*(?<[tmp][xml]>\<\?xml.*?)$" }
    tag_on_failure => "_grokparsefailure_to_tmp"
  }
  xml {
    source => "[tmp][xml]"
    target => "tmp"
    force_array => false
  }
    # "[tmp][mcafeecommonupdater][updateevent][initiatortype]" => "n/a"  
    # "[tmp][mcafeecommonupdater][updateevent][description]" => "n/a"
    # "[tmp][mcafeecommonupdater][updateevent][version]" => "n/a"
    # "[tmp][mcafeecommonupdater][updateevent][locale]" => "0409"
    # "[tmp][mcafeecommonupdater][updateevent][sitename]" => "n/a"
  mutate { 
    rename => { 
      "[tmp][machineinfo][osname]" => "[host][os][full]" 
      "[tmp][machineinfo][agentguid]" => "[agent][id]" 
      "[tmp][machineinfo][agentversion]" => "[agent][version]" 
      "[tmp][machineinfo][username]" => "[user][name]" 
      "[tmp][machineinfo][ipaddress]" => "[host][ip]" 
      "[tmp][machineinfo][rawmacaddress]" => "[host][mac]" 
      "[tmp][machineinfo][machinename]" => "[host][hostname]" 
      "[tmp][mcafeecommonupdater][productversion]" => "[service][version]" 
      "[tmp][mcafeecommonupdater][updateevent][productid]" => "[service][name]" 
      "[tmp][mcafeecommonupdater][updateevent][severity]" => "[event][severity]" 
      "[tmp][mcafeecommonupdater][updateevent][error]" => "[error][code]" 
      "[tmp][mcafeecommonupdater][updateevent][initiatorid]" => "[service][id]" 
      "[tmp][mcafeecommonupdater][updateevent][type]" => "[error][message]" 
      "[tmp][mcafeecommonupdater][updateevent][eventid]" => "[event][id]" 
      "[tmp][mcafeecommonupdater][productname]" => "[agent][type]" 
      "[tmp][mcafeecommonupdater][productfamily]" => "[service][type]"
      "[tmp][mcafeecommonupdater][updateevent][gmttime]" => "[tmp][time]"
      "[tmp][machineinfo][timezonebias]" => "[tmp][timezone]"
    }
  }
  
  if [tmp][timezone] =~ "^-" {
   mutate {
     add_field => { 
       "[tmp][sign]" => "-"
     }
     gsub => [
          "[tmp][timezone]", "-", ""
      ]
   }
  } else {
    mutate {
     add_field => {
       "[tmp][sign]" => "+"
    }
  }
  
  }
  # "[tmp][time]" => "2023-11-09t22:21:32"
  # "[tmp][timezone]" => "-420"
  ruby { code => 'event.set("[tmp][offset][hr]", (event.get("[tmp][timezone]").to_f / 60).round().to_s.rjust(2, "0") )' }
  ruby { code => 'event.set("[tmp][offset][min]", (event.get("[tmp][timezone]").to_f % 60).round().to_s.rjust(2, "0") )' }

  mutate {
    add_field => {
      "[event][created]" => "%{[tmp][time]}%{[tmp][sign]}%{[tmp][offset][hr]}%{[tmp][offset][min]}"
    }
  }
  # "event.created" => "2023-11-09t22:21:32-0700"
  date {
    match => ["[event][created]", "yyyy-MM-dd't'HH:mm:ssZ" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
    mutate {
      # remove_field => ["[event][created]"]
    }
  }
  mutate {
    split => { "[user][name]" => "," }
    remove_field => [ "tmp" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}