# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
	  add_field => { "[event][module]" => "jira" }
    add_field => { "[event][dataset]" => "jira.audit" }
  }
  json {
    source => "message"
    target => "tmp_msg"
  }
  ruby {
    code => "
      tmp_dct = Hash.new
      if event.get('[tmp_msg][changedValues]').kind_of?(Array)
        event.get('[tmp_msg][changedValues]').each do |item|
          tmp_dct[item['key']] = item['to']
        end
      end
      event.set('user_dct', tmp_dct)  
    "
  }
  mutate {
    rename => { "[host][name]" => "[log][source][hostname]" }
    copy => { "[log][source][hostname]" => "[host][ip]" }
    #copy => { "[host][ip]" => "[log][source][ip]" }
    #copy => { "[log][source][hostname]" => "[log][source][ip]" }
    rename => { "@timestamp" => "[event][created]" }
    rename => { "[agent][id]" => "[agent][id]" }
    rename => { "[agent][ephemeral_id]" => "[agent][ephemeral_id]" }
    rename => { "[agent][type]" => "[agent][type]" }
    rename => { "[agent][version]" => "[agent][version]" }
    # rename => { "[tmp][fields][event][module]" => "[event][module]" }
    rename => { "[log][file][path]" => "[log][file][path]" }
    rename => { "[tmp_msg][affectedObjects][0][id]" => "[user][id]" }
    rename => { "[tmp_msg][auditType][action]" => "[event][action]" }
    rename => { "[tmp_msg][auditType][category]" => "[event][category]" }
    rename => { "[tmp_msg][system]" => "[url][full]" }

    rename => { "[user_dct][Email]" => "[user][email]" }
    rename => { "[user_dct][Full name]" => "[user][full_name]" }
    rename => { "[user_dct][Username]" => "[user][name]" }
  }
  if ![user][name] and [user][name] != "" {
    mutate {
      rename => { "[tmp_msg][affectedObjects][0][name]" => "[user][name]" }
    }
  }
  mutate {
    gsub => [ "[host][ip]", "ip-", "" ,
               "[host][ip]", "\-", "." ]
    copy => { "[host][ip]" => "[log][source][ip]"}
  }
  date {
    match => [ "[event][created]" , "ISO8601" ]
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags] {
    mutate {
      #copy => { "message" => "[log][original]" }
      remove_field => [ "[event][created]" ]
    }
  }
  mutate {
    remove_field => [ "@metadata","[log][offset]", "tmp_msg", "user_dct" ,"input","fields", "[agent][hostname]"] 
  }
}
output {
  pipeline { send_to => [enrichments] }
}