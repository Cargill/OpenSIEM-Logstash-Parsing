input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  if [type] == "vpcflow" { }
    if [message] =~ "^version" or [message] =~ "NODATA"{
      drop {}
    }
  dissect {
    tag_on_failure => "_dissectfailure_1"
    mapping => {
      "message" => '%{service.version} %{cloud.account.id} %{observer.egress.interface.id} %{source.ip} %{destination.ip} %{source.port} %{destination.port} %{network.iana_number} %{network.packets} %{network.bytes} %{event.created} %{event.end} %{event.action} %{event.outcome}'
   }
  }
  mutate {
    add_field => { "ecs.version" => "1.6" }
    add_field => { "cloud.provider" => "aws" }
    add_field => { "event.module" => "aws flow logs" }
    add_field => { "event.dataset" => "aws flow logs sws" }
    add_field => { "observer.vendor" => "aws" }
    add_field => { "observer.product" => "aws vpcflow logs" }
    add_field => { "observer.type" => "flow logs" }
    add_field => { "log.source.hostname" => "aws api" }

  }

  date {
    # 1605139197
    match => ["event.created","UNIX"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags] {
    if ![log.orignal] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
      remove_field => ["event.created"]
    }
  }

  date {
    # 1605139197
    match => ["event.end","UNIX"]
    timezone => "GMT"
    locale => "en"
    target => "event.end"
    tag_on_failure => "_dateparsefailure_ee"
  }
  if "_dateparsefailure_ee" in [tags] {
    if ![log.orignal] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
      remove_field => ["event.end"]
    }
  }
  # VAR_ENRICHMENTS
}
output {
# VAR_OUTPUT
}