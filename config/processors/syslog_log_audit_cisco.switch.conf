# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "cisco.switch" }
    add_field => { "observer.vendor" => "cisco" }
    add_field => { "observer.product" => "cisco.switch" }
    add_field => { "observer.type" => "switch" }
  }
  mutate {
    strip => ["message"]
  }
  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" {
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "<%{pri}>%{rest_msg}"
      }
    }
  } else {
  ### Filebeats udp or tcp in
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "%{?data} {%{?data}} <%{pri}>%{rest_msg}"
      }
    }
  }
  

 

  # Note: The old version of this processor needs some rework (code after the numerated steps). 
  # However, there are functioning bits of it that we'll preserve (properly identified below), and since it relies on %{rest_msg} the new rules shouldn't affect it if we preserve such field.

  # 1. Hostname
  
    mutate {
      copy => { "log.source.hostname" => "[tmp][log_source_hostname]"}
    }
    mutate {
       split => { "[tmp][log_source_hostname]" => "." } 
       add_field => { "host.hostname" => "%{[tmp][log_source_hostname][0]}"}
    }

  # 2. Start by copying the original message to log.original (for integrity).  We'll then pick the common fields and placing them under [tmp]. [tmp] is a temporary slot to work out the parsing

    mutate {
        id => "cisco-mutate-logoriginal1"
        add_field => {"[log.original]" => "%{[message]}"}
    }


    mutate {
      id => "cisco-mutate-logoriginal2"
      lowercase => ["[message]"]
    }

  # 2. General cisco log format is 
    # {timesdtamp} {facility} {severity} {mnemonic} {description}
    # seq no:timestamp: %facility-severity-MNEMONIC:description

    
    grok {
        id => "cisco.router-mutate-grok-message"
        tag_on_failure => "_grokparsefailure_cisco.router-mutate-grok-message"
        match => { 
            "message" => [
              "%{GREEDYDATA:[tmp][ingest_timestamp]}\s\{name=%{GREEDYDATA:[tmp][logsource]}\}\s<%{NUMBER:syslog_pri}>%{NUMBER:[event.id]}:\s%{GREEDYDATA:[tmp][device_timestamp]}:\s\%%{WORD:[tmp][facility]}-%{WORD:[tmp][severity]}-%{WORD:[tmp][mnemonic]}:\s%{GREEDYDATA:[tmp][msg]}",
              "%{GREEDYDATA:[tmp][ingest_timestamp]}\s\{name=%{GREEDYDATA:[tmp][logsource]}\}\s<%{NUMBER:syslog_pri}>%{NUMBER:[event.id]}:\s%{GREEDYDATA:[tmp][host.hostname]}:\s%{GREEDYDATA:[tmp][device_timestamp]}:\s\%%{WORD:[tmp][facility]}-%{WORD:[tmp][severity]}-%{WORD:[tmp][mnemonic]}:%{WORD:[tmp][cisco_process]}:\s%{GREEDYDATA:[tmp][msg]}"
            ]
        }
    }


  # 3. Parse ingest date
    mutate {
        id => "cisco-mutate-gsub-date"
        gsub => [ "[tmp][ingest_timestamp]", "t", "-"]
    }

    date {
        id => "cisco-date-ingest"
        match => [ "[tmp][ingest_timestamp]", "MMM dd yyyy HH:mm:ss",
              "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd-HH:mm:ss.SSSZ", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss.SSS ZZZ", "MMM dd HH:mm:ss ZZZ", "MMM dd HH:mm:ss.SSS", "YYYY MMM dd HH:mm:ss.SSS ZZZ", "YYYY MMM dd HH:mm:ss ZZZ", "YYYY MMM dd HH:mm:ss.SSS" ]
        target => "event.ingested"
    }

  # 4. Syslog Pri
    syslog_pri {
    }

  # 5. Parse device log date
    date {
        id => "cisco-date-event"
        match =>[
            "[tmp][device_timestamp]", "MMM dd yyyy HH:mm:ss",
              "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd-HH:mm:ss.SSSZ", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss.SSS ZZZ", "MMM dd HH:mm:ss ZZZ", "MMM dd HH:mm:ss.SSS", "YYYY MMM dd HH:mm:ss.SSS ZZZ", "YYYY MMM dd HH:mm:ss ZZZ", "YYYY MMM dd HH:mm:ss.SSS" 
        ]
        target => "event.started"
    }

  # 6. Set action field
    mutate {
        add_field => { "event.action" => "%{[tmp][facility]}.%{[tmp][mnemonic]}"}
    }

  # 7. Rename Cisco facility ##

      # From Elastic: The translate filter plugin supports large dictionaries, and has been tested with up to 100,000 key/values.

    
    # a. perform facility translation
    translate {
        id => "cisco-translate-facility"
        field => "[tmp][facility]"
        destination => "[tmp][facility_translation]"
        dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios_facility_categories.csv"  # ** Must set full "/path/to/lookup.json" to your lookup file **
        refresh_interval => 3000
        fallback => "not_found_facility"
    }

    # b. Translate full msg, explanation, recommendation
    translate {
      id => "cisco-translate-mnemonic"
      field => "[tmp][mnemonic]"
      destination => "[tmp][mnemonic_translation]"
      dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios.json" # ** Must set full "/path/to/lookup.json" to your lookup file **
      refresh_interval => 3000
      fallback => '{"key1":"not_found"}'
      
    }

 
    # because a “fallback” value can only contain a string, additional processing is done to ensure that failed lookups store values in proper fields
    if [tmp][mnemonic_translation] == '{"key1":"not_found"}' {
    json { 
      source => "[tmp][mnemonic_translation]" 
      target => "[tmp][mnemonic_translation]"
    }
    mutate {
      remove_field => ["[tmp][mnemonic_translation"]
    }

    mutate {
      add_field => {"[tmp][mnemonic_translation][msg_explanation]" => "not_found_msg_explanation"}
      add_field => {"[tmp][mnemonic_translation][msg_recommendation]" => "not_found_msg_recommendation"}
      add_field => {"[tmp][mnemonic_translation][facility]" => "not_found_translation_facility"}
      add_field => {"[tmp][mnemonic_translation][msg_txt]" => "not_found_parsing_rule"}
    }
    }



  # c. add proper fields from [tmp] translated
    mutate {
      add_field => { "event.reason" => "%{[tmp][mnemonic_translation][msg_explanation]}"}
      add_field => { "error.message" => "%{[tmp][msg]}"}
      add_field => { "event.recommendation" => "%{[tmp][mnemonic_translation][msg_recommendation]}"}
    # Tip: the [tmp][msg_parse]] from the translate filter contains the format of the message, which may make parsing easier especially for dissect/grok filters. Anything under [tmp] is dropped from the event so this will need to be turned back on when parsing 
      add_field => { "[tmp][msg_parse]" => "%{[tmp][mnemonic_translation][msg_txt]}"}
    }



# 7. Specific event parsing
    
  # 7.1 BGP Messages
  if [event.action] == "bgp.adjchange" {
    dissect {
      mapping => {
        "[tmp][msg]" => "neighbor %{[tmp][related.ip]} %{[tmp][bgp][state]} %{[tmp][bgp][reason]}"
      }
    }

    mutate {
      add_field => { "event.type" => "connection"}
      add_field => { "event.category" => "network"}
      add_field => { "event.kind" => "state"}
      
    }

    
    translate {
            field => "[tmp][bgp][state]"
            dictionary => [
            "down", "failure", 
            "up", "success"
            ]
            exact => true
            fallback => "unknown"
            destination => "event.outcome"
        }

  }

  # 7.2. Link up/down

  if [event.action] == "link.updown" {
     grok {
        id => "cisco.router-grok-link.updown"
        match => { 
            "[tmp][msg]" => "%{GREEDYDATA}interface %{GREEDYDATA:[tmp][ifname]}\, changed state to %{WORD:[tmp][interface][state]}"
        }
    }

    mutate {

      add_field => { "event.type" => "connection"}
      add_field => { "event.category" => "network"}
      add_field => { "event.kind" => "state"}
      add_field => { "observer.ingress.interface.name" => "%{[tmp][ifname]}"}
      add_field => { "observer.ingress.interface.alias" => "unknown_interface_alias"} #we're adding interface.alias here so later it can be used by enrichments to look for interface details
    }

    
    translate {
            field => "[tmp][interface][state]"
            dictionary => [
            "down", "failure", 
            "up", "success"
            ]
            exact => true
            # [field]-[error]
            fallback => "unknown"
            destination => "event.outcome"
        }

  }


  # 7.3. Line up/down

  if [event.action] == "line.updown" {
    grok {
      id => "cisco.router-grok-line.updown"
      match => {
        "[tmp][msg]" => "line protocol on interface %{GREEDYDATA:[tmp][ifname]}, changed state to %{WORD:[tmp][interface][state]}"
      }
    }


    mutate {

      add_field => { "event.type" => "connection"}
      add_field => { "event.category" => "network"}
      add_field => { "event.kind" => "state"}
      add_field => { "observer.ingress.interface.name" => "%{[tmp][ifname]}"}
      add_field => { "observer.ingress.interface.alias" => "unknown_interface_alias"} #we're adding interface.alias here so later it can be used by enrichments to look for interface details
    }

    
    translate {
            field => "[tmp][interface][state]"
            dictionary => [
            "down", "failure", 
            "up", "success"
            ]
            exact => true
            # [field]-[error]
            fallback => "unknown"
            destination => "event.outcome"
        }

  }

  
   
  # 8. Cleanup related IP

    if [related.ip] {
      mutate {

       gsub => [
          # cleanup ip address before adding to proper field
          "[tmp][related.ip]", "\*", ""
       ]
    }
      mutate {
      # related.ip should be an array, therefore adding twice. a ruby conversion filter may be a better fit
      add_field => { "related.ip" => "%{[tmp][related.ip]}"}
      add_field => { "related.ip" => "%{[tmp][related.ip]}"}
    }
    }
    
  # 9. Remove [tmp] fields
    mutate {
      
      remove_field => [ "[tmp]"]
    }


  # 10. >>>>>>>>> Old processor - These are the bits of the old processor that relies on [rest_msg]



  if [chk_data] =~ ":" {
    dissect {
      mapping => {
        message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.id}: %{rest_msg}"
      }
    }
    # all Warning msg
    if [rest_msg] =~ "_SNOOPING_DENY" and [rest_msg] !~ "SW_DAI-4-DHCP_SNOOPING_DENY" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start} %{?data}: %%{rule.name}:%{?data} %{rule.description} on %{destination.interface}, %{?data} %{network.vlan.id}.([%{observer.ingress.interface.name}/%{source.ip}/%{destination.mac}/%{destination.ip}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "SW_DAI-4-DHCP_SNOOPING_DENY" {
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}:%{?data} %{rule.description} on %{destination.interface}, %{?data} %{network.vlan.id}.([%{observer.ingress.interface.name}/%{source.ip}/%{destination.mac}/%{destination.ip}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%CDP-4-DUPLEX_MISMATCH:" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE CDP1" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description} on %{observer.ingress.interface.name} %{?data}, with %{destination.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%CDP-4-NATIVE_VLAN_MISMATCH" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE CDP2" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description} on %{observer.ingress.interface.name} %{?data}, with %{destination.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%SW_MATM-4-MACFLAP_NOTIF" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE MATM1" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "%LPOWER-3-CONTROLLER_PORT_ERR" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE LPOWER1" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "%SYS-4-CONFIG_RESOLVE_FAILURE" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 8" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "duplex mismatch" and [rest_msg] !~ "14w0d:" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %{?data}-%{?data}-%{rule.name}:%{rule.description} on %{observer.ingress.interface.name} %{?data}, with %{destination.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%DAI-4-INVALID_ARP" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{?data} %{rule.description} on %{observer.ingress.interface.name}, %{?data} %{network.vlan.id}.([%{observer.ingress.interface.name}/%{source.ip}/%{destination.mac}/%{destination.ip}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "SW_DAI-4-INVALID_ARP" {
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{?data} %{rule.description} on %{observer.ingress.interface.name}, %{?data} %{network.vlan.id}.([%{observer.ingress.interface.name}/%{source.ip}/%{destination.mac}/%{destination.ip}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "MACFLAP_NOTIF" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{?data} %{destination.mac} %{?data} %{?data} %{network.vlan.id} %{?data} port %{observer.ingress.interface.name} %{?data} %{?data} %{destination.interface}"
        }
      }
    }
    else if [rest_msg] =~ "%SNMP-4-NOTRAPIP"  {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "NATIVE_VLAN_MISMATCH" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description} on %{observer.ingress.interface.name} %{?data}, %{?data} %{destination.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "Rx power low" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{observer.ingress.interface.name}: %{rule.description}; %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "YS-4-CONFIG_RESOLVE_FAILURE" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    # checking the error
    else if [rest_msg] =~ "BADSERVERTYPEERROR" or [rest_msg] =~ "ENTROPY_ERROR" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{?data}-%{?data}-%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "CONTROLLER_PORT_ERR" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{?data}-%{?data}-%{rule.name}: %{rule.description}, %{?data} %{observer.ingress.interface.name} %{+rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "INPUT_QFULL_ERR" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "Native VLAN mismatch" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description} on %{observer.ingress.interface.name} %{?data}, %{?data} %{source.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "queue full" {
      dissect {
        mapping => {
          rest_msg => "%{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "ILPOWER-5-POWER_GRANTED" or [rest_msg] =~ "ILPOWER-5-IEEE_DISCONNECT" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "IP_SNMP-4-NOTRAPIP" {
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description}"
        }
      }
    }
  }
  else {
    if [message] =~ "IPACCESSLOGP" {
      dissect {
        mapping => {
          message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.start->} %{+event.start} %{+event.start} %{source.address} %%{rule.name}: %{?data} denied %{network.protocol} %{source.ip}(%{source.port}) -> %{destination.ip}(%{destination.port}), %{?data}"
        }
      }
    }
    else if [message] =~ "LOG_-6-SYSTEM_MSG" {
      dissect {
        mapping => {
          message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.start->} %{+event.start} %{+event.start} %{source.address} %%{rule.name} %{?data}"
        }
      }
    }
    else if [message] =~ "LOG_-4-SYSTEM_MSG" or [message] =~ "LOG_-3-SYSTEM_MSG" or [message] =~ "LOG_-2-SYSTEM_MSG" {
      dissect {
        mapping => {
          message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.start->} %{+event.start} %{+event.start} %{source.address} %%{rule.name} %{rule.description}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.start->} %{+event.start} %{+event.start} %{source.address} %%{rule.name}: %{?data}"
        }
      }
    }
 # checking the NOTE severity
    if [rest_msg] =~ "_SNOOPING_MATCH" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start} %{?data}: %%{rule.name}: %{rule.description} "
        }
      }
    }
  }
  if [event.start] {
    if [event.start] =~ ": " {
      mutate {
        remove_field => ["event.start"]
      }
    }
    else {
      date {
        match => ["event.start", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss.SSS ZZZ", "MMM dd HH:mm:ss","MMM dd HH:mm:ss ZZZ"]
        timezone => "GMT"
        locale => "en"
        target => "event.start"
      }
    }
  }
  mutate {
    remove_field => ["rest_msg","log.date","chk_data","destination.interface","network.vlan.id","pri"]
  }
  translate {
    field => "[syslog_severity]"
    destination => "[rule.category]"
    dictionary => {
      "error" => "Security/Failed Activity"
      "info" => "Security/Activity"
      "notice" => "Security/Activity"
      "warning" => "Security/Warning"
    }
      fallback => "Others"
  }
}
output {
  pipeline { send_to => [enrichments] }
}
