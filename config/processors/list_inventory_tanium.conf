 input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}

filter {  
    if [agent.type] == "logstash" { 
        grok {
            tag_on_failure => "_parsefailure_header"
            match => { "message" => "^(?<rest_msg>.*?)$" }
        }
    } else {
### Filebeats udp or tcp in
        grok {
            tag_on_failure => "_parsefailure_header"
            match => { "message" => ".*?\{name=.*?\} (?<rest_msg>.*?)$" }
        }
    }
    json {
     source => "rest_msg"
     skip_on_invalid_json => true
     target => "tanm"
   }
    mutate {
        add_field => { "event.module" => "tanium" }
        add_field => { "observer.vendor" => "tanium" }
        rename => { "[tanm][Computer Name]" => "host.hostname" }
        rename => { "[tanm][Operating System]" => "host.os.name" }
        rename => { "[tanm][Operating System Install Date]" => "host.os.installation_date" }
        rename => { "[tanm][Computer Serial Number]" => "host.serial" }
        rename => { "[tanm][Domain Name]" => "host.domain" }
        rename => { "[tanm][MAC Address]" => "host.mac" }
        rename => { "[tanm][IPv4 Address]" => "host.ip" }
        rename => { "[tanm][Tanium Client IP Address]" => "source.ip" }
        rename => { "[tanm][Tanium Client NAT IP Address]" => "source.nat.ip" }
        rename => { "[tanm][Tanium Server Name]" => "observer.hostname" }
        rename => { "[tanm][Logged In Users]" => "host.logged_in_users" }
        rename => { "[tanm][Last Logged In User]" => "host.last_logged_in_user" }
        rename => { "[tanm][Time Zone]" => "host.timezone" }
        rename => { "[tanm][Manufacturer]" => "host.manufacturer"} 
        rename => { "[tanm][Model]" => "host.model" }
        rename => { "[tanm][Intel Type]" => "event.dataset" }
    }
    date {
    match => ["host.os.installation_date" , "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "host.os.installation_date"
    tag_on_failure => "_dateparsefailure_hoid"
  }
  if "_dateparsefailure_hoid" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["host.os.installation_date"]
    }
  }
mutate {
    remove_field => ["rest_msg"]
  }
 
}
output {
  pipeline { send_to => [enrichments] }
}
