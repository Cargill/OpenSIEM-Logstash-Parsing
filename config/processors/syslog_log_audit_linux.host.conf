# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    strip => ["message"]
  }
  dissect {
    mapping => {
      message => "%{log.date} {%{?data}} <%{code}>%{event.start->} %{+event.start} %{+event.start} %{host.hostname} %{rest_msg}"
    }
  }
  if [message] =~ "<82>" or [message] =~ "<85>" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.module}[%{process.pid}]: %{event_description}"
      }
    }
    if [event_description] =~ "has expired" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 2" }
      }
      dissect {
        mapping => {
          event_description => "%{del}: %{del1} (%{event.severity_name})"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 3" }
      }
      dissect {
        mapping => {
          event_description => "%{event.severity_name} for %{del}"
        }
      }
    }
  }
  else if [message] =~ "<31>" or [message] =~ "<27>" {
    if [message] =~ "rhnsd" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 4" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.module}[%{process.pid}]: %{rule.description}"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 5" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.module}[%{process.pid}]: TID:%{?tid} : %{event.severity_name}: %{rule.description}"
        }
      }
    }
  }
  else if [message] =~ "<30>" {
    if [message] =~  "dhclient" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 6" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.module}[%{process.pid}]: %{event_description}"
        }
      }
    }
    else  {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 7" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.module}: %{event_description}"
        }
      }
      if [event_description] =~ "Started Session" {
        mutate {
          add_field => { "agent.parse_rule" => "RULE 8" }
        }
        dissect {
          mapping => {
            event_description => "Started Session %{?session.id} of user %{user.name}"
          }
        }
      }
      else if [event_description] =~ "Slice of" {
        mutate {
          add_field => { "agent.parse_rule" => "RULE 9" }
        }
        dissect {
          mapping => {
            event_description => "%{del} Slice of%{user.name}"
          }
        }
      }
    }
  }
  date {
    match => ["event.start" , "MMM dd HH:mm:ss", "MMM dd HH:mm:ss.SSS"]
    timezone => "GMT"
    locale => "en"
    target => "event.start"
  }
  mutate {
    rename => {"event_description" => "rule.description"}
    remove_field => ["del","del1","rest_msg","log.date","code"]
    # rename => ["host" , "agent"]
  }
  #### Classification part ####
  translate {
    field => "[event.severity_name]"
    destination => "[rule.category]"
    dictionary => {
      "ERROR" => "Ops Error"
      "fatal: Access denied" => "Ops Network deny"
      "failed to change password" => "Security Denial of Service
"
    }
    fallback => "Others"
  }
  # Do not remove this, due to internal need.
  if [host.hostname] and ([host.hostname] != "" or [host.hostname][0] != "" ){
    mutate {
      copy => { "host.hostname" => "host.name" }
    }
  }

}
output {
  pipeline { send_to => [enrichments] }
}
