# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  json {
    source => "message"
    target => "o365_dlp"
  }
  mutate {
    rename => {"[o365_dlp][CreationTime]" => "event.created"}
    rename => {"[o365_dlp][Operation]" => "event.action"}
    rename => {"[o365_dlp][UserKey]" => "user.id"}
    rename => {"[o365_dlp][Workload]" => "observer.vendor"}
    rename => {"[o365_dlp][IncidentId]" => "event.id"}
    # SensitiveInfoDetectionIsIncluded is a boolean, will probably need to translate this
    # rename => {"[o365_dlp][SensitiveInfoDetectionIsIncluded]" => ""}

    # ExchangeMetaData nested object
    rename => {"[o365_dlp][ExchangeMetaData][To]" => "destination.user.email"}
    merge => {"[o365_dlp][ExchangeMetaData][BCC]" => "destination.user.email"}
    merge => {"[o365_dlp][ExchangeMetaData][CC]" => "destination.user.email"}
    rename => {"[o365_dlp][ExchangeMetaData][From]" => "source.user.email"}
    rename => {"[o365_dlp][ExchangeMetaData][FileSize]" => "file.size"}
    rename => {"[o365_dlp][ExchangeMetaData][Subject]" => "email.subject"}
    rename => {"[o365_dlp][ExchangeMetaData][Sent]" => "event.start"}
    # Policy Details list of nested object
#     rename => {"[o365_dlp][PolicyDetails][PolicyId]" => "event.created"}
#     rename => {"[o365_dlp][PolicyDetails][]" => "event.created"}
#     rename => {"[o365_dlp][PolicyDetails][]" => "event.created"}
#     rename => {"[o365_dlp][PolicyDetails][]" => "event.created"}
#     rename => {"[o365_dlp][PolicyDetails][]" => "event.created"}
  }
  mutate {
    remove_field => ["o365_dlp"]
  }
  date {
    match => ["event.created" , "ISO8601" ]
    timezone => "GMT"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.created"]
    }
  }
    date {
    match => ["event.start" , "ISO8601" ]
    timezone => "GMT"
    target => "event.start"
    tag_on_failure => "_dateparsefailure_es"
  }
  if "_dateparsefailure_es" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.start"]
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
