# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    remove_field => [ "event", "host" ]
    add_field => { "[event][module]" => "cisco" }
    add_field => { "[event][dataset]" => "cisco.router" }
  }
  mutate {
    strip => ["message"]
  }
  grok {
    tag_on_failure => "_parsefailure_pri"
    match => { "message" => "^(.*?)(<(?<pri>\d+)\>)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri", "[log][syslog][facility][name]" ]
    ecs_compatibility => v8
  }
  grok {
    tag_on_failure => "_parsefailure_msg"
    match => { 
      "message" => [     
        '^(?<[event][ingested]>.*?) \{name=(?<[observer][hostname]>.*?)\} \<\d+\>(?<[event][id]>\d+): (\*)?(\d+: )?(?<[event][created]>.*?): \%(?<[log][syslog][facility][name]>(?<[tmp][facility]>.*?)-(?<[tmp][sevarity]>.*?)-(?<[tmp][mnemonic]>.*?)): ((?<[observer][ingress][interface][name]>\w+/\d+): )?(.*?)?list (?<[rule][name]>.*?) (?<[event][action]>\w+) ((?<[network][iana_number]>\d+)|((?<[network][transport]>\w+)))? (?<[source][ip]>\d+\.\d+\.\d+\.\d+)(\((?<[source][port]>\d+)\))? -> (?<[destination][ip]>\d+\.\d+\.\d+\.\d+)(\((?<[destination][port]>\d+)\))?( \((?<[observer][ingress][interface][name]>.*?/.*?)\))?, (?<[network][packets]>\d+) packet',
        '^(?<[event][ingested]>.*?) \{name=(?<[observer][hostname]>.*?)\} \<\d+\>(?<[event][id]>\d+): (\*)?(\d+: )?(?<[event][created]>.*?): \%(?<[log][syslog][facility][name]>(?<[tmp][facility]>.*?)-(?<[tmp][sevarity]>.*?)-(?<[tmp][mnemonic]>.*?)): ((?<[observer][ingress][interface][name]>\w+/\d+): )?(.*?)?list (?<[rule][id]>\d+) (?<[event][action]>\w+) ((?<[network][iana_number]>\d+)|((?<[network][transport]>\w+)))? (?<[source][ip]>\d+\.\d+\.\d+\.\d+)(\((?<[source][port]>\d+)\))? -> (?<[destination][ip]>\d+\.\d+\.\d+\.\d+)(\((?<[destination][port]>\d+)\))?( \((?<[observer][ingress][interface][name]>.*?/.*?)\))?, (?<[network][packets]>\d+) packet','^(?<[event][ingested]>.*?) \{name=(?<[observer][hostname]>.*?)\} \<\d+\>(?<[event][id]>\d+): (\*)?(\d+: )?(?<[event][created]>.*?): \%(?<[log][syslog][facility][name]>(?<[tmp][facility]>.*?)-(?<[tmp][sevarity]>.*?)-(?<[tmp][mnemonic]>.*?)): (?<[observer][ingress][interface][name]>.*?): (?<[rule][name]>.*?): list (?<[rule][id]>\d+) (?<[event][action]>\w+) (?<[network][transport]>\w+) (?<[source][ip]>.*?)\((?<[source][port]>\d+)\) -> (?<[destination][ip]>.*?)\((?<[destination][port]>\d+)\), (?<[network][packets]>\d+)?',
        '^(?<[event][ingested]>.*?) \{name=(?<[observer][hostname]>.*?)\} \<\d+\>(?<[event][id]>\d+): (\*)?(\d+: )?(?<[event][created]>.*?): \%(?<[log][syslog][facility][name]>(?<[tmp][facility]>.*?)-(?<[tmp][sevarity]>.*?)-(?<[tmp][mnemonic]>.*?)): list (?<[rule][id]>\d+) (?<[event][action]>\w+) (?<[network][transport]>\w+) (?<[source][ip]>.*?)\((?<[source][port]>\d+)\) -> (?<[destination][ip]>.*?)\((?<[destination][port]>\d+)\), (?<[network][packets]>\d+)',
        '^(?<[event][ingested]>.*?) \{name=(?<[observer][hostname]>.*?)\} \<\d+\>(?<[event][id]>\d+): (\*)?(\d+: )?(?<[event][created]>.*?): \%(?<[log][syslog][facility][name]>(?<[tmp][facility]>.*?)-(?<[tmp][sevarity]>.*?)-(?<[tmp][mnemonic]>.*?)): (?<[error][message]>.*?interface (?<[observer][egress][interface][name]>.*?,)(?<[event][action]>.*?))$',
        '^(?<[event][ingested]>.*?) \{name=(?<[observer][hostname]>.*?)\} \<\d+\>(?<[event][id]>\d+): (\*)?(\d+: )?(?<[event][created]>.*?): \%(?<[log][syslog][facility][name]>(?<[tmp][facility]>.*?)-(?<[tmp][sevarity]>.*?)-(?<[tmp][mnemonic]>.*?)): (?<[error][message]>.*?interface(?<[observer][egress][interface][name]>.*?))$',
        '^(?<[event][ingested]>.*?) \{name=(?<[observer][hostname]>.*?)\} \<\d+\>(?<[event][id]>\d+): (\*)?(\d+: )?(?<[event][created]>.*?): \%(?<[log][syslog][facility][name]>(?<[tmp][facility]>.*?)-(?<[tmp][sevarity]>.*?)-(?<[tmp][mnemonic]>.*?)): (?<[error][message]>duplex mismatch discovered on (?<[observer][egress][interface][name]>.*?)) \((?<reason>.*?)\), with (?<[destination][address]>.*?) (?<[observer][ingress][interface][name]>.*?) \((?<[event][type]>.*?)\)',
        '^(?<[event][ingested]>.*?) \{name=(?<[observer][hostname]>.*?)\} \<\d+\>(?<[event][id]>\d+): (\*)?(\d+: )?(?<[event][created]>.*?): \%(?<[log][syslog][facility][name]>(?<[tmp][facility]>.*?)-(?<[tmp][sevarity]>.*?)-(?<[tmp][mnemonic]>.*?)): (?<[error][message]>.*?) (?<[source][ip]>\d+\.\d+\.\d+\.\d+) (O|o)n (?<[network][vlan][name]>.*?), (S|s)ourced (B|b)y (?<[network][vlan][id]>.*?)$',
        '^(?<[event][ingested]>.*?) \{name=(?<[observer][hostname]>.*?)\} \<\d+\>(?<[event][id]>\d+): (\*)?(\d+: )?(?<[event][created]>.*?): \%(?<[log][syslog][facility][name]>(?<[tmp][facility]>.*?)-(?<[tmp][sevarity]>.*?)-(?<[tmp][mnemonic]>.*?)): (?<[error][message]>.*?)$'
      ]
    }
    timeout_millis => 500
  }
  mutate {
    uppercase => [ "[tmp][facility]" ]
    lowercase => [ "[tmp][mnemonic]" ]
  }
  translate {
    id => "cisco-translate-facility"
    source => "[tmp][facility]"
    target => "[tmp][facility_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios_facility_categories.json"
    refresh_interval => 3000
    fallback => "not_found_facility"
  }
  translate {
    id => "cisco-translate-mnemonic"
    source => "[tmp][mnemonic]"
    target => "[tmp][mnemonic_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios.json"
    refresh_interval => 3000
    fallback => '{"key1":"not_found"}'
  }
  mutate {
    rename => {
      "[tmp][sevarity]" => "[event][severity]"
      "[tmp][facility_translation][vendor_reference_location]" => "[event][reference]"
      "[tmp][facility_translation][vendor_category]" => "[event][category]"
      "[tmp][mnemonic_translation][msg_explanation]" => "[rule][description]"
      "[tmp][mnemonic_translation][msg_recommendation]" => "[event][recommendation]"
    }
  }
# "[event][created]" => "sep 17 09:09:03.623 gmt",
# "created" => "sep 17 2024 15:23:19.893",
#  "created" => "sep  6 21:21:08.301"
      mutate {
        gsub => [
          "[event][created]", "(^.*) \w\w\w", "\1",
          "[event][created]", "  ", " "
        ]
      }
  date {
    match => [ "[event][created]",
      "MMM dd HH:mm:ss.SSS",
      "MMM d HH:mm:ss.SSS",
      "MMM dd yyyy HH:mm:ss.SSS",
      "MMM d yyyy HH:mm:ss.SSS"
    ]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
# "[event][ingested]" => "2024-09-17t09:09:04.648773581z",
  date {
    match => [ "[event][ingested]", 
      "ISO8601"
    ]
    timezone => "GMT"
    locale => "en"
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_ei"
  }
  mutate {
    remove_field => [ "[tmp]"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
