# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  
  mutate {
    remove_field => [ "event", "host" ]
    add_field => { "[event][module]" => "cisco" }
    add_field => { "[event][dataset]" => "cisco.router" }
    copy => {"[log][source][ip]" => "[host][ip]"} 
  }

  mutate {
    strip => ["message"]
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri", "[log][syslog][facility][name]" ]
	ecs_compatibility => v8
  }

  # Note: The old version of this processor needs some rework (code after the numerated steps). 
  # However, there are functioning bits of it that we'll preserve (properly identified below), and since it relies on %{actual_msg} the new rules shouldn't affect it if we preserve such field.

  # 1. Hostname
  mutate {
    copy => { "[log][source][hostname]" => "[tmp][log_source_hostname]"}
  }
  mutate {
    split => { "[tmp][log_source_hostname]" => "." } 
    add_field => { "[host][hostname]" => "%{[[tmp][log_source_hostname][0]]}"}
  }

  # 2. Start by copying the original message to [log][original] (for integrity).  We'll then pick the common fields and placing them under [tmp]. [tmp] is a temporary slot to work out the parsing
  mutate {
    id => "cisco-mutate-logoriginal1"
  }
  mutate {
    id => "cisco-mutate-logoriginal2"
    lowercase => ["[message]"]
  }

  # 2. General cisco log format is 
  # {timesdtamp} {facility} {severity} {mnemonic} {description}
  # seq no:timestamp: %facility-severity-MNEMONIC:description
  dissect {
    id => "cisco.router-mutate-dissect-actual_msg"
    mapping => {
      "actual_msg" => "%{[[event][id]]}: %{[[tmp][device_timestamp]]->} %{+[[tmp][device_timestamp]]} %{+[[tmp][device_timestamp]]} %{[[source][address]]}: %%{[[tmp][facility]]}-%{[[tmp][severity]]}-%{[[tmp][mnemonic]]}: %{[[tmp][msg]]}"
    }
  }

  # 3. Parse ingest date
  mutate {
    id => "cisco-mutate-gsub-date"
    gsub => [ "[tmp][ingest_timestamp]", "t", "-"]
  }

  date {
    id => "cisco-date-ingest"
    match => [ "[tmp][ingest_timestamp]", 
      "MMM dd yyyy HH:mm:ss",
      "MMM  d yyyy HH:mm:ss", 
      "ISO8601", 
      "yyyy-MM-dd-HH:mm:ss.SSSZ",
      "MMM dd HH:mm:ss.SSS", 
      "MMM dd HH:mm:ss.SSS ZZZ", 
      "MMM dd HH:mm:ss ZZZ", 
      "MMM dd HH:mm:ss.SSS", 
      "YYYY MMM dd HH:mm:ss.SSS ZZZ", 
      "YYYY MMM dd HH:mm:ss ZZZ", 
      "YYYY MMM dd HH:mm:ss.SSS", 
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss.SSS", 
      "MMM dd HH:mm:ss"  
    ]
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_cisco.router-date-[event][ingested]"
  }

  # 4. Parse device log date
  date {
    id => "cisco.router-date-event.started"
    match =>[ "[tmp][device_timestamp]",
      "MMM dd yyyy HH:mm:ss",
      "MMM  d yyyy HH:mm:ss", 
      "ISO8601", 
      "yyyy-MM-dd-HH:mm:ss.SSSZ",
      "MMM dd HH:mm:ss.SSS", 
      "MMM dd HH:mm:ss.SSS ZZZ", 
      "MMM dd HH:mm:ss ZZZ", 
      "MMM dd HH:mm:ss.SSS", 
      "YYYY MMM dd HH:mm:ss.SSS ZZZ", 
      "YYYY MMM dd HH:mm:ss ZZZ", 
      "YYYY MMM dd HH:mm:ss.SSS", 
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss.SSS", 
      "MMM dd HH:mm:ss"   
    ]
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_cisco.router-date-event.started"
  }

  # 5. Set action field
  mutate {
    add_field => { "[event][action]" => "%{[[tmp][facility]]}.%{[[tmp][mnemonic]]}"}
  }

  # 6. Rename Cisco facility ##
  # From Elastic: The translate filter plugin supports large dictionaries, and has been tested with up to 100,000 key/values.
 
  # a. perform facility translation
  mutate {
    uppercase => ["[tmp][facility]"]
  }
  translate {
    id => "cisco-translate-facility"
    source => "[tmp][facility]"
    target => "[tmp][facility_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios_facility_categories.csv"  # ** Must set full "/path/to/lookup.json" to your lookup file **
    refresh_interval => 3000
    fallback => "not_found_facility"
  }

  # b. Translate full msg, explanation, recommendation
  translate {
    id => "cisco-translate-mnemonic"
    source => "[tmp][mnemonic]"
    target => "[tmp][mnemonic_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios.json" # ** Must set full "/path/to/lookup.json" to your lookup file **
    refresh_interval => 3000
    fallback => '{"key1":"not_found"}'
  }

  # because a “fallback” value can only contain a string, additional processing is done to ensure that failed lookups store values in proper fields
  if [tmp][mnemonic_translation] == '{"key1":"not_found"}' {
    json { 
      source => "[tmp][mnemonic_translation]" 
      target => "[tmp][mnemonic_translation]"
    }
    mutate {
      remove_field => ["[tmp][mnemonic_translation]"]
    }
    mutate {
      add_field => {"[tmp][mnemonic_translation][msg_explanation]" => "not_found_msg_explanation"}
      add_field => {"[tmp][mnemonic_translation][msg_recommendation]" => "not_found_msg_recommendation"}
      add_field => {"[tmp][mnemonic_translation][facility]" => "not_found_translation_facility"}
      add_field => {"[tmp][mnemonic_translation][msg_txt]" => "not_found_parsing_rule"}
    }
  }

  # c. add proper fields from [tmp] translated
  mutate {
    add_field => { "[event][reason]" => "%{[[tmp][mnemonic_translation][msg_explanation]]}"}
    add_field => { "[log][syslog][facility][name]" => "%{[[tmp][mnemonic_translation][facility]]}"}
    add_field => { "[error][message]" => "%{[[tmp][msg]]}"}
    add_field => { "[event][recommendation]" => "%{[[tmp][mnemonic_translation][msg_recommendation]]}"}
  # Tip: the [tmp][msg_parse] from the translate filter contains the format of the message, which may make parsing easier especially for dissect/grok filters. Anything under [tmp] is dropped from the event so this will need to be turned back on when parsing 
    add_field => { "[tmp][msg_parse]" => "%{[[tmp][mnemonic_translation][msg_txt]]}"}
  }

  # 7. Specific event parsing  
  # a. BGP Messages
  if [event][action] == "bgp.adjchange" {
    dissect {
      mapping => {
        "[tmp][msg]" => "neighbor %{[[tmp][related][ip]]} %{[[tmp][bgp][state]]} %{[[tmp][bgp][reason]]}"
      }
    }

    mutate {
      add_field => { "[event][type]" => "connection"}
      add_field => { "[event][category]" => "network"}
      add_field => { "[event][kind]" => "state"} 
    }

    translate {
      source => "[tmp][bgp][state]"
      dictionary => [
      "down", "failure", 
      "up", "success"
      ]
      exact => true
      fallback => "unknown"
      target => "[event][outcome]"
    }
  }

  # 7.2. Link up/down
  if [event][action] == "link.updown" {
    grok {
      id => "cisco.router-grok-link.updown"
      match => { 
        "[tmp][msg]" => "%{GREEDYDATA}interface %{GREEDYDATA:[[tmp][ifname]]}\, changed state to %{WORD:[[tmp][interface][state]]}"
      }
      timeout_millis => 500
    }

    mutate {
      add_field => { "[event][type]" => "connection"}
      add_field => { "[event][category]" => "network"}
      add_field => { "[event][kind]" => "state"}
      add_field => { "[observer][ingress][interface][name]" => "%{[[tmp][ifname]]}"}
      add_field => { "[observer][ingress][interface][alias]" => "unknown_interface_alias"} #we're adding interface.alias here so later it can be used by enrichments to look for interface details
    }

    translate {
      source => "[tmp][interface][state]"
      dictionary => [
      "down", "failure", 
      "up", "success"
      ]
      exact => true
      # [field]-[error]
      fallback => "unknown"
      target => "[event][outcome]"
    }
  }

  # 7.3. Line up/down
  if [event][action] == "line.updown" {
    grok {
      id => "cisco.router-grok-line.updown"
      match => {
        "[tmp][msg]" => "line protocol on interface %{GREEDYDATA:[[tmp][ifname]]}, changed state to %{WORD:[[tmp][interface][state]]}"
      }
      timeout_millis => 500
    }

    mutate {
      add_field => { "[event][type]" => "connection"}
      add_field => { "[event][category]" => "network"}
      add_field => { "[event][kind]" => "state"}
      add_field => { "[observer][ingress][interface][name]" => "%{[[tmp][ifname]]}"}
      add_field => { "[observer][ingress][interface][alias]" => "unknown_interface_alias"} #we're adding interface.alias here so later it can be used by enrichments to look for interface details
    }

    translate {
      source => "[tmp][interface][state]"
      dictionary => [
      "down", "failure", 
      "up", "success"
      ]
      exact => true
      # [field]-[error]
      fallback => "unknown"
      target => "[event][outcome]"
    }
  }

  # 8. Cleanup related IP
  if [related][ip] {
    mutate {
      gsub => [
        # cleanup ip address before adding to proper field
        "[tmp][related][ip]", "\*", ""
      ]
    }
    mutate {
      # [related][ip] should be an array, therefore adding twice. a ruby conversion filter may be a better fit
      add_field => { "[related][ip]" => "%{[[tmp][related][ip]]}"}
      add_field => { "[related][ip]" => "%{[[tmp][related][ip]]}"}
    }
  }
    
  # 9. Remove [tmp] fields
  mutate {
    remove_field => [ "[tmp]"]
  }

  # 10. >>>>>>>>> Old processor - These are the bits of the old processor that relies on [actual_msg]
  if [event][severity_name] =~ "SYSD" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 1" }
    }
    dissect {
      mapping => {
        actual_msg => "%{event_start->} %{+event_start} %{+event_start} %{?data}: %{?data->} %{?data} %{?data} %{?data} %{[[source][mac]]} %{[[event][status]]}"
      }
    }
  }
  else if [actual_msg] =~ "%FMANFP-6-IPACCESSLOGDP" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 2" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{chk_data} %{?data}"
      }
    }
    if [actual_msg] =~ "denied" and [chk_data] =~ ":" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 2 (a)" }
      }
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{[[source][address]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} denied %{[[network][protocol]]} %{[[source][ip]]} -> %{[[destination][ip]]} %{?data}, %{[[network][packet]]} %{?data}"
        }
      }
    }
    else if [actual_msg] =~ "denied" and [chk_data] !~ ":" {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} denied %{[[network][protocol]]} %{[[source][ip]]} -> %{[[destination][ip]]} %{?data}, %{[[network][packet]]} %{?data}"
        }
      }
    }
    else if [actual_msg] =~ "permitted" and [chk_data] =~ ":" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 2 (b)" }
      }
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{[[source][address]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} permitted %{[[network][protocol]]} %{[[source][ip]]} -> %{[[destination][ip]]} %{?data}, %{[[network][packet]]} %{?data}"
        }
      }
    }
    else if [actual_msg] =~ "permitted" and [chk_data] !~ ":" {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} permitted %{[[network][protocol]]} %{[[source][ip]]} -> %{[[destination][ip]]} %{?data}, %{[[network][packet]]} %{?data}"
        }
      }
    }
  }
  else if [actual_msg] =~ "%FMANFP-6-IPACCESSLOGP" and [actual_msg] =~ "denied" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 3" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} denied %{[[network][protocol]]} %{[[source][ip]]}(%{[[source][port]]}) -> %{[[destination][ip]]}(%{[[destination][port]]}), %{[[network][packet]]} %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "%FMANFP-6-IPACCESSLOGP" and [actual_msg] =~ "permitted" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 4" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} permitted %{[[network][protocol]]} %{[[source][ip]]}(%{[[source][port]]}) -> %{[[destination][ip]]}(%{[[destination][port]]}), %{[[network][packet]]} %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "%ISDN-6-CONNECT" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 5" }
    }
    dissect {
      mapping => {
        actual_msg => "%{?data}%%{[[rule][name]]}: %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "%ISDN-6-DISCONNECT" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 6" }
    }
    dissect {
      mapping => {
        actual_msg => "%{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} %{[[rule][description]]} %{?data} lasted %{?[[event][duration]]} %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "%SEC-6-IPACCESSLOGP" and [actual_msg] =~ "denied" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 7" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} denied %{[[network][protocol]]} %{[[source][ip]]}(%{[[source][port]]}) -> %{[[destination][ip]]}(%{[[destination][port]]}), %{[[network][packet]]} %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "%SEC-6-IPACCESSLOGP" and [actual_msg] =~ "permitted" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 8" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} permitted %{[[network][protocol]]} %{[[source][ip]]}(%{[[source][port]]}) -> %{[[destination][ip]]}(%{[[destination][port]]}), %{[[network][packet]]} %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "SEC-6-IPACCESSLOGNP" or [actual_msg] =~ "SNMP-5-COLDSTART" or [actual_msg] =~ "SYS-6-BOOTTIME" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 9" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{chk_data} %{?data}"
      }
    }
    if [chk_data] =~ ":" {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{[[source][address]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{eventdescription}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{eventdescription}"
        }
      }
    }
    if [eventdescription] =~ "->" and [eventdescription] =~ "denied " {
      dissect {
        mapping => {
          eventdescription => "%{?data} denied %{?data} %{[[source][ip]]} -> %{[[destination][ip]]}, %{[[network][packet]]}"
        }
      }
    }
    mutate {
      rename => {"eventdescription" => "[rule][description]"}
    }
  }
  else if [actual_msg] =~ "FF8472-5-THRESHOLD_VIOLATION" or [actual_msg] =~ "TRACKING-5-STATE" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 10" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "VOIPAAA-5-VOIP_CALL_HISTORY" or [actual_msg] =~ "VOIPAAA-5-VOIP_FEAT_HISTORY" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 11" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{?data} %%{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "SYS-4-CONFIG_RESOLVE_FAILURE" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 12" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{?data}%%{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "SEC-6-IPACCESSLOGRP" or [actual_msg] =~ "SEC-6-IPACCESSLOGSP" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 13" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "SEC-6-IPACCESSLOGRL" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 14" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} missed %{[[network][packet]]} %{?data}"
      }
    }
  }
 
  else if [actual_msg] =~ "CDP-4-DUPLEX_MISMATCH" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 17" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data}, with %{[[destination][address]]} %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "CDP-4-NATIVE_VLAN_MISMATCH" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 18" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data}, with %{[[destination][address]]} %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "RECVD_PKT_INV_SPI" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 19" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "IKMP_NO_ID_CERT_ADDR_MATCH" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 20" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "IKMP_POLICY_DEFAULT" or [actual_msg] =~ "OT11-6-DISASSOC" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 21" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "FMANFP-6-IPACCESSLOGNP" and [actual_msg] =~ "denied 2" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 22" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{chk_data} %{?data}"
      }
    }
  # some logs do not have source/destination address
    if [chk_data] =~ ":" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 22 (a)" }
      }
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{[[source][address]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} denied %{?data} %{[[source][ip]]} -> %{[[destination][ip]]}, %{[[network][packet]]} %{?data}"
        }
      }
    }
    else {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 22 (b)" }
      }
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} denied 2 %{[[source][ip]]} -> %{[[destination][ip]]}, %{[[network][packet]]} %{?data}"
        }
      }
    }
  }
  else if [actual_msg] =~ "FMANFP-6-IPACCESSLOGNP" {
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} denied %{?data} %{[[source][ip]]} -> %{[[destination][ip]]}, %{[[network][packet]]} %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "DSMP-3-DSP_TIMEOUT" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 23" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{?data}: %%{[[rule][name]]}: %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "DUAL-5-NBRCHANGE" and [actual_msg] =~ "down" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 24" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} Neighbor %{[[destination][ip]]} %{?data}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "DUAL-5-NBRCHANGE" and [actual_msg] =~ "up" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 25" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start} %{+event_start->} %{+event_start}: %%{[[rule][name]]}: %{?data} Neighbor %{[[destination][ip]]} %{?data}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "DUAL-6-NBRINFO" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 26" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{[host][hostname]} %{?data}: %%{[[rule][name]]}: %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "ENVMON-3-FAN_FAILED" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 27" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "ENVMON-4-ONE_FAN_LOW_RPM" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 28" }
    }
    # ENVMON-4-ONE_FAN_LOW_RPM without destination address
    if [actual_msg] =~ "Fan 1 is running at low RPM" or [actual_msg] =~ "Fan 2 is running at low RPM" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 28 (a)" }
      }
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 28 (b)" }
      }
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{[[destination][address]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
  }
  else if [actual_msg] =~ "FAN-3-FAN_FAILED" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 29" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "PORT_SECURITY-2-PSECURE_VIOLATION" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 30" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "NGWC_PLATFORM_FEP-1-FRU_PS_ACCESS" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 31" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "CRYPTO-4-PKT_REPLAY_ERR" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 32" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "ADJ-3-RESOLVE_REQ" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 33" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "PLATFORM_STACKPOWER-6-CABLE_EVENT" or [actual_msg] =~ "ADJ-5-RESOLVE_REQ_FAIL" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 34" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "DTP-5-TRUNKPORTON" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 35" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} %{[[observer][ingress][interface][name]]} %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "SW_MATM-4-MACFLAP_NOTIF" or [actual_msg] =~ "SW_DAI-4-DHCP_SNOOPING_DENY" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 36" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  
  else if [actual_msg] =~ "IOSXE-3-PLATFORM" and [actual_msg] != "IPSEC-3-REPLAY_ERROR"{
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 38" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{chk_data}:%{?data}"
      }
    }
    if [chk_data] =~ " " {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{?data} %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
  }
  else if [actual_msg] =~ "IP_SNMP-4-NOTRAPIP" or [actual_msg] =~ "PQ3_TSEC-5-LATECOLL" or [actual_msg] =~ "PQII_PRO_FE-5-LATECOLL"  {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 39" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "IP-4-DUPADDR" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 40" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} %{?data} %{[[destination][ip]]} %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "IPSEC-3-REPLAY_ERROR" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 41" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} %%{+[[rule][name]]}: %{[[rule][description]]}, %{?data}, %{?data} %{[[source][ip]]}, %{?data} %{?[[destination][ip]]}, %{?data}"
      }
    }
  }
  else if [actual_msg] =~ "MARS_NETCLK-3-HOLDOVER" or [actual_msg] =~ "MARS_NETCLK-3-CLK_TRANS" or [actual_msg] =~ "MARS_NETCLK-3-HOLDOVER_TRANS" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 42" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{chk_data} %{?data}"
      }
    }
    if [chk_data] =~ ":" {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{[[source][address]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{?data}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{[[rule][name]]}: %{?data}"
        }
      }
    }
  }
  
  else if [actual_msg] =~ "FMANFP-6-FMANACLLOGMISSMSG" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 43" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{chk_data} %{?data}"
      }
    }
    if [chk_data] =~ ":" {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{[[source][address]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}:%{?data} missed %{[[packet][no]]} %{?data}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}: %{?data} %{[[process][name]]}: %{?data} missed %{[[packet][no]]} %{?data}"
        }
      }
    }
  }
  else if [actual_msg] =~ "INEPROTO-5-UPDOWN" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 44" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}-%{?data}: %{?data} Interface %{[[observer][ingress][interface][name]]}, %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "INEPROTO-5-UPDOWN" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 45" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{event_start->} %{+event_start} %{+event_start}: %%{[[rule][name]]}-%{?data}: %{?data} Interface %{[[observer][ingress][interface][name]]}, %{[[rule][description]]}"
      }
    }
  }
  ## ACL messages
    mutate {
      lowercase => [ "[error][message]" ]
	  remove_field =>  ["[event][action]" ]
    }
  if [log][syslog][facility][name] == "SEC" {
    grok {
      tag_on_failure => "_parsefailure_acl"
      match => { "[error][message]" => "^(?<[observer][ingress][interface][name]>.*?): (?<[rule][name]>.*?): \w+ (?<[rule][id]>\d+) (?<[event][action]>\w+) (?<[network][transport]>\w+) (?<[source][ip]>\d+\.\d+\.\d+\.\d+)\((?<[source][port]>\d+)\) .. (?<[destination][ip]>\d+\.\d+\.\d+\.\d+)\((?<[destination][port]>\d+)\)(,)? (?<[destination][packets]>\d+)" }
      timeout_millis => 500
    }
  }
  date {
    # if we use [event][start] originally, if it's not in proper format,
    # it causes parsing error and since this field has to be a date field it won't go to elastic as data type mismatch
    match => ["event_start" , "MMM dd HH:mm:ss.SSS ZZZ","MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss"]
    timezone => "GMT"
    locale => "en"
    target => "[event][start]"
  }
  mutate {
    remove_field => [ "actual_msg", "[log][date]", "chk_data", "event_start" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
