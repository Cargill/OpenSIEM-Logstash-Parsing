input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    strip => ["message"]
    gsub => ["message" ,'[\"]',""]
  }

  if [message] =~ "MSUSELKG3165" or [message] =~ "MSUSELKG3164" or [message] =~ "10.47.133.211" or [message] =~ "10.47.133.29" {
    if [message] =~ "Server Name: MSSGSING4183" or [message] =~ "Server Name: MSSGSING4184" or [message] =~ "Server Name: MSNLSAGE706" or [message] =~ "Server Name: MSNLSAGE706"  {
      drop {}
    }
  }
  # tcp logs
  if [message] =~ "Site: Prod_DMZ" {
    dissect {
      mapping => {
        "message" => "%{received.date_time} {%{?data}} <%{?pri}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: %{host.hostname},%{?data}: %{desc},%{rest_msg}"
      }
    }
    kv {
      source => "rest_msg"
      value_split => ":"
      field_split => ","
      target => "tcp-sepm"
    }
    mutate {
      rename => {"[tcp-sepm][Event Description]" => "rule.description"}
      rename => {"[tcp-sepm][Server Name]" => "observer.name"}
      rename => {"[tcp-sepm][Admin]" => "user.name"}
      rename => {"[tcp-sepm][Domain Name]" => "host.domain"}
      remove_field => ["[tcp-sepm]","rest_msg"]
    }
  }
  # Agent Activity logs
  else if [message] =~ "Site:" and [message] !~ "Admin:" and [message] =~ ",Domain:" and [message] !~ "CIDS Signature ID:" {
    mutate {
      add_field => { "agent.parse_rule" => "Agent Activity" }
    }
  }
  # System logs
  else if [message] =~ "Site:" and [message] !~ "Admin:" and [message] !~ ",Domain:" and [message] !~ "CIDS Signature ID:" {
    mutate {
      add_field => { "agent.parse_rule" => "System" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {%{?data}} <%{?data}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: %{?data}: %{rule.ruleset},%{?data}: %{host.hostname},%{?data}: %{host.domain},%{?data},%{observer.hostname},%{?data},%{?data}"
      }
    }
  }
  # Administrative logs
  else if [message] =~ "Site:" and [message] =~ "Admin:" and [message] !~ "CIDS Signature ID:" and [message] !~ "Administrator log on succeeded" {
      mutate {
        add_field => { "agent.parse_rule" => "Administrative" }
      }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {%{?data}} <%{?data}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: %{?data}: %{rule.ruleset},%{?data}: %{host.hostname},%{?data}: %{host.domain},Admin: %{user.name},%{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Audit/Information"
      }
    }
  }
  # Admin
  else if [message] =~ "Site:" and [message] =~ "Admin:" and [message] !~ "CIDS Signature ID:" and [message] =~ "Administrator log on succeeded" {
    mutate {
      add_field => { "agent.parse_rule" => "Admin" }
    }
  }
  # Agent Behavior logs
  else if [message] =~ "Device ID:" {
    mutate {
      add_field => { "agent.parse_rule" => "Agent Behavior" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {%{?data}} <%{?data}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: %{host.hostname},%{source.ip},%{event.action},%{desc_temp},%{event.name},Begin: %{event.start},%{?data}: %{event.end},Rule: %{rule.name},%{process.pid},%{process.name},%{process.thread.id},%{process.thread.name},%{file.path},%{?data}: %{user.name},%{?data}: %{host.domain},Action Type: %{event.code},File size (bytes): %{file.size},%{file.device}"
      }
    }
    if [desc_temp] =~ "MD5" {
      grok {
        match => { "desc_temp" => ".*?MD5=(?<md5>.*?)$" }
        ### Example "rule.description" => "Read only access portable drives - Caller MD5=08eae2a042c90db1dba4fb34e4d56264",
      }
      mutate {
        rename => {"md5" => "process_hash_md5"}
        rename => {"desc_temp" => "rule.description"}
        remove_field => ["desc_temp", "md5"]
      }
      if [process_hash_md5] {
        if [process_hash_md5] =~ " - " and [process_hash_md5] =~ "=" {
          dissect  {
            mapping => {
              process_hash_md5 => "%{process.hash.md5} - %{?data}"
            }
          }
          mutate {
            remove_field => ["process_hash_md5"]
          }
        }
        else {
          mutate {
            rename => {"process_hash_md5" => "process.hash.md5"}
          }
        }
      }
    } else if [desc_temp] =~ "SHA256" {
      grok {
        match => { "desc_temp" => ".*?SHA256=(?<md5>.*?)$" }
      }
      mutate {
        rename => {"md5" => "process.hash.sha256"}
        rename => {"desc_temp" => "rule.description"}
        remove_field => ["desc_temp", "md5"]
      }
    }
        #"event.end" => "2020-02-24 11:32:26"
        #"event.start" => "2020-02-24 11:32:26",
        #"@timestamp" => 2020-03-18T00:20:08.090Z,
  }
  # Agent Scan logs
  else if [message] =~ "Scan ID:" {
    mutate {
      add_field => { "agent.parse_rule" => "Agent Scan" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {%{?data}} <%{?data}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: Scan ID: %{event.id},Begin: %{event.start},%{?data}: %{event.end},%{event.action},Duration (seconds): %{event.duration},User1: %{source.user.name},User2: %{destination.user.name},%{event.name},%{event.code},Command: %{rule.name},Threats: %{?no_of_threats},Infected: %{?data},Total files: %{?total_files},Omitted: %{?omitted_files},Computer: %{host.hostname},IP Address: %{host.ip},%{?data}: %{host.domain},%{?data}: %{rule.ruleset},%{?data}: %{?server.address}"
      }
    }
  }
  # Agent Security logs
  else if [message] =~ "CIDS Signature ID:" {
    mutate {
      add_field => { "agent.parse_rule" => "Agent Security" }
    }
    dissect {
      mapping => {
        "message" => "%{received.date_time} {%{?data}} <%{?pri}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: %{host.hostname},%{?data}: %{desc},%{somedata}"
      }
    }
    kv {
      source => "somedata"
      value_split => ":"
      field_split => ","
      target => "sepm"
    }
    if [desc] =~ "Requirement:" {
      grok {
        match => { "desc" => "(?<event.name>.*?) Requirement: '(?<rule.name>.*?)' (?<event.action>.*?) "}
              # Example    "Host Integrity check passed   Requirement: 'Tanium service running' passed "
              ### event.action is not correct, it needs to be event.outcome, but event.outcome can not be passed it has to be failure, success, unknown
      }
    }
    else {
      mutate {
        rename => {"desc" => "event.name" }
        ## Need to parce out the rest of the desc
        # “desc” => "[SID: 31999] Audit: P2P Torrent Traffic 4 attack detected but not blocked. Application path: D:\APLICACIONES\DENEVA\DENEVACLOUD\DENEVACLOUDP2P.EXE"
        # “desc” => "[SID: 30413] Web Attack: Passwd File Download Attempt attack blocked. Traffic has been blocked for this application: C:\PROGRAM FILES (X86)\NATIONAL INSTRUMENTS\SHARED\NISVCLOC\NISVCLOC.EXE"
        # “desc” => "[SID: 20566] Audit: P2P BitTorrent Traffic attack detected but not blocked. Application path: D:\APLICACIONES\DENEVA\DENEVACLOUD\DENEVACLOUDP2P.EXE"
        # “desc” => "[SID: 30764] Web Attack: Remote OS Command Injection attack blocked. Traffic has been blocked for this application: SYSTEM"
        # “desc” => "Device Manager Message Disabled the device.   [name]:Galaxy J7+   [class]:Portable Devices   [guid]:eec5ad98-8080-425f-922a-dabf3de3f69a   [deviceID]:USB\VID_04E8&PID_6860&MS_COMP_MTP&SAMSUNG_ANDROID\6&10E08F74&0&0000"
      }
    }
  }
  # Agent System logs
  else if [message] =~ "Event time:" and [message] !~ ",Certificate serial number:" {
    mutate {
      add_field => { "agent.parse_rule" => "Agent System" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {%{?data}} <%{?data}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: %{source.address},Category: %{rule.uuid},%{event.provider},%{rule.description},Event time: %{event.start},Group Name: %{rule.ruleset}"
    # "message" => "2020-02-19T18:18:43.463Z {name=iauselkg006} <54>Feb 12 20:09:48 MSUSELKG2898 SymantecServer: PDV-SATELITE,                        Category: 2,Symantec Endpoint Protection,Event Description: SONAR has been enabled,Event time: 2020-02-12 19:10:57,Group Name: My Company\\legacy\\campollo\\pc",
      }
    }
    if [source.address] {
      mutate {
        copy => {"source.address" => "host.hostname"}
      }
    }
  }
  # Agent Risk logs
  else if [message] =~ "Signing timestamp:" and [message] !~ ",Detection type:" {
    mutate {
      add_field => { "agent.parse_rule" => "Agent Risk" }
    }
    dissect {
      mapping => {
        "message" => "%{received.date_time} {%{?data}} <%{?pri}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: %{event.name},%{somedata}"
      }
    }
    kv {
      source => "somedata"
      value_split => ":"
      field_split => ","
      target => "sepm"
    }
  }
  # Agent Proactive detection logs(SONAR)
  else if [message] =~ ",Detection type:" {
    mutate {
      add_field => { "agent.parse_rule" => "Agent Proactive detection logs(SONAR)" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {%{?data}} <%{?pri}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: %{event.action},%{somedata}Detection Submissions %{?date},%{+somedata},Occurrences: %{?data},%{file.path},,%{+somedata}"
      }
    }
    kv {
      source => "somedata"
      value_split => ":"
      field_split => ","
      target => "sepm"
    }

    mutate {
      rename => {"[sepm][Risk Level]" => "event.severity_name"}
      rename => {"[sepm][Detection type]" => "rule.name"}
      rename => {"[sepm][Certificate issuer]" => "tls.server.issuer"}
      rename => {"[sepm][Certificate signer]" => "tls.server.certificate_chain"}
      rename => {"[sepm][Application name]" => "tls.server.subject"}
      rename => {"[sepm][Certificate thumbprint]" => "tls.server.hash.md5"}
    }
  } else if [message] =~ "konspol" {
  # konspol joint venture has different format
    mutate {
      add_field => { "agent.parse_rule" => "konspol jv" }
    }
    dissect {
      mapping => {
        "message" => "%{received.date_time} {%{?data}} <%{?pri}>%{event.created->} %{+event.created} %{+event.created} %{observer.name} %{?data}: %{host.hostname},%{?data},%{rule.name},event description: %{rule.description},event time: %{event.start},group name: %{rule.ruleset}"
      }
    }
    if [rule.description] =~ ".*?:" {
      grok {
        match => { "rule.description" => ".*?'(?<file.path>[a-zA-Z]:.*?)'"}
      }
    }
   } else {
    mutate {
      add_field => { "agent.parse_rule" => "other" }
    }
  }
  if [sepm][Hash type] == "MD-5" or [sepm][Hash type] == "MD5" {
    mutate {rename => {"[sepm][Application hash]" => "file.hash.md5"}}
  } else if [sepm][Hash type] == "SHA-1" or [sepm][Hash type] == "SHA1" {
    mutate {rename => {"[sepm][Application hash]" => "file.hash.sha1"}}
  } else if [sepm][Hash type] == "SHA-256" or [sepm][Hash type] == "SHA256" or [sepm][Hash type] == "SHA2" {
    mutate {rename => {"[sepm][Application hash]" => "file.hash.sha256"}}
  } else if [sepm][Hash type] == "SHA-512" {
    mutate {rename => {"[sepm][Application hash]" => "file.hash.sha512"}}
  }

  ## For Agent Risk remove null fields #### Does not work do not know why need to fix "user.name" => "null"
  if [url][full] == "null" {
    mutate { remove_field => ["url.full"] }
  }
  if [user][name] == "null" {
    mutate { remove_field => ["user.name"] }
  }
  if [url][domain] == "null" {
    mutate { remove_field => ["url.domain"] }
  }

  ## For Agent Security
  if [sepm][Application] =~ "\w+" {
    mutate {rename => {"[sepm][Application]" => "process.name"}}
  } else {
    mutate { rename => {"[sepm][Application]" => "process.path"}}
  }

  if [sepm][Begin] {
    mutate {
      rename => {"[sepm][Begin]" => "event.start"}
    }
  }
  if [sepm][End Time] {
    mutate {
      rename => {"[sepm][End Time]" => "event.end"}
    }
  }
  if [somedata] and [somedata] =~ "Remote Host MAC:" {
    dissect {
      mapping => {
        somedata => "%{?data}Remote Host MAC:%{?data},%{network.direction},%{?data}"
      }
    }
  }
  mutate {
    rename => {"[sepm][Location]" => "rule.ruleset"}
    rename => {"[sepm][Local Host IP]" => "destination.ip"}
    rename => {"[sepm][Local Host MAC]" => "destination.mac"}
    rename => {"[sepm][Remote Host MAC]" => "source.mac"}
    rename => {"[sepm][Remote Port]" => "source.port"}
    rename => {"[sepm][Domain Name]" => "host.domain"}
    rename => {"[sepm][Local Port]" => "destination.port"}
    rename => {"[sepm][User Name]" => "host.user.name"}
    rename => {"[sepm][Remote Host IP]" => "source.ip"}
    # Might need a if for hash i.e. Process or file like if [file][path]
    rename => {"[sepm][SHA-256]" => "file.hash.sha256"}
    rename => {"[sepm][MD-5]" => "file.hash.md5"}
    rename => {"[sepm][MD5]" => "file.hash.md5"}
    rename => {"[sepm][Intrusion URL]" => "url.full"}
    rename => {"[sepm][CIDS Signature SubID]" => "rule.uuid"}
    rename => {"[sepm][CIDS Signature string]" => "rule.name"}
    rename => {"[sepm][CIDS Signature ID]" => "rule.id"}
    rename => {"[sepm][Server Name]" => "observer.name"}
    rename => {"[sepm][Computer name]" => "host.hostname"}
    rename => {"[sepm][File path]" => "file.path"}
    rename => {"[sepm][IP Address]" => "host.ip"}
    rename => {"[sepm][Actual action]" => "event.action"}
    rename => {"[sepm][Web domain]" => "url.domain"}
    rename => {"[sepm][Download site]" => "url.full"}
    rename => {"[sepm][Downloaded by]" => "process.name"}
    rename => {"[sepm][File size (bytes)]" => "file.size"}
    rename => {"[sepm][Source Computer Name]" => "source.address"}
    rename => {"[sepm][Source Computer IP]" => "source.ip"}
    rename => {"[sepm][Group Name]" => "event.dataset"}
    rename => {"[sepm][Source]" => "log.logger"}
    rename => {"[sepm][Category type]" => "rule.category"}
    rename => {"[sepm][Category set]" => "rule.category"}
    rename => {"[sepm][Risk name]" => "rule.name"}
    rename => {"[sepm][Disposition]" => "error.type"}

    remove_field => ["somedata", "desc", "Hash type", "Risk type", "[sepm]"]
    ### TODO Need to fix other time later ####
    remove_field => ["log.date_time", "event.created", "received.date_time"]
  }

  if [event.start] {
    date {
      match => ["event.start" , "yyyy-MM-dd HH:mm:ss"]
      timezone => "GMT"
      locale => "en"
      target => "event.start"
    }
  }
  else {
    mutate {
      remove_field => ["event.start"]
    }
  }
  if [event.end] {
    date {
      match => ["event.end" , "yyyy-MM-dd HH:mm:ss"]
      timezone => "GMT"
      locale => "en"
      target => "event.end"
    }
  }
  else {
    mutate {
      remove_field => ["event.end"]
    }
  }
  if [event.name] {
    mutate {
      rename => {"event.name" => "rule.description"}
    }
  }
  # need to chane mac address format to 00:00:00etc..
  mutate {
      lowercase => [ "rule.name", "event.action", "file.path", "process.path" ]
	  }
   if [user.name] == "Removable Files Portal" {
	mutate {remove_field => ["user.name"]}
  }
  # Do not remove this, due to internal need.
  mutate {
    copy => { "host.hostname" => "host.name" }
  }

}
output {
  pipeline { send_to => [enrichments] }
}