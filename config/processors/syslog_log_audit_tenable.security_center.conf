# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<actual_msg>.*)" }
  }
  syslog_pri {
  syslog_pri_field_name => "pri" 
  remove_field => [ "pri" ]
  }
  mutate {
    add_field => { "event.module" => "tenable.security_center" }
    add_field => { "observer.vendor" => "tenable" }

    # observer.product is parsed from the log
  }
  
  if [message] =~ "T.NessusCore" {
    mutate {
      add_field => { "event.dataset" => "nessus scanner application logs" }
      add_field => { "observer.type" => "nessus scanner" }
    }
  }
  else if [message] =~ "SecurityCenter" {
    mutate {
      add_field => { "event.dataset" => "security center application logs" }
      add_field => { "observer.type" => "security center" }
    }
  }
  else {
    mutate {
      add_field => { "event.dataset" => "scanner os logs" }
    }
  }
  grok {
    match => {
      "actual_msg" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname}\s(?<technology_name>.*?):.*\[%{WORD:product}\]\:\s%{WORD:day},\s%{GREEDYDATA:date}\s-%{INT:value}\|%{WORD:status}\|%{WORD:infotype}\|%{WORD:messagetype}\|%{WORD:errorlevel}\|%{GREEDYDATA:finalmessage}"
    }
  }
  mutate {
    rename => {"syslog_hostname" => "host.hostname"}
    rename => {"product" => "observer.product"} #securitycenter
    rename => {"status" => "event.action"} #nightlycleanup
    rename => {"infotype" => "error.id"} #message
    rename => {"messagetype" => "error.code"} #critical
    rename => {"errorlevel" => "error.type"} #0
    rename => {"finalmessage" => "event.outcome"}
  }
  date {
    match => [ "date", "dd MMM yyyy HH:mm:ss", "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  mutate {
    remove_field => ["syslog_timestamp", "technology_name", "day", "value", "date","actual_msg"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
