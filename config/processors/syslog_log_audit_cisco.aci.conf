# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "cisco.aci" }
    add_field => { "observer.vendor" => "cisco" }
    add_field => { "observer.product" => "cisco aci" }
    add_field => { "observer.type" => "network_management" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
  }

  # 1. Start by copying the original message to log.original.  We'll then pick the common fields and placing them under [tmp]. [tmp] is a temporary slot to work out the parsing
  mutate {
    add_field => {"[log.original]" => "%{[message]}"}
  }

  # 2. We now apply a grok pattern to extract known fields
  grok {
    match => { "actual_msg" => "%{SYSLOGTIMESTAMP:[tmp][dateoriginal]} %{GREEDYDATA:[tmp][device]} \%LOG_LOCAL%{INT:[tmp][loglocal]}-%{INT:[tmp][severity]}-%{WORD:[tmp][module]} %{NOTSPACE:[tmp][msg_details]} %{GREEDYDATA:[tmp][error_message]}" }
  }

  # 3. Inside msg_details: faults are stateful and we'll find 4 fields that contain categories of this message.
  # events are stateless and the second field will be missing. because of that we can't dissect it, so we'll add a separator
  # we'll also clean the observer name
  mutate {
    gsub =>
      [ "[tmp][msg_details]", "\]", ",",
        "[tmp][msg_details]", "\[", "",
        "[tmp][host]", "\{name\=", "",
        "[tmp][host]", "\}", "",
        "[tmp][host]", "\..*", ""
      ]
  }

  mutate {
    split => {"[tmp][msg_details]" => ","}
  }

  # we now know if this is fault or event by the number of fields that msg_details contains. we can look into the last field

  if [tmp][msg_details][3]
  {
    mutate {
      add_field => {"[tmp][msg_type]" => "fault"}
      add_field => {"[tmp][code]" => "%{[tmp][msg_details][0]}"}
      add_field => {"[tmp][lifecycle]" => "%{[tmp][msg_details][1]}"}
      add_field => {"[tmp][det_severity]" => "%{[tmp][msg_details][2]}"}
      add_field => {"[tmp][rule]" => "%{[tmp][msg_details][3]}"}
    }
  }
  else
  {
    mutate {
      add_field => {"[tmp][msg_type]" => "event"}
      add_field => {"[tmp][code]" => "%{[tmp][msg_details][0]}"}
      add_field => {"[tmp][det_severity]" => "%{[tmp][msg_details][1]}"}
      add_field => {"[tmp][rule]" => "%{[tmp][msg_details][2]}"}
    }
  }

  # 4. pure ACI messages differ from ACI messages from nexus subsystems. we know nexus messages if rule = [sys]. in that case we need additional parsing
  if "[sys]" in [tmp][rule]
  {
    grok {
      match => {"[tmp][error_message]" => "%{SYSLOGTIMESTAMP:[tmp][nexus_date]} \%%{WORD:[tmp][nexus_loglocal]}-%{INT:[tmp][nexus_severity]}-%{WORD:[tmp][nexus_module]}:\s%{GREEDYDATA:[tmp][nexus_errormessage]}"}
    }
    mutate {
      update => {"[tmp][severity]" => "%{[tmp][nexus_severity]}"}
      update => {"[tmp][module]" => "%{[tmp][nexus_module]}" }
      update => {"[tmp][error_message]" => "%{[tmp][nexus_errormessage]}"}
    }
  }

  # 5. We end up with all SDWAN specific fields from rest msg. Now use 3 mutate filters (for readability) to perform 3 actions below
  # a) Parse fields that belong to ECS into ECS fields
  mutate {
    rename => {"[tmp][device]" => "host.hostname"}
    rename => {"pri" => "log.syslog.priority"}
    rename => {"[tmp][code]" => "error.code"}
    rename => {"[tmp][msg_type]" => "event.kind" }
    rename => {"[tmp][det_severity]" => "log.level"}
    rename => {"[tmp][severity]" => "log.syslog.severity.code"}
    rename => {"[tmp][error_message]" => "error.message"}
    rename => {"[tmp][host]" => "observer.hostname"}
    rename => {"[tmp][module]" => "event.type"}
    rename => {"[tmp][rule]" => "user.tmp"}
    rename => {"[tmp][lifecycle]" => "event.action"}
    rename => {"[tmp][loglocal]" => "log.syslog.facility.code"}
    rename => {"[tmp][nexus_loglocal]" => "log.syslog.facility.name"}
  }

  if [user.tmp] =~ "-" {
    mutate {
      split => { "user.tmp" => "-" }
    }
    if [user.tmp][1] {
      mutate {
        rename => {"[user.tmp][1]" => "user.name"}
      }
    }
  }

  # b) Parse fields that don't belong to ECS into Labels (as per https://www.elastic.co/guide/en/ecs/current/ecs-custom-fields-in-ecs.html#_the_labels_field)
  # c) Drop unused/unwanted fields
  mutate {
    remove_field => [ "[tmp]", "user.tmp", "actual_msg" ]
  }

  # 6. Proceed to hardcoded evaluations
  # event.category
  if [event.kind] == "fault"
  {
    translate {
      field => "[event.action]"
      destination => "[event.category]"
      dictionary => {
      "link-state-change" => "host"
      }
    }
  }
  else
  {
    translate {
      field => "[log.syslog.facility.name]"
      destination => "[event.category]"
      dictionary => {
      "LOG_AUTH" => "authentication"
      }
    }
  }

  # 7. Convert fields (i.e. extract site, appliance type, etc)
  if "" in [network.name] or ![network.name]  {
    mutate {
      add_field => {"[network.name]" => "%{[host.hostname]}" }
    }
  }
  mutate {
    add_field => {"[service.type]" => "%{[host.hostname]}"}
  }
  mutate {
    gsub => [
      "[service.type]", "(.*)-([a-z]*)", "\2",
      "[network.name]", "([a-z]*)([0-9].*)", "\1"
    ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
