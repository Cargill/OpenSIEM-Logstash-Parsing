input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
 
#     if [message] =~ "cs1=WAF_Learning" {
# 
#       dissect {
#         add_field => { "parse_rule_name" => "RULE 1" }
#         mapping => {
#           "rest_msg" => "<%{syslog_pri}>%{observer.hostname}=%{event.created->} %{+event.created} %{+event.created} %{+event.created} src=%{source.address} spt=%{source.port} dst=%{destination.ip} dpt=%{destination.port} dhost=%{destination.address} cs1=%{waf.policy.name} cs2=%{cs2} act=%{event.action} cs3=%{policy.style} app=%{network.protocol} requestMethod=%{http.request.method} cn1=%{cn1} %{http.request.body.content} %{event.message}"
#         }
#       }
#     }
#     else if [message] =~ "External_Logging_Alfex:" {
#       dissect {
#         add_field => { "parse_rule_name" => "RULE 2" }
#         mapping => {
#           "rest_msg" => "<%{syslog_pri}> %{process.name}:%{event.created->} %{+event.created} %{+event.created} %{source.ip}:%{source.port} -> %{destination.ip}:%{destination.port} %{?data} %{source.address} %{?data} %{url.path}"
#         }
#       }
#     } else if [message] =~ "(r|R)esets (C|c)onnection" {
#       dissect {
#         add_field => { "parse_rule_name" => "RULE 3" }
#         mapping => {
#           "rest_msg" => "<%{syslog_pri}>%{event.created->} %{+event.created} %{+event.created} %{observer.hostname} %{?data} %{?data} [%{?data}] %{network.transport} %{source.address} > %{destination.ip}:%{destination.port} %{event.original}"
#         } 
#       } 
#     } else {
#         mutate {
#           add_field => { "parse_rule_name" => "Not Parsed" }
#         }
#       }
    
  
  mutate {
    add_field => { "observer.vendor" => "a10" }
    add_field => { "observer.product" => "a10 web application firewall" }
    add_field => { "observer.type" => "waf" }
  }
#   syslog_pri {
#     syslog_pri_field_name => syslog_pri
#   }

#   date {
#     match => ["event.created" , "MMM dd yyyy HH:mm:ss", "MMM dd yyyy HH:mm:ss.SSS", "yyyy-mm-dd HH:mm:ss", "yyyy-mm-dd HH:mm:ss.SSS", "MMM dd HH:mm:ss" ,"MMM dd HH:mm:ss.SSS","yyyy/MM/dd 'at' HH:mm:ss"]
#     timezone => "GMT"
#     locale => "en"
#     target => "event.created"
#     tag_on_failure => "_dateparsefailure_ec"
#   }
#   
#   if "_dateparsefailure_ec" in [tags]  {
#     if ![log.orignal] {
#       mutate {
#         copy => { "message" => "log.original" }
#       }
#     }
#     mutate {
#      remove_field => ["event.created"]
#     }    
#   }
#   
#   
#   syslog_pri {
#     syslog_pri_field_name => syslog_pri
#   }
#   mutate {
#     remove_field => ["log.date", "rest_msg", "rest_msg", "code", "event.message","cs2","cn1","check_data"]
#   }
#   translate {
#     field => "[event.action]"
#     destination => "[rule.category]"
#     dictionary => {
#       "allow" => "Ops Network allow"
#       "deny" => "Ops Network deny"
#       "sanitize" => "Ops Other"
#     }
#     fallback => "Others"
#   }
  # VAR_ENRICHMENTS
#   }
}
output {
# VAR_OUTPUT
}