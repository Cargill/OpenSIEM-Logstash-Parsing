# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => {"[log][source][hostname]" => "api_proofpoint_siem_clicks"}
  }
  mutate {
    add_field => { "[event][module]" => "proofpoint siem clicks" }
    add_field => { "[observer][vendor]" => "proofpoint" }
    add_field => { "[observer][product]" => "proofpoint siem" }
    add_field => { "[observer][type]" => "email processing log feed" }
  }
  json {
    source => "message"
    target => "pp"
  }
  mutate {
    tag_on_failure => "mutate 1 failure"
    rename => { "[pp][url]" => "[url][full]" }
    rename => { "[pp][classification]" => "[rule][category]" } # "phish",
    rename => { "[pp][clickTime]" => "[event][start]" } # 2020-08-18t14:41:19.000z
    rename => { "[pp][threatTime]" => "[event][created]" } # 2020-08-18t14:41:07.000z
    rename => { "[pp][userAgent]" => "[user_agent][name]" }
    rename => { "[pp][campaignId]" => "[rule][ruleset]" }
    rename => { "[pp][clickIP]" => "[client][ip]" }
    rename => { "[pp][sender]" => "[source][user][email]" }
    rename => { "[pp][recipient]" => "[destination][user][email]" }
    rename => { "[pp][senderIP]" => "[source][ip]" }
    rename => { "[pp][GUID]" => "[rule][uuid]" }
    rename => { "[pp][threatID]" => "[rule][id]" }
    rename => { "[pp][threatURL]" => "[rule][reference]" }
    rename => { "[pp][threatStatus]" => "[event][status]" }
    rename => { "[pp][messageID]" => "[event][id]" }
    rename => { "[pp][event.dataset]" => "[event][dataset]" }
  }

  mutate {
    tag_on_failure => "mutate 2 failure"
    remove_field => ["pp"]
  }
  
# dates 

  date {
    # "[event][start]" 2020-08-31T16:48:54.000Z
    match => ["[event][start]","yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"]
    timezone => "GMT"
    locale => "en"
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_es"
  }
  
  if "_dateparsefailure_es" in [tags]  {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
      remove_field => ["[event][start]"]
    }    
  }
  date {
    # "[event][created]" 2020-08-31T16:48:54.000Z
    match => ["[event][created]","yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  
  if "_dateparsefailure_ec" in [tags]  {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
      remove_field => ["[event][created]"]
    }    
  }
  
}
output {
  pipeline { send_to => [enrichments] }
}
