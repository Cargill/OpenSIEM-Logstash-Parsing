 # Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    copy => { "message" => "log.original" }
  }
  json {
    source => "message"
    target => "obj"
  }
  mutate {
    rename => { "[obj][id]" => "event.id" }
    rename => { "[obj][type]" => "event.type" }
    rename => { "[obj][source]" => "event.provider" }
    rename => { "[obj][data][authenticationType]" => "event.category" }
    rename => { "[obj][data][clientIpAddress]" => "client.ip" }
    rename => { "[obj][data][endTime]" => "event.end" }
    rename => { "[obj][data][startTime]" => "event.start" }
    rename => { "[obj][data][region]" => "cloud.region" }
    rename => { "[obj][data][errorCode]" => "error.code" }
    rename => { "[obj][data][message]" => "event.action" }
    rename => { "[obj][data][requestAction]" => "http.request.method" }
    rename => { "[obj][data][requestResourcePath]" => "url.path" }
    rename => { "[obj][data][statusCode]" => "http.response.status_code" }
    rename => { "[obj][data][userAgent]" => "user_agent.original" }
    rename => { "[obj][oracle][ingestedtime]" => "event.ingested" }
  }
  date {
    match => ["event.end" , "ISO8601" ] 
    timezone => "GMT"
    target => "event.end"
    tag_on_failure => "_dateparsefailure_ee"
  }
  if "_dateparsefailure_ee" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.end"]
    }
  }
  date {
    match => ["event.ingested" , "ISO8601" ] 
    timezone => "GMT"
    target => "event.ingested"
    tag_on_failure => "_dateparsefailure_ei"
  }
  if "_dateparsefailure_ei" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.ingested"]
    }
  }
  date {
    match => ["event.start" , "ISO8601" ]
    timezone => "GMT"
    target => "event.start"
    tag_on_failure => "_dateparsefailure_es"
  }
  if "_dateparsefailure_es" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.start"]
    }
  }
  mutate {
    remove_field => [ "[obj]" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}