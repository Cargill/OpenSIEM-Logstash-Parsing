# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "checkpoint" }
    add_field => { "[event][dataset]" => "checkpoint.fw_traffic" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  if [actual_msg] =~ "^.*?syslog_severity=Debug" {
    drop { }
  }
  if [actual_msg] =~ "=" and [actual_msg] =~ ";" {
    mutate {
      add_field => { "[agent][parse_rule]" => "Type 1" }
    }
    dissect {
      mapping => {
       "actual_msg" => "%{?data} %{?data} %{[[observer][name]]} %{?data} %{?data} - [%{msg}"
      }
    }
    mutate {
      gsub => [ "msg", "[\]](?=[^\]]*$)", "" ]
    }
    mutate {
      gsub => [ "msg", "=", ":" ]
      gsub => [ "msg", ",", ";" ]
    }
    kv {
      timeout_millis => 0
      source => "msg"
      trim_key => "\s"
      field_split => ";"
      value_split => ":"
      # transform_value => "lowercase"
      target => "fw"
      whitespace => "strict"
    }
  } else if [actual_msg] !~ ";"{
    mutate {
      add_field => { "[agent][parse_rule]" => "Type 2" }
    }
    # this may need to change
    dissect {
      mapping => {
        "actual_msg" => "%{tmp_data}: %{[[error][message]]}"
      }
    }
  } else {
    mutate {
      add_field => { "[agent][parse_rule]" => "Other" }
    }
  }
  kv {
    source => "[fw][__policy_id_tag]"
    field_split => ";"
    value_split => ":"
    # transform_value => "lowercase"
    target => "pn"
  }
  kv {
    source => "[fw][origin_sic_name]"
    field_split => ";"
    value_split => ":"
    # transform_value => "lowercase"
    target => "sic"
  }
  kv {
    source => "[fw][originsicname]"
    field_split => ";"
    value_split => ":"
    # transform_value => "lowercase"
    target => "sic"
  }
  # remove unneeded fields
  mutate {
    gsub => ["[pn][policy_name]", "\\]", ""]

  }
  # Rename to ECS
  mutate {
  # Syslog fields
    rename => {"[fw][facility]" => "[log][syslog][facility][name]"}
  # Event fields
    rename => {"[fw][default_device_message]" => "[rule][description]"}
    rename => {"[fw][action]" => "[event][action]"}
    rename => {"[fw][product]" => "[observer][product]"}
    rename => {"[fw][severity]" => "[event][severity]"}
  # destination fields
    rename => {"[fw][dst]" => "[destination][ip]"}
    rename => {"[fw][service]" => "[destination][port]"}
  #source fields
    rename => {"[fw][s_port]" => "[source][port]"}
    rename => {"[fw][src]" => "[source][ip]"}
  # host fields
    rename => {"[fw][origin]" => "[host][ip]"}
  # observer fields
    rename => {"[fw][host]" => "[observer][ip]"}
  # netowrk fields
    rename => {"[fw][proto]" => "[network][iana_number]"}
    rename => {"[fw][ifdir]" => "[network][direction]"}
    rename => {"[fw][inzone]" => "[network][inner][vlan][name]"}
    rename => {"[fw][outzone]" => "[network][vlan][name]"}
    rename => {"[fw][service_id]" => "[network][protocol]"}
  # Host Fields
    rename => {"[sic][cn]" => "[log][source][hostname]"}
    rename => {"[pn][mgmt]" => "[host][type]"}
  # Rule fields
    rename => {"[fw][message_info]" => "[rule][category]"}
    rename => {"[fw][match_id]"=> "[rule][id]"}
    rename => {"[fw][rule]" => "[rule][id]"}
    rename => {"[fw][layer_name]" => "[rule][description]"}
    rename => {"[fw][rule_name]" => "[rule][name]"}
    rename => {"[pn][policy_name]" => "[rule][ruleset]"}
    rename => {"[sic][o]" => "[log][logger]"}
    rename => {"[fw][attack]" => "[rule][name]"}
    rename => {"[fw][attack_info]" => "[rule][category]"}
    rename => {"[fw][protection_id]" => "[rule][id]"}
  }
  date {
    match => ["[fw][date]", "UNIX"]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
  }
  mutate {
    copy => { "[observer][name]" => "[log][source][hostname]" }
    add_field => { "[event][module]" => "checkpoint.fw" }
    remove_field => ["[log][date_time]", "msg", "actual_msg", "[fw]", "[sic]", "[pn]"]
    add_field => { "[event][kind]" =>  "checkpoint.fw" }
  }
}
output {
  pipeline { send_to => [enrichments] }
}