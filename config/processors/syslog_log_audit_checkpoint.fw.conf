# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  if [message] =~ "^.*?syslog_severity=Debug" {
    drop { }
  }
  # Break up syslog header from message
  if [message] =~ "=" and [message] =~ ";" {
    mutate {
      add_field => { "parse_rule_name" => "Type 1" }
    }
    dissect {
      mapping => {
       "message" => "%{?pri} %{?data} %{observer.name} %{?data} %{?data} - [%{msg}"
      }
    }
    mutate {
      gsub => [ "msg", "[\]](?=[^\]]*$)", "" ]
    }
    mutate {
      gsub => [ "msg", "=", ":" ]
      gsub => [ "msg", ",", ";" ]
    }
    kv {
      timeout_millis => 0
      source => "msg"
      trim_key => "\s"
      field_split => ";"
      value_split => ":"
      # transform_value => "lowercase"
      target => "fw"
      whitespace => "strict"
    }
  } else if [message] !~ ";"{
    mutate {
      add_field => { "parse_rule_name" => "Type 2" }
    }
    # this may need to change
    dissect {
      mapping => {
        "message" => "<%{?pri1}>%{tmp_data}: %{error.message}"
            # "message" => "2020-02-26T00:37:58.385Z {name=iauselkg004} <31>xpand[4846]: Raid: in raidCardExist",
      }
    }
  } else {
    mutate {
      add_field => { "parse_rule_name" => "Other" }
    }
  }
  kv {
    source => "[fw][__policy_id_tag]"
    field_split => ";"
    value_split => ":"
    # transform_value => "lowercase"
    target => "pn"
  }
  kv {
    source => "[fw][origin_sic_name]"
    field_split => ";"
    value_split => ":"
    # transform_value => "lowercase"
    target => "sic"
  }
  kv {
    source => "[fw][originsicname]"
    field_split => ";"
    value_split => ":"
    # transform_value => "lowercase"
    target => "sic"
  }
  # remove unneeded fields
  mutate {
    gsub => ["[pn][policy_name]", "\\]", ""]

  }
  # Rename to ECS
  mutate {
  # Syslog fields
    rename => {"[fw][facility]" => "log.syslog.facility.name"}
  # Event fields
    rename => {"[fw][default_device_message]" => "rule.description"}
    rename => {"[fw][action]" => "event.action"}
    rename => {"[fw][product]" => "event.module"}
    rename => {"[fw][severity]" => "event.severity"}
  # destination fields
    rename => {"[fw][dst]" => "destination.ip"}
    rename => {"[fw][service]" => "destination.port"}
  #source fields
    rename => {"[fw][s_port]" => "source.port"}
    rename => {"[fw][src]" => "source.ip"}
  # host fields
    rename => {"[fw][origin]" => "host.ip"}
  # observer fields
    rename => {"[fw][host]" => "observer.ip"}
  # netowrk fields
    rename => {"[fw][proto]" => "network.iana_number"}
    rename => {"[fw][ifdir]" => "network.direction"}
    rename => {"[fw][inzone]" => "network.inner.vlan.name"}
    rename => {"[fw][outzone]" => "network.vlan.name"}
    rename => {"[fw][service_id]" => "network.protocol"}
  # Host Fields
    rename => {"[sic][cn]" => "log.source.hostname"}
    rename => {"[pn][mgmt]" => "host.type"}
  # Rule fields
    rename => {"[fw][message_info]" => "rule.category"}
    rename => {"[fw][match_id]"=> "rule.id"}
    rename => {"[fw][rule]" => "rule.id"}
    rename => {"[fw][layer_name]" => "rule.description"}
    rename => {"[fw][rule_name]" => "rule.name"}
    rename => {"[pn][policy_name]" => "rule.ruleset"}
    rename => {"[sic][o]" => "log.logger"}
    rename => {"[fw][attack]" => "rule.name"}
    rename => {"[fw][attack_info]" => "rule.category"}
    rename => {"[fw][protection_id]" => "rule.id"}
  }
  date {
    match => ["[fw][date]",UNIX]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
  }
  mutate {
    copy => { "observer.name" => "log.source.hostname" }
    add_field => { "event.module" => "checkpoint.fw" }
    remove_field => ["log.date_time", "msg", "[msg]", "[fw]", "[sic]", "[pn]"]
  }

}
output {
  pipeline { send_to => [enrichments] }
}
