# Copyright [2022] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => {
      "[event][module]" => "aws"
      "[event][dataset]" => "aws.securityhub"
    }
  }
  mutate {
    lowercase => [ "message" ]
  }
  json {
    source => "message"
    target => "tmp"
  }
  ruby {
    code => "
      data_list = []
      
      if event.get('[tmp][detail][findings]').kind_of?Array
        event.get('[tmp][detail][findings]').each do |item|
          event.set('[data]', item)
        end
      end
    "
    tag_on_exception => "ruby_block_exception_1"
  }
  mutate{
    add_field => { "[log][source][hostname]" => "%{[data][awsaccountid]}" }
  }
  mutate {
    rename => { "[data][awsaccountid]" => "[cloud][account][id]" }
    rename => { "[data][createdat]" => "[event][created]" }
    rename => { "[data][description]" => "[rule][description]" }
    rename => { "[data][generatorid]" => "[rule][id]" }
    rename => { "[data][id]" => "[event][id]" }
    rename => { "[data][productarn]" => "[service][id]"}
    rename => { "[data][schemaversion]" => "[service][version]"}
    rename => { "[data][severity][label]" => "[event][severity_name]" }
    rename => { "[data][title]" => "[event][kind]" }
    rename => { "[data][types]" => "[event][type]" }
    rename => { "[data][updatedat]" => "[event][modified]" }
  }
  ruby {
    code => "
      resource_id_list = []
      resource_region_list = []
      
      if event.get('[data][resources]').kind_of?Array
        event.get('[data][resources]').each do |item|
          if item['id'] != ''
            resource_id_list.push(item['id'])
          end
          if item['region'] != ''
            resource_region_list.push(item['region'])
          end
        end
      end
 
      if !resource_id_list.empty?
        event.set('[cloud][instance][id]', resource_id_list)
      end
      if !resource_region_list.empty?
        event.set('[cloud][region]', resource_region_list)
      end
    "
    tag_on_exception => "ruby_block_exception_2"
  }
  date {
    match => [ "[event][created]", "ISO8601" ]
    timezone => "GMT"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  date {
    match => [ "[event][modified]", "ISO8601" ]
    timezone => "GMT"
    target => "[event][modified]"
    tag_on_failure => "_dateparsefailure_em"
  }
  mutate {
    remove_field => [ "tmp", "data" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
