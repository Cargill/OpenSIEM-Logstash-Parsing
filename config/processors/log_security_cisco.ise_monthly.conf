input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  dissect {
    mapping => {
      message => "%{log.date} {%{?data}} <%{pri}>%{?data} %{?data} %{?data} %{observer.name} %{event.module} %{?data} %{?data} %{?data} %{event.created} %{+event.created} %{?data} %{?data} %{?data} %{?notice} %{event.original}, %{rest_msg}"
    }
  }
  mutate {
        gsub => [
          "rest_msg", "[\\]", ",",
          "rest_msg", ",,", ",",
          "rest_msg", "\t", ""

        ]
  }
  kv {
    source => "rest_msg"
    target => "ise"
    value_split => "="
    field_split => ","
    trim_value => "*"
    trim_key => " "
    transform_key => "lowercase"
  }
  if [ise][ip address1] and [ise][ip address1] != ""{
    grok {
      match => { "[ise][ip address1]" => "(?<destinationip>\d+\.\d+\.\d+\.\d+)"}
    }
  }
  if [ise][operationmessagetext] and [ise][operationmessagetext] != ""{
    grok {
        match => {"[ise][operationmessagetext]" => "^((?<rule.name>.*?user) (?<source.user.name>.*?)from\s+\d+\.\d+\.\d+\.\d+ port\s+(?<source.port>\d+))?(?<rule.name>.*? file name:\s+'(?<file.path>(?<file.directory>.*\/)(?<file.name>[\w+\.]+\w+)))?" }
      }
  }
  mutate {
    rename => { "[ise][location]" => "network.name" }
    rename => { "[ise][adminname]" => "user.name" }
    rename => { "[ise][name]" => "destination.address" }
    rename => { "[ise][description]" => "host.type" }
    rename => { "[ise][configchangedata]" => "event.outcome" }
    rename => { "[ise][adminipaddress]" => "source.ip" }
    rename => { "[ise][acsinstance]" => "observer.hostname" }
  }
  if [event][original] =~ "authentication failed" {
    mutate {
      rename => { "[ise][username]" => "user.name" }
    }

  }

  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  mutate {
    strip => ["source.user.name"]
    remove_field => ["log.date", "rest_msg", "[ise]", "pri"]
  }
  date {
    match => ["event.created", "yyyy-mm-dd HH:mm:ss", "yyyy-mm-dd HH:mm:ss.SSS","MMM dd HH:mm:ss", "MMM dd HH:mm:ss SSS"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }

  if "_dateparsefailure_ec" in [tags]  {
    if ![log.orignal] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
      remove_field => ["event.created"]
    }
  }
  
}
output {
  pipeline { send_to => [enrichments] }
}