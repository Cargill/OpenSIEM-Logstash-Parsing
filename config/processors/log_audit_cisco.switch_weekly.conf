input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "cisco.switch" }
    add_field => { "observer.vendor" => "cisco" }
    add_field => { "observer.product" => "cisco.switch" }
    add_field => { "observer.type" => "switch" }
  }
  mutate {
    strip => ["message"]
  }
  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" {
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "<%{pri}>%{rest_msg}"
      }
    }
  } else {
  ### Filebeats udp or tcp in
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "%{?data} {%{?data}} <%{pri}>%{rest_msg}"
      }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  if [chk_data] =~ ":" {
    dissect {
      mapping => {
        message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.id}: %{rest_msg}"
      }
    }
    # all Warning msg
    if [rest_msg] =~ "_SNOOPING_DENY" and [rest_msg] !~ "SW_DAI-4-DHCP_SNOOPING_DENY" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start} %{?data}: %%{rule.name}:%{?data} %{rule.description} on %{destination.interface}, %{?data} %{network.vlan.id}.([%{observer.ingress.interface.name}/%{source.ip}/%{destination.mac}/%{destination.ip}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "SW_DAI-4-DHCP_SNOOPING_DENY" {
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}:%{?data} %{rule.description} on %{destination.interface}, %{?data} %{network.vlan.id}.([%{observer.ingress.interface.name}/%{source.ip}/%{destination.mac}/%{destination.ip}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%CDP-4-DUPLEX_MISMATCH:" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE CDP1" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description} on %{observer.ingress.interface.name} %{?data}, with %{destination.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%CDP-4-NATIVE_VLAN_MISMATCH" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE CDP2" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description} on %{observer.ingress.interface.name} %{?data}, with %{destination.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%SW_MATM-4-MACFLAP_NOTIF" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE MATM1" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "%LPOWER-3-CONTROLLER_PORT_ERR" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE LPOWER1" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "%SYS-4-CONFIG_RESOLVE_FAILURE" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 8" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "duplex mismatch" and [rest_msg] !~ "14w0d:" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %{?data}-%{?data}-%{rule.name}:%{rule.description} on %{observer.ingress.interface.name} %{?data}, with %{destination.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%DAI-4-INVALID_ARP" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{?data} %{rule.description} on %{observer.ingress.interface.name}, %{?data} %{network.vlan.id}.([%{observer.ingress.interface.name}/%{source.ip}/%{destination.mac}/%{destination.ip}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "SW_DAI-4-INVALID_ARP" {
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{?data} %{rule.description} on %{observer.ingress.interface.name}, %{?data} %{network.vlan.id}.([%{observer.ingress.interface.name}/%{source.ip}/%{destination.mac}/%{destination.ip}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "MACFLAP_NOTIF" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{?data} %{destination.mac} %{?data} %{?data} %{network.vlan.id} %{?data} port %{observer.ingress.interface.name} %{?data} %{?data} %{destination.interface}"
        }
      }
    }
    else if [rest_msg] =~ "%SNMP-4-NOTRAPIP"  {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "NATIVE_VLAN_MISMATCH" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description} on %{observer.ingress.interface.name} %{?data}, %{?data} %{destination.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "Rx power low" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{observer.ingress.interface.name}: %{rule.description}; %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "YS-4-CONFIG_RESOLVE_FAILURE" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    # checking the error
    else if [rest_msg] =~ "BADSERVERTYPEERROR" or [rest_msg] =~ "ENTROPY_ERROR" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{?data}-%{?data}-%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "CONTROLLER_PORT_ERR" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{?data}-%{?data}-%{rule.name}: %{rule.description}, %{?data} %{observer.ingress.interface.name} %{+rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "INPUT_QFULL_ERR" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "LINK-3-UPDOWN" {
      dissect {
        mapping => {
          rest_msg => "%{chk_data}: %{?data}"
        }
      }
      if [chk_data] =~ ":" {
        mutate {
          add_field => { "agent.parse_rule" => "RULE Link-1"}
        }
        dissect {
          mapping => {
            rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}-%{?data}-%{?data}: %{?data} %{destination.interface}, %{rule.description}"
          }
        }
      }
      else {
        mutate {
          add_field => { "agent.parse_rule" => "RULE Link-1 (a)"}
        }
        dissect {
          mapping => {
            rest_msg => "%{?data}: %%{rule.name}: %{?data} %{destination.interface}, %{rule.description}"
          }
        }
      }
    }
    else if [rest_msg] =~ "Native VLAN mismatch" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description} on %{observer.ingress.interface.name} %{?data}, %{?data} %{source.address} %{destination.interface} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "queue full" {
      dissect {
        mapping => {
          rest_msg => "%{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "ILPOWER-5-POWER_GRANTED" or [rest_msg] =~ "ILPOWER-5-IEEE_DISCONNECT" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else if [rest_msg] =~ "IP_SNMP-4-NOTRAPIP" {
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{rule.name}: %{rule.description}"
        }
      }
    }
  }
  else {
    if [message] =~ "IPACCESSLOGP" {
      dissect {
        mapping => {
          message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.start->} %{+event.start} %{+event.start} %{source.address} %%{rule.name}: %{?data} denied %{network.protocol} %{source.ip}(%{source.port}) -> %{destination.ip}(%{destination.port}), %{?data}"
        }
      }
    }
    else if [message] =~ "LOG_-6-SYSTEM_MSG" {
      dissect {
        mapping => {
          message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.start->} %{+event.start} %{+event.start} %{source.address} %%{rule.name} %{?data}"
        }
      }
    }
    else if [message] =~ "LOG_-4-SYSTEM_MSG" or [message] =~ "LOG_-3-SYSTEM_MSG" or [message] =~ "LOG_-2-SYSTEM_MSG" {
      dissect {
        mapping => {
          message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.start->} %{+event.start} %{+event.start} %{source.address} %%{rule.name} %{rule.description}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          message => "%{log.date} {%{?data}} <%{event.severity_name}>%{event.start->} %{+event.start} %{+event.start} %{source.address} %%{rule.name}: %{?data}"
        }
      }
    }
 # checking the NOTE severity
    if [rest_msg] =~ "_SNOOPING_MATCH" {
      dissect {
        mapping => {
          rest_msg => "%{event.start->} %{+event.start} %{+event.start} %{?data}: %%{rule.name}: %{rule.description} "
        }
      }
    }
  }
  if [event.start] {
    if [event.start] =~ ": " {
      mutate {
        remove_field => ["event.start"]
      }
    }
    else {
      date {
        match => ["event.start", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss.SSS ZZZ", "MMM dd HH:mm:ss","MMM dd HH:mm:ss ZZZ"]
        timezone => "GMT"
        locale => "en"
        target => "event.start"
      }
    }
  }
  mutate {
    remove_field => ["rest_msg","log.date","chk_data","destination.interface","network.vlan.id","pri"]
    # add_field => { "ecs.version" => "1.4" }
    # rename => {"host" => "agent"}
  }
  translate {
    field => "[syslog_severity]"
    destination => "[rule.category]"
    dictionary => {
      "error" => "Security/Failed Activity"
      "info" => "Security/Activity"
      "notice" => "Security/Activity"
      "warning" => "Security/Warning"
    }
      fallback => "Others"
  }
}
output {
  pipeline { send_to => [enrichments] }
}