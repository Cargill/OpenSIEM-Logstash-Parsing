input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "aws.guardduty.syslog" }
    add_field => { "event.dataset" => "aws.guardduty" }
    add_field => { "observer.vendor" => "aws" }
    add_field => { "observer.product" => "aws.guardduty" }
    add_field => { "observer.type" => "logging" }
  }
### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" { 
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => "(\<(?<pri>\d+)\>( )?)?(?<rest_msg>.*?)$" }
    }
  } else {
  ### Filebeats udp or tcp in
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => ".*?\{name=.*?\} (\<(?<pri>\d+)\>( )?)?(?<rest_msg>.*?)$" }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }

  mutate {
    strip => ["message"]
  }
  if [rest_msg] =~ "{" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    mutate {
    # remove the last occurence of }
      strip => ["rest_msg"]
      gsub => ["rest_msg", "[}](?=[^}]*$)", "" ]
      update => {"rest_msg" => "%{rest_msg}"}
      gsub => ["rest_msg", "[{](?=[^{]*$)", "" ]
      update => {"rest_msg" => "%{rest_msg}"}
      gsub => ["rest_msg","[{]", ""]
      gsub => ["rest_msg","[']", ""]
    }
    kv {
      source => "rest_msg"
      field_split => ","
      value_split => ":"
      target => "guard"
    }
  }
  mutate {
    rename => {"[guard][ alerttype]" => "rule.name"}
    rename => {"[guard][ type]" => "rule.category"}
    rename => {"[guard][ link]" => "rule.reference"}
    rename => {"[guard][ accountid]" => "cloud.account.id"}
    rename => {"[guard][ region]" => "cloud.availability_zone"}
    rename => {"[guard][ username]" => "user.name"}
    rename => {"[guard][ source]" => "source.ip"}
    rename => {"[guard][ destination]" => "destination.ip"}
  }
  mutate {
	  lowercase => [ "rule.name" ]
  }
  mutate {
    remove_field => ["rest_msg","log.date","[guard]","tmp", "pri"]
  }
  translate {
    field => "[event.severity_name]"
    destination => "[rule.category]"
    dictionary => {
      "ERRR" => "Security/Vulnerability"
      "INFO" => "Security/Activity"
      "NOTE" => "Security/Other"
      "WARN" => "Security/Warning"
    }
      fallback => "Others"
  }
}
output {
  pipeline { send_to => [enrichments] }
}