# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "aws.guardduty" }
    add_field => { "event.dataset" => "guardduty" }
    add_field => { "observer.vendor" => "aws" }
    add_field => { "observer.product" => "aws.guardduty" }
    add_field => { "observer.type" => "cloud security alerts" }
  }
  json {
    source => "message"
    target => "guard"
  }
  mutate {
    tag_on_failure => "mutate 1 failure"
    rename => { "[guard][severity]" => "event.severity_name" }
    rename => { "[guard][createdAt]" => "event.created" }
    rename => { "[guard][updatedAt]" => "event.modified" }
    rename => { "[guard][title]" => "rule.name" }
    rename => { "[guard][description]" => "rule.description" }
    rename => { "[guard][schemaVersion]" => "service.version" }
    rename => { "[guard][accountId]" => "cloud.account.id" }
    rename => { "[guard][region]" => "cloud.region" }
    rename => { "[guard][partition]" => "cloud.provider" }
    rename => { "[guard][id]" => "event.id" }
    rename => { "[guard][type]" => "rule.ruleset" }
    rename => { "[guard][resource][instanceDetails][availabilityZone]" => "cloud.availability_zone" }
    rename => { "[guard][resource][instanceDetails][imageDescription]" => "container.image.name" }
    rename => { "[guard][resource][instanceDetails][instanceId]" => "cloud.instance.id" }
    rename => { "[guard][resource][instanceDetails][instanceState]" => "service.state" }
    rename => { "[guard][resource][instanceDetails][instanceType]" => "cloud.machine.type" }
    rename => { "[guard][resource][instanceDetails][networkInterfaces][subnetId]" => "network.name" }
    rename => { "[guard][resource][instanceDetails][networkInterfaces][securityGroups][groupName]" => "user.group.name" }
    rename => { "[guard][resource][instanceDetails][networkInterfaces][securityGroups][groupId]" => "user.group.id" }
    rename => { "[guard][resource][accessKeyDetails][userName]" => "user.name" }
    rename => { "[service][action][awsApiCallAction][remoteIpDetails][organization][asn]" => "source.as.number" }
    rename => { "[service][action][awsApiCallAction][remoteIpDetails][organization][asnOrg]" => "source.as.organization.name" }
    rename => { "[service][action][awsApiCallAction][remoteIpDetails][ipAddressV4]" => "source.ip" }
    rename => { "[service][action][awsApiCallAction][serviceName]" => "service.name" }
    rename => { "[service][action][actionType]" => "rule.category" }
    rename => { "[service][action][portProbeAction][portProbeDetails][localPortDetails][port]" => "destination.port"	}
    rename => { "[service][detectorId]" => "rule.id" }
    rename => { "[service][eventFirstSeen]" => "event.start" }
    rename => { "[service][eventLastSeen]" => "event.end" }
  }
  if [service][action][portProbeAction][blocked] == "false" {
    mutate {
      tag_on_failure => "mutate 2 failure"
      add_field => { "event.action" => "allow" }
    }
  } else {
    mutate {
      tag_on_failure => "mutate 3 failure"
      add_field => { "event.action" => "blocked" }
    }
  }

  mutate {
    tag_on_failure => "mutate 4 failure"
    gsub => [
      "event.created", "T", " ",
      "event.modified", "T", " ",
      "event.start", "T", " ",
      "event.end", "T", " ",
      "event.created", "Z", "",
      "event.modified", "Z", "",
      "event.start", "Z", "",
      "event.end", "Z", ""
    ]
  }
### "event.created " = "2020-12-23T16:58:11.845Z",
 date {
      match => ["event.created","yyyy-MM-dd HH:mm:ss.SSS"]
      timezone => "GMT"
      locale => "en"
      target => "event.created"
      tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
      if ![log.original] {
    mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
      remove_field => ["event.created"]
    }
  }
### "event.modified" = "2020-12-23T16:58:11.845Z",
   date {
      match => ["event.modified","yyyy-MM-dd HH:mm:ss.SSS"]
      timezone => "GMT"
      locale => "en"
      target => "event.modified"
      tag_on_failure => "_dateparsefailure_em"
  }
  if "_dateparsefailure_em" in [tags]  {
      if ![log.original] {
        mutate {
          tag_on_failure => "mutate 5 failure"
          copy => { "message" => "log.original" }
        }
      }
    mutate {
      tag_on_failure => "mutate 6 failure"
      remove_field => ["event.modified"]
    }
  }
  # "event.start" = 2019-10-23T01:14:26Z
   date {
      match => ["event.start","yyyy-MM-dd HH:mm:ss.SSS"]
      timezone => "GMT"
      locale => "en"
      target => "event.start"
      tag_on_failure => "_dateparsefailure_es"
  }
  if "_dateparsefailure_es" in [tags]  {
      if ![log.original] {
    mutate {
        tag_on_failure => "mutate 7 failure"
        copy => { "message" => "log.original" }
      }
    }
    mutate {
      tag_on_failure => "mutate 8 failure"
      remove_field => ["event.start"]
    }
  }
  ### "event.end" = 2021-01-08T11:55:26Z
   date {
      match => ["event.end","yyyy-MM-dd HH:mm:ss.Z"]
      timezone => "GMT"
      locale => "en"
      target => "event.end"
      tag_on_failure => "_dateparsefailure_ee"
  }
  if "_dateparsefailure_ee" in [tags]  {
      if ![log.original] {
        mutate {
          tag_on_failure => "mutate 9 failure"
          copy => { "message" => "log.original" }
        }
      }
    mutate {
      tag_on_failure => "mutate 10 failure"
      remove_field => ["event.end"]
    }
  }

  mutate {
    tag_on_failure => "mutate 11 failure"
    remove_field => ["guard"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
