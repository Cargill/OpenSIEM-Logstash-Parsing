# Copyright [2022] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
    if [message] == "" or ![message] or [message] =~ "^#" {
    drop {}
  } 
  mutate {
    add_field => {
      "[event][module]" => "aws"
      "[event][dataset]" => "aws.cloudfront"
      "[cloud][provider]" => "aws"
      "[log][source][hostname]" => "aws_cloudfront"
    }
  }
  grok {
    match => {
      "message" => '(-|(?<[tmp][date]>.*?))	(-|(?<[tmp][time]>.*?))	(-|(?<[tmp][x_edge_location]>.*?))	(-|(?<[tmp][sc_bytes]>.*?))	(-|(?<[tmp][c_ip]>.*?))	(-|(?<[tmp][cs_method]>.*?))	(-|(?<[tmp][cs_host]>.*?))	(-|(?<[tmp][cs_uri_stem]>.*?))	(-|(?<[tmp][sc_status]>.*?))	(-|(?<[tmp][cs_referer]>.*?))	(-|(?<[tmp][cs_user_agent]>.*?))	(-|(?<[tmp][cs_uri_query]>.*?))	(-|(?<[tmp][cs_cookie]>.*?))	(-|(?<[tmp][x_edge_result_type]>.*?))	(-|(?<[tmp][x_edge_request_id]>.*?))	(-|(?<[tmp][x_host_header]>.*?))	(-|(?<[tmp][cs_protocol]>.*?))	(-|(?<[tmp][cs_bytes]>.*?))	(-|(?<[tmp][time_taken]>.*?))	(-|(?<[tmp][x_forwarded_for]>.*?))	(-|(?<[tmp][ssl_protocol]>.*?))	(-|(?<[tmp][ssl_cipher]>.*?))	(-|(?<[tmp][x_edge_response_result_type]>.*?))	(-|(?<[tmp][cs_protocol_version]>.*?))	(-|(?<[tmp][fle_status]>.*?))	(-|(?<[tmp][fle_encrypted_fields]>.*?))	(-|(?<[tmp][c_port]>.*?))	(-|(?<[tmp][time_to_first_byte]>.*?))	(-|(?<[tmp][x_edge_detailed_result_type]>.*?))	(-|(?<[tmp][sc_content_type]>.*?))	(-|(?<[tmp][sc_content_len]>.*?))	(-|(?<[tmp][sc_range_start]>.*?))	(-|(?<[tmp][sc_range_end]>.*?))'
    }
  }
  ## Did not map
    # "[tmp][time_to_first_byte]" => "0.183"
    # "[tmp][sc_content_len]" => ""
    # "[tmp][sc_range_start]" => ""
    # "[tmp][sc_range_end]" => ""
    # "[tmp][x_edge_location]" => "" = Lookig to add location enrichment
    # "[tmp][fle_status]" => ""
    # "[tmp][fle_encrypted_fields]" => ""
  mutate {
    add_field => {
      "[event][created]" => "%{[tmp][date]} %{[tmp][time]}"
    }
    rename => { 
      "[tmp][sc_bytes]" => "[http][response][bytes]"
      "[tmp][c_ip]" => "[source][ip]"
      "[tmp][cs_method]" => "[http][request][method]"
      "[tmp][cs_host]" => "[cloud][instance][id]"
      "[tmp][cs_uri_stem]" => "[url][path]"
      "[tmp][sc_status]" => "[http][response][status_code]"
      "[tmp][cs_referer]" => "[http][request][referrer]"
      "[tmp][sc_content_type]" => "[http][request][mime_type]"
      "[tmp][x_edge_response_result_type]" => "http.response.status_code"
      "[tmp][x_edge_result_type]" => "[event][outcome]"
      "[tmp][x_edge_detailed_result_type]" => "[event][reason]"
      "[tmp][cs_user_agent]" => "[user_agent][original]"
      "[tmp][cs_uri_query]" => "[url][query]"
      "[tmp][cs_cookie]" => "[http][cookie][name]"
      "[tmp][x_edge_request_id]" => "[event][id]"
      "[tmp][x_host_header]" => "[url][domain]"
      "[tmp][cs_protocol]" => "[url][scheme]"
      "[tmp][cs_bytes]" => "[http][request][bytes]"
      "[tmp][time_taken]" => "[event][duration]"
      "[tmp][x_forwarded_for]" => "[network][forwarded_ip]"
      "[tmp][ssl_protocol]" => "[tls][version_protocol]"
      "[tmp][ssl_cipher]" => "[tls][cipher]"
      "[tmp][cs_protocol_version]" => "[tls][next_protocol]"
      "[tmp][c_port]" => "[source][port]"
    }
  }
  # "event.created" => "2020-08-13 11:19:43"
  date {
    match => ["[event][created]", "yyyy-MM-dd HH:mm:ss"]
    timezone => "GMT"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  mutate {
    remove_field => [ "[tmp]" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}