# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "a10.proxy" }
    add_field => { "observer.vendor" => "a10" }
    add_field => { "observer.product" => "a10 loadbalancer" }
    add_field => { "observer.type" => "waf" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  if [actual_msg] == "a10" or [actual_msg] == "A10" {
    drop {}
  }
  if [actual_msg] =~ "^cef:" {
    grok {
      tag_on_failure => "_parsefailure_body1"
      match => { "actual_msg" => ".*?\|waf.*?\|(?<event.dataset>.*?)\|.*?rt=(?<event.created>.*?) src=(?<source.ip>.*?) spt=(?<source.port>\d+) dst=(?<destination.ip>.*?) dpt=(?<destination.port>\d+) dhost=(?<url.domain>.*?) cs1=(?<rule.name>.*?) cs2=(?<event.id>.*?) act=(?<event.action>.*?) cs3=(?<rule.ruleset>.*?) app=(?<network.protocol>.*?) requestMethod=(?<http.request.method>.*?) cn1=.*? request=(?<http.request.body.content>.*?) msg=(?<event.reason>.*?)$" }
    }
    mutate {
      add_field => { "url.full" => "%{network.protocol}://%{url.domain}:%{destination.port}%{http.request.body.content}" }
    } 
  } else if [actual_msg] =~ "^\[\w+.*?\]" {
    grok {
      tag_on_failure => "_parsefailure_dody2"
      match => { "actual_msg" => "^\[\w+.*?\] (?<network.protocol>.*?) (?<source.ip>.*?) \> (?<destination.ip>.*?):(?<destination.port>\d+) (?<event.action>.*?) \(\w+\)" }
    }
  } else if [actual_msg] =~ "a axapi session for" {
  
    grok {
      tag_on_failure => "_parsefailure_dody3"
      match => { "actual_msg" => '(?<event.created>\w+\s+\d+ \d+:\d+:\d+) .*?\> (?<event.action>.*?) \"(?<user.name>.*?)\" from (?<source.ip>\d+\.\d+\.\d+\.\d+) .*? is (?<service.id>\d+)\.' }
    }
  } else {
    mutate {
      add_field => { "agent.parse_rule" => "does not match rule" }
    }
  }
  mutate {
    gsub => [
      "event.created", "  ", " "
    ]
  }
  date {
    match => ["event.created" , "MMM dd yyyy HH:mm:ss", "MMM dd yyyy HH:mm:ss.SSS", "yyyy-mm-dd HH:mm:ss", "yyyy-mm-dd HH:mm:ss.SSS",     "MMM dd HH:mm:ss" ,"MMM dd HH:mm:ss.SSS","yyyy/MM/dd 'at' HH:mm:ss", "MMM d HH:mm:ss" ]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.created"]
    }
  }
  mutate {
    remove_field => ["actual_msg"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
