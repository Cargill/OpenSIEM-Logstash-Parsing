input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "azure eventhub insights audit logs" }
    add_field => { "event.dataset" => "azure eventhub insights audit logs" }
    add_field => { "observer.vendor" => "azure" }
    add_field => { "observer.product" => "azure eventhub insights" }
    add_field => { "observer.type" => "audit logs" }
  }
  json {
    source => "message"
    target => "azure"
  }
  split {
    field => "[azure][records]"
    target => "azaudit"
  }
  json_encode {
    source => "azaudit"
    target => "message"
  }

  mutate {
    rename => {"[azaudit][properties][initiatedBy][app][displayName]" => "user.name"}
    rename => {"[azaudit][operationName]"=>"rule.name"}
    rename => {"[azaudit][operationVersion]"=>"rule.version"}
    rename => {"[azaudit][category]"=>"rule.category"}
    rename => {"[azaudit][tenantId]"=>"rule.id"}
    rename => {"[azaudit][resultType]"=>"event.action"}
    rename => {"[azaudit][resultSignature]"=>"error.code"}
    rename => {"[azaudit][resultDescription]"=>"rule.description"}
    rename => {"[azaudit][correlationID]"=>"event.id"}
    rename => {"[azaudit][properties][initiatedBy][user][id]"=>"user.id"}
    rename => {"[azaudit][level]"=>"log.level"}
    rename => {"[azaudit][properties][targetResources][type]"=>"observer.type"}
    rename => {"[azaudit][callerIpAddress]"=>"source.ip"}
    rename => {"[azaudit][properties][initiatedBy][user][userPrincipalName]" => "source.user.email" }
    rename => {"[azaudit][properties][targetResources][0][userPrincipalName]" => "user.email"}
  }
  if [azaudit][properties][targetResources] != "" {
    ruby {
      code => "
        newvalue_list = []
        if event.get('[azaudit][properties][targetResources]').kind_of?(Array)
          event.get('[azaudit][properties][targetResources]').each do |item|
            if item['modifiedProperties'].kind_of?(Array)
              item['modifiedProperties'].each do |mp|
                if mp['newValue'] != ''
                  newvalue_list.push(mp['newValue'])
                end
              end
            end
          end
        end
        if !newvalue_list.empty?
          event.set('group.name', newvalue_list)
        end
      "
      tag_on_exception => "newvalue_ruby_block"
    }
  }
  mutate {
    remove_field => ["[azaudit]","[azure]"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}