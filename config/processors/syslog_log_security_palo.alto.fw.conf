# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "palo.alto.fw" }
    add_field => { "[event][dataset]" => "palo.alto.fw" }
    add_field => { "[observer][vendor]" => "palo alto" }
    add_field => { "[observer][product]" => "palo.alto.fw" }
    add_field => { "[observer][type]" => "firewall" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }

  if [actual_msg] =~ 'messagetype' {
    json {
      source => "message"
      target => "tmp"
    }
    dissect {
      mapping => {
        "[tmp][logevents][0][message]" => "%{?data}|%{[[event][provider]]}|%{?data}|%{[[rule][version]]}|%{[[rule][category]]}|%{[[event][type]]}|%{[event][severity]}|%{somedata}"
      }
      tag_on_failure => "dissect_failure_1"
    }
  }
  # Paulo Alto syslog CEF format to ECS
  # Reference: https://docs.paloaltonetworks.com/resources/cef.html
  # from Paulo Alto version 9.1
  # Syslog Header
  else {
    dissect {
      mapping => {
        "actual_msg" => "%{?data} %{?data} %{?data} %{[[host][hostname]]} %{?data}|%{[[event][provider]]}|%{?data}|%{[[rule][version]]}|%{[[rule][category]]}|%{[[event][type]]}|%{[event][severity]}|%{somedata}"
      }
      tag_on_failure => "dissect_failure_2"
    }
  }
  mutate {
    lowercase => [ "[event][type]" ]
  }
  kv {
    source => "somedata"
    field_split => ";"
    value_split => "="
    target => "fw"
    trim_key => "$ "
  }
  mutate {
    # General
      # need to review actual logs, most are redundant info and are present in other fields
        # cnt = ECS v1.5 does not have a count field
        # PanOSHTTP2Con=$http2_connection
        # PanLinkChange=$link_change_count
        # PanPolicyID=$policy_id
        # PanLinkDetail=$link_switches
        # PanSDWANCluster=$sdwan_cluster
        # PanSDWANDevice=$sdwan_device_type
        # PanSDWANClustype=$sdwan_cluster_type
        # PanSDWANSite=$sdwan_site
        # PanDynamicUsrgrp=$dynusergroup_name
        # PanOSSrcUUID=$src_uuid
        # PanOSDstUUID=$dst_uuid
        # PanOSTunnelID=$tunnelid
        # PanOSMonitorTag=$monitortag
        # PanOSParentSessionID=$parent_session_id
        # PanOSParentStartTime=$parent_start_time
        # PanOSTunnelType=$tunnel
        # PanOSSCTPAssocID=$assoc_id
        # PanOSSCTPChunks=$chunks
        # PanOSSCTPChunkSent=$chunks_sent
        # PanOSSCTPChunksRcv=$chunks_received
        # PanOSDGl1=$dg_hier_level_1
        # PanOSDGl2=$dg_hier_level_2
        # PanOSDGl3=$dg_hier_level_3
        # PanOSDGl4=$dg_hier_level_4
        # PanOSVsysName=$vsys_name
        # PanOSPacketsReceived=$pkts_received
        # PanOSPacketsSent=$pkts_sent
        # flexString1=$flags
        # cnt=$repeatcnt
        # PanOSActionFlags=$actionflags
        # PanOSThreatCategory=$thr_category
        # PanOSContentVer=$contentver
        # PanOSHTTPHeader=$http_headers
        # rename => {"[fw][PanOSURLCatList]" => "???"}
    rename => {"[fw][msg]" => "[event][original]" }
    rename => {"[fw][fname]" => "[file][name]" }
    rename => {"[fw][PanOSPPID]" => "[process][parent][ppid]" }
    rename => {"[fw][fileId]" => "[event][reference]" }
    rename => {"[fw][request]" => "[url][full]" }
    rename => {"[fw][PanOSRuleUUID]" => "[rule][uuid]" }
    rename => {"[fw][dvchost]" => "[observer][hostname]" }
    rename => {"[fw][externalId]" => "[error][id]" }
    rename => {"[fw][deviceInboundInterface]" => "[observer][ingress][interface][name]" }
    rename => {"[fw][deviceOutboundInterface]" => "[observer][egress][interface][name]" }
    rename => {"[fw][deviceExternalId]" => "[observer][serial_number]" }
    rename => {"[fw][src]" => "[source][ip]" }
    rename => {"[fw][dst]" => "[destination][ip]" }
    rename => {"[fw][cs3]" => "[cloud][instance][name]" }
    rename => {"[fw][suser]" => "[source][user][name]" }
    rename => {"[fw][duser]" => "[destination][user][name]" }
    rename => {"[fw][spt]" => "[source][nat][port]" }
    rename => {"[fw][dpt]" => "[destination][port]" }
    rename => {"[fw][sourceTranslatedPort]" => "[source][nat][port]" }
    rename => {"[fw][destinationTranslatedPort]" => "[destination][nat][port]" }
    rename => {"[fw][sourceTranslatedAddress]" => "[source][nat][ip]" }
    rename => {"[fw][destinationTranslatedAddress]" => "[destination][nat][ip]" }
    rename => {"[fw][shost]" => "[source][address]" }
    rename => {"[fw][requestClientApplication]" => "[user_agent][original]" }
    rename => {"[fw][reason]" => "[error][message]" }
    rename => {"[fw][proto]" =>  "[network][transport]" }
    rename => {"[fw][flexNumber1]" => "[network][bytes]" }
    rename => {"[fw][in]" =>  "[source][bytes]" }
    rename => {"[fw][out]" =>  "[destination][bytes]" }
    rename => {"[fw][field]" => "[vulnerability][report_id]" }
    rename => {"[fw][act]" => "[event][action]" } # Traffic : $action , Threat: $action, Config: $cmd
    rename => {"[fw][app]" => "[network][protocol]" } # $app
    rename => {"[fw][c6a2]" => "[client][address]" } # Represents an IPv6 address
    rename => {"[fw][cfp1]" => "[error][message]" } # $unknown_proto
    rename => {"[fw][cfp2Label]" => "[error][type]" } # $unknown_proto
  }
    # Traffic  logs
  if "[event][type]" == "traffic" {
    mutate {
      rename => {"[fw][cs1]" => "[rule][name]" }
      rename => {"[fw][cn3]"  => "[event][duration]" } # $elapsed
      rename => {"[fw][cs2]" => "[rule][category]" } # Traffic, treat: $category
      rename => {"[fw][cs6]" => "[rule][ruleset]" }
      rename => {"[fw][cs4]" => "[network][name]" }  # Traffic, Threat, URL, Data, WildFire, Tunnel Inspection: $from
      rename => {"[fw][cn1l]" => "[service][id]" }  # Traffic, Threat, Tunnel Inspection: $sessionid
      rename => {"[fw][cn2]" => "[network][packets]" } # Traffic, Threat, Tunnel Inspection: $packets
      rename => {"[fw][cs5]" => "[network][inner][vlan][name]" } # Traffic, Threat, URL, Data, WildFire, Tunnel Inspection: $to zone
    }
  }
    # Threat logs
  if [event][type] == "threat" {
    mutate {
      # rename => {"[fw][cat]" => "[threat][tactic][id] or [threat][technique][id]"????? }
      rename => {"[fw][cs1]" => "[rule][name]" }
      rename => {"[fw][cs2]" => "[rule][category]" }
      rename => {"[fw][flexString2]" => "[network][direction]" } # Threat: $direction
      rename => {"[fw][cs6]" => "[rule][ruleset]" }
      rename => {"[fw][cs4]" => "[network][name]" }  # Traffic, Threat, URL, Data, WildFire, Tunnel Inspection: $from
      rename => {"[fw][cn1l]" => "[service][id]" }  # Traffic, Threat, Tunnel Inspection: $sessionid
      rename => {"[fw][cn2]" => "[network][packets]" } # Traffic, Threat, Tunnel Inspection: $packets
      rename => {"[fw][cs5]" => "[network][inner][vlan][name]" } # Traffic, Threat, URL, Data, WildFire, Tunnel Inspection: $to zone
    }
  }
    # URL logs
  if [event][type] == "url" {
    mutate {
      rename => {"[fw][requestContext]" => "[http][response][body][content]" }
      rename => {"[fw][requestMethod]" => "[http][request][method]" }
      rename => {"[fw][PanOSXForwarderfor]" => "[source][nat][ip]" }
      rename => {"[fw][PanOSReferer]" => "[http][request][referrer]" }
      rename => {"[fw][cs6]" => "[rule][ruleset]" }
      rename => {"[fw][cs4]" => "[network][name]" }  # Traffic, Threat, URL, Data, WildFire, Tunnel Inspection: $from
      rename => {"[fw][cn1l]" => "[service][id]" }  # Traffic, Threat, Tunnel Inspection: $sessionid
    }
  }
    # Data logs
  if [event][type] == "data" {
    mutate {
      rename => {"[fw][cs6]" => "[rule][ruleset]" }
      rename => {"[fw][cs4]" => "[network][name]" }  # Traffic, Threat, URL, Data, WildFire, Tunnel Inspection: $from
      rename => {"[fw][cn1l]" => "[service][id]" }  # Traffic, Threat, Tunnel Inspection: $sessionid
    }
  }
    # Wildfire logs
  if [event][type] == "wildfire" {
    mutate {
      # oldFileId=$reportid
      rename => {"[fw][cs4]" => "[network][name]" }  # Traffic, Threat, URL, Data, WildFire, Tunnel Inspection: $from
      rename => {"[fw][cn1l]" => "[service][id]" }  # Traffic, Threat, Tunnel Inspection: $sessionid
      rename => {"[fw][filePath]" => "[package][reference]" }
      rename => {"[fw][fileHash]" => "[file][hash][md5]" }
      rename => {"[fw][fileType]" => "[file][type]" }
      rename => {"[fw][suid]" => "[source][user][email]"  }
      rename => {"[fw][duid]" => "[destination][user][email]" }
      rename => {"[fw][cs6]" => "[rule][ruleset]" }
    }
  }
    # Config log
  if [event][type] == "config" {
    mutate {
      rename => {"[fw][destinationServiceName]" => "[service][name]" }
      # rename => {"[fw][cs1]" => "???" } # $before-change-detail
      rename => {"[fw][cs2]" => "[rule][description]" } # Config: after-change-detail
    }
  }
    # System logs
  if [event][type] == "system" {
    mutate {
      # flexString2 = System: $module
      rename => {"[fw][cat]" => "[event][id]" }
    }
  }
    # HIP Match
  if [event][type] == "hip match" {
    mutate {
      rename => {"[fw][cat]" => "[cloud][instance][name]" }
      rename => {"[fw][PanOSHostID]" => "[host][hostname]" }
      rename => {"[fw][cs2]" => "[host][os][name]" } # HIP: $os
      rename => {"[fw][cn2]" => "[cloud][instance][id]" }  # Correlation, HIP Match, User-ID: $vsys_id
    }
  }

    # Authentication
  if [event][type] == "authentication" {

    mutate {
      # cs1=$serverprofile
      # PanOSDesc=$desc
      # flexString2 = Authentication: $vendor
      rename => {"[fw][cn2]"  => "[user][id]" } # Authentication: $authid
      rename => {"[fw][cs2]" => "[user][name]" } # Authentication: $normalize_use
      rename => {"[fw][cs4]" => "[rule][ruleset]" }  #  Authentication: $authpolicy
      rename => {"[fw][cs5]" => "[host][type]" } # Authentication: $clienttype
      rename => {"[fw][cs6]" => "[event][action]" }  # Authentication, Tunnel Inspection: Log Action
      rename => {"[fw][cn1]" => "[process][pid]" } # Auth, User-id: $factorno
    }
  }
    # User-Id
  if [event][type] == "user-id" {
    mutate {
      # PanOSUGFlags=$ugflags
      # PanOSUserBySource=$userbysource
      # rename => {"[fw][cs1]" => "???" } # $factortype
      rename => {"[fw][cn3]"  => "[event][duration]" } #  $timeout
      rename => {"[fw][cs4]" => "[dns][question][name]" } # User-ID: $datasourcename
      rename => {"[fw][cs5]" => "[service][name]" } # User-ID: $datasource
      rename => {"[fw][cs6]" => "[host][type]" } # User-ID: Data Source Type
      rename => {"[fw][cn2]" => "[cloud][instance][id]" }  # Correlation, HIP Match, User-ID: $vsys_id
    }
  }
    # IP Tag
  if [event][type] == "ip tag" {
    mutate {
      # PanOSTagName=$tag_name
      # PanOSEventID=$event_id
      # PanOSDataSourceType=$datasource_type
      # PanOSDataSourceSubType=$datasource_subtype
    }
  }

    # Tunnel
  if [event][type] == "tunnel" {
    mutate {
      # flexNumber2=$max_encap
      # cfp2=$strict_check
      # PanOSTunnelFragment=$tunnel_fragment
      # PanOSTunneInspectionRule=$tunnel_insp_rule "Maybe rule."
      # PanOSRmtUserIP=$remote_user_ip
      # PanOSRmtUserID=$remote_user_id
      # rename => {"[fw][cat]" => "???" } Traffic, TunnelInspection: $action_source cat=from-policy
      rename => {"[fw][cs1]" => "[rule][name]" }
      rename => {"[fw][cs4]" => "[network][name]" }  # Traffic, Threat, URL, Data, WildFire, Tunnel Inspection: $from
      rename => {"[fw][cn1l]" => "[service][id]" }  # Traffic, Threat, Tunnel Inspection: $sessionid
      rename => {"[fw][cs2]" => "[service][type]" } # Tunnel Inspection: $tunnel
      rename => {"[fw][cs6]" => "[event][action]" }  # Authentication, Tunnel Inspection: Log Action
      rename => {"[fw][cn2]" => "[network][packets]" } # Traffic, Threat, Tunnel Inspection: $packets
      rename => {"[fw][cs5]" => "[network][inner][vlan][name]" } # Traffic, Threat, URL, Data, WildFire, Tunnel Inspection: $to zone
    }
  }
  # Correlation
  if [event][type] == "correlation" {
    mutate {
       # severity=$severity = redundant with header
       rename => {"[fw][cn3]" => "[event][id]" } # $object_id
       rename => {"[fw][cn2]" => "[cloud][instance][id]" }  # Correlation, HIP Match, User-ID: $vsys_id
    }
  }

 # GTP
  if [event][type] == "gtp" {
    mutate {

    }
  }

 # SCTP
  if [event][type] == "ip tag" {
    mutate {
      # PanOSGTPEventType=$event_type
      # PanOSMSISDN=$msisdn
      # PanOSRadioTech=$rat
      # PanOSGTPMsgType=$msg_type
      # PanOSEndUserIP=$end_ip_addr
      # PanOSTunnelEndptID1=$teid1
      # PanOSTunnelEndptID2=$teid2
      # PanOSGTPInterface=$gtp_interface
      # PanOSGTPCause=$cause_code
      # PanOSServingCntryMCC=$mcc
      # PanOSServingNetMNC=$mnc
      # PanOSAreaCode=$area_code
      # PanOSCellID=$cell_id
      # PanOSGTPEventCode=$event_code
      # PanOSTunnelID=$imsi
      # PanOSMonitorTag=$imei
      # PanOSChunkType=$sctp_chunk_type
      # PanOSSCTPVerTag1=$verif_tag_1
      # PanOSSCTPVerTag2=$verif_tag_2
      # PanOSSCTPCauseCode=$sctp_cause_code
      # PanOSDiameterApp=$diam_app_id
      # PanOSDiameterCmdCode=$diam_cmd_code
      # PanOSDiameterAVPCode=$diam_avp_code
      # PanOSSCTPStreamID=$stream_id
      # PanOSSCTPAssocEndReason=$assoc_end_reason
      # PanOSOpCode=$op_code
      # PanOSSCCPCallingPartySSN=$sccp_calling_ssn
      # PanOSSCCPCallingGT=$sccp_calling_gt
      # PanOSSCTPFilter=$sctp_filter
      rename => {"[fw][PanOSAPName]" => "[service][name]" }
      rename => {"[fw][cn1l]" => "[service][id]" }  # Traffic, Threat, Tunnel Inspection: $sessionid
    }
  }

  # cleant up msg fild fot auth
  if [event][type] == "system" and [rule][category] == "auth" {
    grok {
      match => { "[event][original]" => "(.*?user '(?<[source][user][name]>.*?)')?(.*?(client '| from: )(?<[source][address]>.*)(\.|'))?" }
      timeout_millis => 500
    }
  }

  # Dates
  mutate {
    rename => {"[fw][rt]" => "[event][created]" }
  }
  if [fw][end] and [fw][end] != "" {
    mutate {
      rename => {"[fw][end]" => "[event][end]" }
    }
  }
    if [fw][start] and [fw][start] != "" {
    mutate {
      rename => {"[fw][start]" => "[event][start]" } # need date format
    }
  }
  # verify cfp3 and cfp4 are actual date fields
  # if [fw][cfp3] and [fw][cfp3] != "" {
  #   mutate {
  #     rename => {"[fw][cfp3]" => "[event][start]" } # need date format
  #   }
  # }
  # if [fw][cfp4] and [fw][cfp4] != "" {
  #   mutate {
  #     rename => {"[fw][cfp4]" => "[event][end]" } # need date format
  #  }
  # }

  mutate {
        gsub => [
          "[event][created]", " gmt", "",
          "[event][start]", " gmt", "",
          "[event][end]", " gmt", "",
          "[event][created]", " GMT", "",
          "[event][start]", " GMT", "",
          "[event][end]", " GMT", ""
        ]
  }
  date {
    match => ["[event][created]","MMM dd yyyy HH:mm:ss","UNIX", "UNIX_MS"]
      timezone => "GMT"
      locale => "en"
      target => "[event][created]"
  }

  if [event][end] and [event][end] != "" {
    date {
      match => ["[event][end]","MMM dd yyyy HH:mm:ss","UNIX", "UNIX_MS"]
      timezone => "GMT"
      locale => "en"
      target => "[event][end]"
    }
  }
  if [event][start] and [event][start] != "" {
    date {
      match => ["[event][start]","MMM dd yyyy HH:mm:ss","UNIX", "UNIX_MS"]
      # "[event][created]" => "aug 10 2020 20:17:52 gmt",
      timezone => "GMT"
      locale => "en"
      target => "[event][start]"
    }
  }
  mutate {
    remove_field => ["log_time", "somedata", "fw", "tmp", "actual_msg"]
  }
  # Do not remove this, due to internal need.
  if [host][hostname] and ([host][hostname] != "" or [host][hostname][0] != "" ){
    mutate {
      copy => { "[host][hostname]" => "[host][name]" }
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
