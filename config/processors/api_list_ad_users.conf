# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
# Use ad script to query user accounts info in ad to use with memcahe enrichment
  json {
    source => message
    target => tmp
  }
  mutate{
    add_field => {
      "[event][module]" => "active_directory"
      "[event][dataset]" => "active_directory.users"
      "[log][source][hostname]" => "%{[agent][name]}"
    }
  }
  mutate {
    rename => { "[tmp][_id]" => "_id" }
    rename => { "[tmp][file.path]" => "[file][path]" }
    rename => { "[tmp][event.ingested]" => "[event][ingested]" }
    rename => { "[tmp][user.full_name]" => "[user][full_name]" }
    rename => { "[tmp][user.name]" => "[user][name]" }
    rename => { "[tmp][user.id]" => "[user][id]" }
    rename => { "[tmp][user.effective.domain]" => "[user][effective][domain]" }
    rename => { "[tmp][user.domain]" => "[user][domain]" }
    rename => { "[tmp][user.email]" => "[user][email]" }
    rename => { "[tmp][user.description]" => "[user][description]" }
    rename => { "[tmp][user.office]" => "[user][office]" }
    rename => { "[tmp][user.telephone]" => "[user][telephone]" }
    rename => { "[tmp][user.city]" => "[user][city]" }
    rename => { "[tmp][user.stat]" => "[user][state]" }
    rename => { "[tmp][user.country]" => "[user][country]" }
    rename => { "[tmp][user.title]" => "[user][title]" }
    rename => { "[tmp][user.business.unit]" => "[user][business][unit]" }
    rename => { "[tmp][user.company]" => "[user][company]" }
    rename => { "[tmp][tmp_user.roles][value]" => "[user][roles]" }
    rename => { "[tmp][tmp_user.directreports][value]" => "[user][directreports]" }
    rename => { "[tmp][user.manager]" => "[user][manager]" }
  }
  grok {
        match => { "[user][domain]" => "^(?<[tmp][sub_domain]>.*?)\." }
      }
  mutate {
    replace => { "[@metadata][output]" => "list_ad_users_%{[tmp][sub_domain]}" }
    add_field => { "[@metadata][document_id]" => "%{_id}" }
  }
  mutate {
      remove_field => [ "tmp", "message", "host", "_id" ] 
  }
  # 2022-09-15t03:36:13.000z
  date {
    match => [ "[event][ingested]", "yyyy-MM-dd't'HH:mm:ss.SSS'z'" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_ei"
  }
  if "_dateparsefailure_ei" in [tags]  {
    mutate {
     remove_field => ["[event][ingested]"]
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}