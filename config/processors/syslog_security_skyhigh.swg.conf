# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
# MWG requires a specific configuration to receive logs in the format being parsed below. You can find the configuration/
# setup details in the "doc/log_configurations" directory.
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "skyhigh" }
    add_field => { "[event][dataset]" => "skyhigh.swg" }
    copy => { "message => "[event][original]" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
    
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  ### If regular MWG traffic log
  if [message] =~ "mprob=" {
    dissect {
      tag_on_failure => "_dissectfailure_2"
      mapping => {
        "actual_msg" => '%{?data} ts=%{[[event][created]]},  sip=%{[[source][ip]]},  usr=%{[[user][name]]},  sprt=%{[[source][port]]},  stat=%{[[http][response][status_code]]},  cat=%{[[rule][category]]},  sev=%{[[event][severity_name]]},  media=%{[[http][request][body][content]]},  rbytes=%{[[http][response][bytes]]},  sbytes=%{[[http][request][bytes]]},  agent=%{[[user_agent][original]]},  virus=%{[[rule][name]]},  mprob=%{[[event][risk_score]]},  blockid=%{[[rule][id]]},  block=%{[[rule][ruleset]]},  app=%{[[network][application]]},  dip=%{[[destination][ip]]},  dprt=%{[[destination][port]]},  sslcertserialclient=%{[[tls][client][certificate]]},  sslcipherclient=%{[[tls][client][supported_ciphers]]},  sslversionclient=%{[[tls][client][x509][version_number]]},  sslcnsrvr=%{[[tls][server][issuer]]},  sslsha1digestsrvr=%{[[tls][server][hash][sha1]]},  sslsha2digestsrvr=%{[[tls][server][hash][sha256]]},  sslsigmethodserver=%{[[tls][server][x509][signature_algorithm]]},  sslciphersrvrt=%{[tls][cipher]},  sslversionsrvr=%{[[tls][version]]},  rule=%{[rule][uuid]},  method=%{tmp}'
      }
    }
  } else if [message] =~ "method=" {
    dissect {
      tag_on_failure => "_dissectfailure_3"
      mapping => {
        "actual_msg" => '%{?data} ts=%{[[event][created]]},  sip=%{[[source][ip]]},  usr=%{[[user][name]]},  sprt=%{[[source][port]]},  stat=%{[[http][response][status_code]]},  cat=%{[[rule][category]]},  sev=%{[[event][severity_name]]},  media=%{[[http][request][body][content]]},  rbytes=%{[[http][response][bytes]]},  sbytes=%{[[http][request][bytes]]},  agent=%{[[user_agent][original]]},  virus=%{[[rule][name]]},  blockid=%{[[rule][id]]},  block=%{[[rule][ruleset]]},  app=%{[[network][application]]},  dip=%{[[destination][ip]]},  dprt=%{[[destination][port]]},  sslcertserialclient=%{[[tls][client][certificate]]},  sslcipherclient=%{[[tls][client][supported_ciphers]]},  sslversionclient=%{[[tls][client][x509][version_number]]},  sslcnsrvr=%{[[tls][server][issuer]]},  sslsha1digestsrvr=%{[[tls][server][hash][sha1]]},  sslsha2digestsrvr=%{[[tls][server][hash][sha256]]},  sslsigmethodserver=%{[[tls][server][x509][signature_algorithm]]},  sslciphersrvrt=%{[tls][cipher]},  sslversionsrvr=%{[[tls][version]]},  rule=%{[rule][uuid]},  method=%{tmp}'
      }
    }
    ### MWG error logs
  } else if [message] =~ "Severity: " {
    mutate {
      gsub => ["message",'[\"]',","]
    }
    dissect {
      tag_on_failure => "_dissectfailure_4"
      mapping => {
        "actual_msg" => "%{?data} %{?data} %{?data} %{ob[server][address]]} %{rest_msg}"
      }
    }
    if [rest_msg] =~ "user" {
      dissect {
        tag_on_failure => "_dissectfailure_5"
        mapping => {
          rest_msg => "%{?data},%{?data},%{?data},%{[[error][message]]},%{?data},%{?data} ,%{[[user][name]]}, (%{[[source][ip]]}),%{?data},Severity: %{[[log][level]]}"
        }
      }
    } else {
      dissect {
        tag_on_failure => "_dissectfailure_6"
        mapping => {
          rest_msg => "%{?data},%{?data},%{?data},%{[[event][reason]]},%{?data},%{[[error][message]]},%{?data},Severity: %{[[log][level]]}"
        }
      }
    }
  }
  mutate {
      gsub => [
        "[event][created]", "\[", "",
        "[event][created]", "\]", ""
      ]
  }
  if [tmp] !~ "ref=.*?$" {
    mutate {
      # identify long uri i.e. possible DNS exfiltration
      add_tag => "long uri"
    }
  }
  grok {
    match => { "tmp" => "^(?<[http][request][method]>.*?) (?<[url][full]>.*?)( |$)((?<[tls][next_protocol]>.*?))?(,|)(  ref=(?<[http][request][referrer]>.*?))?( |)$"}
    tag_on_failure => "_grokparsefailure_url"
    timeout_millis => 500
  }

  if [event][created] {
    date {
      # "26/aug/2020:19:35:09.533 +0000"
      # ts=[12/oct/2020:17:24:01 +0000]
      match => ["[event][created]","MMM dd HH:mm:ss","ISO8601","dd/MMM/yyyy:HH:mm:ss ZZ"  ]
      timezone => "GMT"
      locale => "en"
      target => "[event][created]"
      tag_on_failure => "_dateparsefailure_ec"
    }
    if "_dateparsefailure" in [tags]  {
      mutate {
        remove_field => ["[event][created]"]
      }
    }
  }

  mutate {
    remove_field => [ "actual_msg", "tmp", "rest_msg"]
  }

  translate {
    source => "[[rule][id]]"
    target => "[rule][description]"
    dictionary => {
      "0" => "Allowed"
      "1" => "Internal error"
      "2" => "Default message template being used for an action"
      "3" => "Internal URL error"
      "10" => "Blocked due to an entry in the URL database"
      "14" => "Blocked according to URL ing by expression"
      "15" => "Blocked by the Real-Time Classifier"
      "20" => "Blocked due to lack of content type"
      "22" => "Blocked due to the media type"
      "30" => "Blocked due to a multi-part archive having been found"
      "35" => "Blocked due to an archive not handled by the Archive Handler"
      "80" => "Blocked due to a virus having been found"
      "81" => "Blocked due to unauthorized access"
      "82" => "Blocked due to a bad request"
      "85" => "Blocked due to an internal anti-malware error"
      "92" => "Blocked due to expiration of a certificate"
      "93" => "Blocked due to a revoked certificate"
      "94" => "Blocked due to a forbidden certificate authority (CA)"
      "95" => "Blocked due to an unknown certificate authority (CA)"
      "97" => "Blocked due to a self-signed certificate"
      "98" => "Blocked due to a common name mismatch"
      "102" => "Blocked due to an unspecified certificate incident"
      "103" => "Blocked due to CONNECT not allowed"
      "104" => "Blocked due to the reverse proxy destination not being allowed"
      "140" => "Blocked due to an internal DLP  error"
      "150" => "Blocked due to an internal Application Control  error"
      "151" => "Blocked due to a request belonging to an application that is not allowed"
      "160" => "Blocked due to missing policy for Web Hybrid"
      "161" => "Blocked due to web access not being allowed by Web Hybrid"
      "162" => "Blocked due to URL ing by Web Hybrid"
      "200" => "Blocked due to the coaching session of a user having been exceeded"
      "201" => "Blocked due to the time quota session of a user having been exceeded"
      "202" => "Blocked due to the time quota for a user having been exceeded"
      "203" => "Blocked due to the volume quota session of a user having been exceeded"
      "204" => "Blocked due to the volume quota for a user having been exceeded"
      "205" => "Blocked due to the authorized override session of a user having been exceeded"
      "206" => "Blocked due to the blocking session of a user being active"
      "300" => "Blocked due to a quota redirect"
      "301" => "Blocked due to an authentication redirect"
      "400" => "Blocked due to an authorized override redirect"
    }
    fallback => "Others"
  }
  if [rule][description] =~ "Allowed" {
    mutate {
      add_field => { "[event][action]" => "allowed" }
    }
  }
  if [rule][description] =~ "Blocked" {
    mutate {
      add_field => { "[event][action]" => "denied" }
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
