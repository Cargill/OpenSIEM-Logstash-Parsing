# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "f5" }
    add_field => { "[event][dataset]" => "f5.loadbalancer" }
  }
  mutate {
    copy => { "message" => "[log][original]" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  mutate {
    strip => ["actual_msg"]
  }
  if [message] =~ "DBUG" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 1 (dropped)" }
    }
    drop {}
  }
  if [actual_msg] =~ "httpd" and [actual_msg] =~ "auth token request" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 2" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data} %{[[process][name]]}[%{[[process][pid]]}]: %{?data} [%{?data} %{[[source][ip]]}] %{[[rule][description]]}"
      }
    }
  }
    # escape forward slash else it would be considered as delimeter
  else if [actual_msg] =~ "I\/O error occurred while writing" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 3" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data} %{[[process][name]]}[%{[[process][pid]]}]: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "No members available for pool" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 4" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data} %{[[process][name]]}[%{[[process][pid]]}]: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "ICMP error limit reached" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 5" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data} %{[[process][name]]}[%{[[process][pid]]}]: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "httpd" and [actual_msg] =~ "AUDIT" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 6" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data} %{[[process][name]]}[%{[[process][pid]]}]: %{?data} - %{?data} %{[[user][id]]} %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~  "mcpd" and [actual_msg] =~ "AUDIT" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 7" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data} %{[[process][name]]}[%{[[process][pid]]}]: %{?data}, %{?data} %{[[user][id]]} %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "monitor status down" or [actual_msg] =~ "monitor status up" or [actual_msg] =~ "SNMP_TRAP" or [actual_msg] =~ " tmm" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 8" }
  }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data} %{[[process][name]]}[%{[[process][pid]]}]: %{?[[session][id]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~  "monitor status up" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 9" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data} %{[[process][name]]}[%{[[process][pid]]}]: %{?[[session][id]]}: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "notice run-parts" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 10" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data}-%{[[process][name]]}[%{[[process][pid]]}]: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "info logger:" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 11" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[source][address]]} %{?data} %{[[process][name]]}: [%{?data}] %{[[source][ip]]} %{?data} %{?data} %{[[url][path]]} %{[[event][id]]}"
      }
    }
  }
  else if [actual_msg] =~ "authentication failure" {
    dissect {
      mapping => {
        actual_msg => "%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{[[destination][address]]} %{?data} %{[[process][name]]}[%{[[process][pid]]}]: %{auth_failure}"
      }
    }
    if [auth_failure] =~ "pam_unix" {
      mutate {
        add_field => { "[agent][parse_rule]" => "rule 12a" }
      }
      dissect {
        mapping => {
          auth_failure => "%{?data}: %{[[rule][description]]}; %{?data} ruser=%{[[user][name]]} rhost=%{[[source][ip]]}"
        }
      }
    }
    else if [auth_failure] =~ "auth_pam" {
       mutate {
        add_field => { "[agent][parse_rule]" => "rule 12b" }
      }
      dissect {
        mapping => {
          auth_failure => "[%{data}] [%{data}] [client %{[[source][ip]]}:%{[[source][port]]}] %{?data} user '%{[[user][name]]}' %{?data} - %{[[rule][description]]}, referer: %{[[url][full]]}"
        }
      }
    }
  }

  date {
    match => ["[event][created]" , "MMM dd HH:mm:ss"]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
  }
  mutate {
    remove_field => ["actual_msg","[log][date]", "auth_failure"]
  }
  translate {
    source => "[[event][severity_name]]"
    target => "[rule][category]"
    dictionary => {
      "ERRR" => "Security/Failed Activity"
      "INFO" => "Security/Activity"
      "NOTE" => "Security/Activity"
      "WARN" => "Security/Warning"
    }
    fallback => "Others"
  }
}
output {
  pipeline { send_to => [enrichments] }
}
