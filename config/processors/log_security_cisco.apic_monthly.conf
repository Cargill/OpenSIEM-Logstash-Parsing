input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    strip => ["message"]
    gsub => [
      "message", "  ", " "
    ]
  }
  if [agent.type] == "logstash" {
    mutate {
      add_field => { "agent.parse_rule" => "syslog header" }
    }
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "<%{pri}>%{event.created} %{+event.created} %{+event.created} %{+event.created} %{service.type}: %{event.code}: %{rest_msg}"
      }
    }
  } else {
    mutate {
      add_field => { "agent.parse_rule" => "syslog header" }
    }
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "%{?data} {%{?data}} <%{pri}>%{event.created} %{+event.created} %{+event.created} %{+event.created} %{service.type}: %{event.code}: %{rest_msg}"
      }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }

  if [rest_msg] =~ "authentication failure" {
    mutate {
      add_field => { "agent.parse_rule" => "rule 1" }
    }
    dissect {
      tag_on_failure => "_dateparsefailure_rule_1"
      mapping => {
        rest_msg => "%{service.type}: %{event.action}; logname=%{user.name} uid=%{user.id} %{?data} rhost=%{source.ip}"
                   # pam_unix(auth): authentication failure; logname= uid=2008 euid=2008 tty=ssh ruser=##### rhost=10.47.112.120
      }
    }
  } else if [rest_msg] =~ "packet flags are incorrect" {
    mutate {
      add_field => { "agent.parse_rule" => "rule 2" }
    }
    dissect {
      tag_on_failure => "_dateparsefailure_rule_2"
      mapping => {
        rest_msg => "%{source.ip}:%{source.port} - %{destination.ip}:%{destination.port} - %{rule.description}"
      }
    }
  }
  else  {
    mutate {
      add_field => { "agent.parse_rule" => "other" }
    }
    dissect {
      tag_on_failure => "_dateparsefailure_other"
      mapping => {
        rest_msg => "%{source.ip}:%{source.port} - %{destination.ip}:%{destination.port} - %{rule.description}"
      }
    }
  }
  # event.created = "2021 jan 5 15:33:28"
    date {
      match => ["event.created","yyyy MMM d HH:mm:ss"]
      timezone => "GMT"
      locale => "en"
      target => "event.created"
      tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
      if ![log.original] {
    mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
      remove_field => ["event.created"]
    }
  }

  mutate {
    remove_field => ["rest_msg"]
    add_field => { "ecs.version" => "1.6" }
  }

}
output {
  pipeline { send_to => [enrichments] }
}