input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "cisco.wass" }
    add_field => { "event.dataset" => "cisco.waas" }
    add_field => { "observer.vendor" => "cisco" }
    add_field => { "observer.product" => "cisco.waas" }
    add_field => { "observer.type" => "wan_accelerator" }
  }
  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" {
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "<%{pri}> %{rest_msg}"
      }
    }
  } else {
  ### Filebeats udp or tcp in
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "%{?data} {%{?data}} <%{pri}> %{rest_msg}"
      }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  mutate{
    remove_field => ["pri"]
  }
  mutate {
    strip => ["message"]
  }
  dissect {
    mapping => {
      message => "%{log.date} {%{?data}} <%{event.severity_name}>%{rest_msg}"
    }
  }
  if [event.severity_name] =~ "ERRR" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.start->} %{+event.start} %{+event.start} %{?data}: %{?data}: %{source.ip} - %{destination.ip} %{rule.description}"
      }
    }
  }
  else if [event.severity_name] =~ "WARN" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.start->} %{+event.start} %{+event.start} %{rule.description}"
      }
    }
  }
  # date {
  #   match => ["event.start" , "MMM dd HH:mm:ss.SSS"]
  # }
  mutate {
    remove_field => ["rest_msg","log.date"]
    # add_field => { "ecs.version" => "1.4" }
    rename => {"host" => "agent"}
  }
  translate {
    field => "[event.severity_name]"
    destination => "[rule.category]"
    dictionary => {
      "ERRR" => "Security/Failed Activity"
      "INFO" => "Security/Activity"
      "NOTE" => "Security/Activity"
      "WARN" => "Security/Warning"
    }
      fallback => "Others"
  }
}
output {
  pipeline { send_to => [enrichments] }
}