input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
   if [message] =~ '^.*?\"args\":.*?$' {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
     grok {
       match => {
         "message" => '^(?<log.date>.*?) \{name=(?<agent.name>.*?)\} (?<rest_msg1>.*?)\"args\":\"(?<process.command_line.text>.*?),(?<rest_msg2>\"cwd\".*?)$'
          tag_on_failure => "_grokparsefailure_tanium"
       }
     }
     mutate {
       add_field => { "rest_msg" => "%{rest_msg1} %{rest_msg2}" }
       add_field => { "agent.parse_rule" => "args" }
     }
   } else {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2" }
    }
     dissect {
       mapping => {
         message => "%{log.date} {%{?data}} %{rest_msg}"
       }
     }
   }
   json {
     source => "rest_msg"
     skip_on_invalid_json => true
  #   field_split => ","
 #    value_split => ":"
     target => "tanm"
   }
   mutate {
     rename => {"[tanm][Operating System]" => "host.os.name"}
     rename => {"[tanm][Computer Serial Number]" => "host.serial"}
     rename => {"[tanm][Operating System Install Date]" => "host.os.installation_date"}
     rename => {"[tanm][Logged In Users]" => "host.logged_in_users"}
     rename => {"[tanm][Last Logged In User]" => "host.last_logged_in_user"}
     rename => {"[tanm][Domain Name]" => "host.domain"}
     rename => {"[tanm][MAC Address]" => "host.mac"}
     rename => {"[tanm][IPv4 Address]" => "host.ip"}
     rename => {"[tanm][Tanium Server Name]" => "observer.hostname"}
     rename => {"[tanm][Logged In Users]" => "host.user.name"}
     rename => {"[tanm][Time Zone]" => "host.timezone"}
     rename => {"[tanm][Manufacturer]" => "host.manufacturer"}
     rename => {"[tanm][Model]" => "host.model"}
     rename => {"[tanm][Intel Type]" => "intel.type"}
     rename => {"[tanm][Alert Id]" => "event.id"}
     rename => {"[tanm][Computer Name]" => "host.name"}
     rename => {"[tanm][Intel Id]" => "event.id"}
     rename => {"[tanm][Intel Name]" => "rule.name"}
     rename => {"[tanm][pid]" => "process.parent.pid"}
     rename => {"[tanm][trace_process_table_id]" => "process.thread.id"}
     rename => {"[tanm][ppid]" => "process.parent.ppid"}
     rename => {"[tanm][file]" => "file.path"}
     rename => {"[tanm][Intel Labels]" => "intel.label"}
     rename => {"[tanm][start_time]" => "event.start"}
     rename => {"[tanm][name]" => "file.name"}
     rename => {"[tanm][Computer IP]" => "source.ip"}
     rename => {"[tanm][user]" => "user.id"}
     rename => {"[tanm][parent]" => "file.directory"}
     rename => {"[tanm][source]" => "process.name"}
     rename => {"[tanm][service_id]" => "service.id"}
     rename => {"[tanm][trace_process_table_id]" => "trace.id"}
     rename => {"[tanm][args]" => "process.args"}
     rename => {"[tanm][Tanium Client IP Address]" => "source.ip"}
     rename => {"[tanm][Tanium Client NAT IP Address]" => "source.nat.ip"}
     rename => {"[tanm][Last Logged In User]" => "user.id"}
     rename => {"[tanm][Connection Name]" => "rule.name"}
     rename => {"[tanm][Match Details][match][properties][user]" => "user.name"}
     update => {"[tanm][Match Details][match][properties][file][md5]" => "file.hash.md5"}
     rename => {"[tanm][Match Details][match][properties][file][sha1]" => "file.hash.sha1"}
     rename => {"[tanm][Match Details][match][properties][file][size]" => "file.size"}
     rename => {"[tanm][Match Details][match][properties][file][sha256]" => "file.hash.sha256"}
     rename => {"[tanm][Match Details][match][properties][file][fullpath]" => "file.path"}
     update => {"[tanm][Match Details][match][properties][md5]" => "file.hash.md5"}
     rename => {"[tanm][Match Details][match][properties][fullpath]" => "file.path"}

     add_field => { "event.module" => "tanium" }
   }
   if [tanm][Match Details][match][source] {
     mutate {
       add_field => { "event.dataset" => "tanium.%{[tanm][Match Details][match][source]}" }
     }
   }
   if [tanm][AV Message] {
     mutate {
     add_field => { "agent.parse_rule" => "RULE 2" }
   }
     mutate {
       rename => {"[tanm][AV Message]" => "av_message"}
     }
     dissect {
       mapping => {
         av_message => "%{rule.description} File: %{file.path} by: %{?data} Action: %{event.action}. %{?data}: %{+rule.description}"
       }
     }
     mutate {
       remove_field => ["av_message"]
     }
   }
#    date {
#      match => ["event.start" , "yyyy-MM-dd"T"HH:mm:ss.SSSZ", "yyyy-mm-dd HH:mm:ss", "yyyy-mm-dd HH:mm:ss.SSS","MMM dd HH:mm:ss", "MMM dd HH:mm:ss ZZZ","yyyy-MM-dd"T"HH:mm:ssZ"]
#      target => "event.start"
#    }
   mutate {
     remove_field => ["process.command_line.text", "[tanm]", "rest_msg", "rest_msg1", "rest_msg2","log.date","event.start"]
#       , "message",
     add_field => { "ecs.version" => "1.7"}
   }
   translate {
     field => "[intel.type]"
     destination => "[rule.category]"
     dictionary => {
       "tanium-signal" => "Security/Suspicious"
       "INFO" => "Security/Activity"
       "NOTE" => "Security/Other"
     }
     fallback => "Others"
   }
}
output {
  pipeline { send_to => [enrichments] }
}