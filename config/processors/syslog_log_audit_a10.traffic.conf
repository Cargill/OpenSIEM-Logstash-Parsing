# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<actual_msg>.*)" }
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  mutate {
    add_field => { "event.module" => "a10.traffic" }
    add_field => { "observer.vendor" => "a10" }
    add_field => { "observer.product" => "a10 loadbalancer" }
    add_field => { "observer.type" => "proxy" }
  }
  
  mutate {
    strip => ["actual_msg"]
  }

  dissect {
    mapping => {
      "actual_msg" => "%{?data} %{check_data}"
    }
  }
  if [check_data] !~ " " {
    drop {}
  }
  dissect {
    mapping => {
      "actual_msg" => "%{log.date} {%{?data}} %{rest_msg}"
    }
  }
  if [message] =~ "a10logd:" and ([message] =~ "External_Logging_Aflex:" or [message] =~ "External_Logging_Alfex:") {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    dissect {
      mapping => {
        "rest_msg" => "<%{code}>%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?a10.logging.daemon}: [%{rule.name}]<%{?data}> %{process.name}:%{event_start->} %{+event_start} %{+event_start} %{source.ip}:%{source.port} -> %{destination.ip}:%{destination.port} %{?data} %{source.address} %{?data} %{url.path}"
      }
    }
    dissect {
      mapping => {
        "event_start" => "%{event_start_combined} at %{+event_start_combined}"
      }
    }
    date {
      match => ["event_start_combined" , "yyyy/MM/dd HH:mm:ss"]
      timezone => "GMT"
      locale => "en"
      target => "event.start"
    }
  }
  else if [message] =~ "a10logd: " and [message] =~ "src=" and [message] !~ "DRS-" and [message] !~ " SLB server " and [message] !~ "<6> Service https" and [message] !~ "External_Logging_Aflex:" and [message] !~ "External_Logging_Alfex:" {
    if [rest_msg] =~ "=" and [rest_msg] !~ " ->"{
      mutate {
        add_field => { "agent.parse_rule" => "RULE 7" }
      }
      dissect {
        mapping => {
          "rest_msg" => "<%{code}>%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?a10.logging.daemon}: [%{rule.name}]<%{?data}> %{?data} src=%{src} %{msg_kv}"
        }
      }
      kv {
        whitespace => "strict"
        source => "msg_kv"
        field_split => " "
        value_split => "="
        target => "a10"
      }
      mutate {
        rename => {"[a10][src]" => "source.ip"}
        rename => {"[a10][spt]" => "source.port"}
        rename => {"[a10][dst]" => "destination.ip"}
        rename => {"[a10][dpt]" => "destination.port"}
        rename => {"[a10][dhost]" => "destination.address"}
        rename => {"[a10][act]" => "event.action"}
        rename => {"[a10][requestMethod]" => "http.request.method" }
        rename => {"[a10][app]" => "network.protocol"}
      }
    }
    else if [rest_msg] =~ "-o ->" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 2" }
      }
      dissect {
        mapping => {
          rest_msg => "<%{code}>%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?a10.logging.daemon}: [%{rule.name}]<%{?data}> %{?data} src=%{src} %{msg_kv} msg=%{rule.description}"
        }
      }
      kv {
        whitespace => "strict"
        source => "msg_kv"
        field_split => " "
        value_split => "="
        target => "a10"
      }
      mutate {
        rename => {"[a10][src]" => "source.ip"}
        rename => {"[a10][spt]" => "source.port"}
        rename => {"[a10][dst]" => "destination.ip"}
        rename => {"[a10][dpt]" => "destination.port"}
        rename => {"[a10][dhost]" => "destination.address"}
        rename => {"[a10][act]" => "event.action"}
        rename => {"[a10][requestMethod]" => "http.request.method" }
        rename => {"[a10][app]" => "network.protocol"}
      }
    }
    else if [rest_msg] =~ "->" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 2 (a)" }
      }
      dissect {
        mapping => {
          "rest_msg" => "<%{code}>%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?a10.logging.daemon}: [%{rule.name}]<%{?data}> %{?data} at %{?data} %{source.ip}:%{source.port} -> %{destination.ip}:%{destination.port} %{event.message}"
        }
      }
    }
  }
  else if [message] =~ "DRS-" {
    if [message] =~ "SLB server" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 3" }
      }
      dissect {
        mapping => {
          "rest_msg" => "<%{code}>%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?a10.logging.daemon}: [%{rule.name}]<%{?data}> SLB server DRS-%{source.address} (%{source.ip}) %{event.message}"
        }
      }
    }
    else if [message] =~ "failed to create a dynamic server" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 3 (a)" }
      }
      dissect {
        mapping => {
          "rest_msg" => "<%{code}>%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?a10.logging.daemon}: [%{rule.name}]<%{?data}> %{event.message} with IP %{source.ip} %{+event.message}"
        }
      }
    }

    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 4" }
      }
      dissect {
        mapping => {
          "rest_msg" => "<%{code}>%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?a10.logging.daemon}: [%{rule.name}]<%{?data}> %{event.message}"
        }
      }
    }
  }
  else if [message] =~ "HTTP header name too long" and [message] =~ " > " {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 3(b)" }
    }
    dissect {
      mapping => {
        rest_msg => "<%{code}>%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?a10.logging.daemon}: [%{rule.name}]<%{?data}> %{rule.description}) %{source.ip} > %{destination.ip}"
      }
    }
  }
  else if [message] =~ "[ACOS]<6> Service https" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5" }
    }
    dissect {
      mapping => {
        "rest_msg" => "<%{code}>%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?a10.logging.daemon}: [%{rule.name}]<%{?data}> %{event.message}"
      }
    }
  }
  else if [message] =~ "[ACOS]<6>" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 6" }
    }
  }
  mutate {
    remove_field => ["rest_msg","code","check_data","msg_kv","log.date","event.created","[a10]","client.as.number","client.as.organization.name","client.as.organization.name.text","client.user.hash","destination.as.number","destination.as.organization.name","destination.as.organization.name.text","server.as.number","server.as.organization.name","server.as.organization.name.text","server.user.hash","source.as.number","source.as.organization.name","source.as.organization.name.text","event.message","event_start_combined","event_start","actual_msg"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
