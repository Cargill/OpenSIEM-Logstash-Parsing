input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    strip => ["message"]
  }
  dissect {
    mapping => {
      message => "%{log.date} {%{?data}} <%{event.severity_name}>%{rest_msg}"
    }
  }
  if [rest_msg] =~ "useradd" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 1" }
    }
    dissect {
      mapping => {
        rest_msg => "%{process.name}[%{process.pid}]: %{?data} '%{user.id}' %{?data} %{?data} '%{group.name}'"
      }
    }
  }
  else if [rest_msg] =~ "userdel" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 2" }
    }
    dissect {
      mapping => {
        rest_msg => "%{process.name}[%{process.pid}]: %{?data} '%{user.id}' %{?data} group '%{group.name}'"
      }
    }
  }
  else if [rest_msg] =~ "uthentication failure" {
    if [event.severity_name] =~ "NOTE" {
      mutate {
        add_field => { "parse_rule_name" => "RULE 3" }
      }
      dissect {
        mapping => {
          rest_msg => "%{process.name}[%{process.pid}]: %{?data} %{rule.description}; %{rest_msg1}"
        }
      }
      kv {
        source => "rest_msg1"
        field_split => " "
        value_split => "="
      }
      mutate {
        rename => {"user" => "user.name"}
      }
    }
    else {
      mutate {
        add_field => { "parse_rule_name" => "RULE 4" }
      }
      dissect {
        mapping => {
          rest_msg => "%{process.name}[%{process.pid}]: %{?data} %{rule.description} for %{user.name} from %{source.ip}"
        }
      }
    }
  }
  else if [rest_msg] =~ "XO1:" {
    dissect {
      mapping => {
        rest_msg => "%{source.address}: [%{?data}] %{event.created->} %{+event.created} %{+event.created} %{+event.created} %{?data} %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "Postponed keyboard-interactive" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 5" }
    }
    dissect {
      mapping => {
        rest_msg => "%{process.name}[%{process.pid}]: %{?data} %{rule.description} for %{user.name} from %{source.ip}"
      }
    }
  }
  else if [rest_msg] =~ "could not load host key" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 6" }
    }
    dissect {
      mapping => {
        rest_msg => "%{process.name}[%{process.pid}]: %{?data} %{rule.description}: %{host.key}"
      }
    }
  }
  else if [event.severity_name] =~ "ERRR" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 7" }
    }
    dissect {
      mapping => {
        rest_msg => "%{process.name}[%{process.pid}]: %{rule.description}"
      }
    }
  }
  else if [event.severity_name] =~ "INFO" {
    if [rest_msg] =~ "xinetd" {
      mutate {
        add_field => { "parse_rule_name" => "RULE 8" }
      }
      dissect {
        mapping => {
          rest_msg => "%{process.name}[%{process.pid}]: %{event.action}: %{?data} %{?data}=%{vendor.message.id} %{?data}"
        }
      }
    }
  }
    else if [rest_msg] =~ "identification string" {
      mutate {
        add_field => { "parse_rule_name" => "RULE 9" }
      }
      dissect {
        mapping => {
          rest_msg => "%{process.name}[%{process.pid}]: %{rule.description} from %{source.ip} %{?data} %{source.port}"
        }
      }
    }
    else if [rest_msg] =~ "GPS 0" {
      mutate {
        add_field => { "parse_rule_name" => "RULE 10" }
      }
      dissect {
        mapping => {
          rest_msg => "%{source.address} %{?data} %{rule.description}"
        }
      }
    }
    else {
      mutate {
        add_field => { "parse_rule_name" => "RULE 11" }
      }
      dissect {
        mapping => {
          rest_msg => "%{process.name}[%{process.pid}]: %{rule.description}"
        }
      }
    }
  date {
    match => ["event.created" , "yyyy-mm-dd HH:mm:ss", "yyyy-mm-dd HH:mm:ss.SSS","MMM dd HH:mm:ss" ,"MMM dd HH:mm:ss.SSS"]
    target => "event.created"
  }
  mutate {
    remove_field => ["rest_msg","log.date","logname","rest_msg1","rest_msg","euid","ruser"]
  }
  translate {
    field => "[event.severity_name]"
    destination => "[rule.category]"
    dictionary => {
      "ERRR" => "Security/Failed Activity"
      "INFO" => "Security/Activity"
      "NOTE" => "Security/Activity"
      "WARN" => "Security/Warning"
    }
      fallback => "Others"
  }
  # VAR_ENRICHMENTS
}
output {
# VAR_OUTPUT
}