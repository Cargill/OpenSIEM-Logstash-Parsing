# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[log][source][hostname]" => "exchange.2016" }
    add_field => { "[event][module]" => "exchange message tracking logs" }
    add_field => { "[event][dataset]" => "exchange.message_logs" }
    add_field => { "[observer][vendor]" => "Microsoft" }
    add_field => { "[observer][product]" => "Exchange" }
    add_field => { "[observer][type]" => "exchange_logs" }
  }
  mutate {
    gsub => [ "message",'[\"]',"" ]
  }
  grok {
    match => { "message" => "^(?<[date][time]>.*?),(?<client_ip>.*?),(?<client_hostname>.*?),(?<server_ip>.*?),(?<server_hostname>.*?),(?<source_context>.*?),(?<connector_id>.*?),(?<[network][transport]>.*?),(?<col2>.*?),(?<col3>.*?),(?<col4>.*?),(?<col5>.*?),(?<rest_data>.*)" }
    timeout_millis => 500
    tag_on_timeout => ["_groktimeout_1"]
    tag_on_failure => "_grokfailure_exch_1"
  }
  grok {
    match => { "rest_data" => "(?<recipient_address>.*?),(?<recipient_status>.*?),(?<total_bytes>.*?),(?<recipient_count>.*?),(?<related_recipient_address>.*?),(?<reference>.*?),(?<message_subject>.*),(?<sender_address>.*?),(?<return_path>.*?),(?<message_info>.*?),(?<directionality>.*?),(?<tenant_id>.*?),(?<original_client_ip>.*?)(,(?<original_server_ip>.*?))?,(?<custom_data>.*?),(?<transport_traffic_type>.*?),(?<log_id>.*?),((?<schema_version>.*?)?)$" }
    tag_on_failure => "_grokfailure_exch_2"
  }
  mutate {
    remove_field =>[ "[original_client_ip]" ]
  }
  mutate {
    gsub => [ "[custom_data]", "S:", "" ]
  }
  if [source_context] =~ "^;" {
    mutate {
      gsub => [ "[source_context]",";250","" ]
    }
  }
  if [source_context] =~ ";" and [source_context] =~ "=" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 1" }
    }
    grok {
      match => { "[source_context]" => "(?<data>.*?) \[(?<tmp_sc>.*)\]\s?((?<data>.*?))?" }
      timeout_millis => 500
      tag_on_timeout => ["_groktimeout_3"]
      tag_on_failure => "_grokfailure_exch_3"
    }
    kv {
      source => "tmp_sc"
      target => "context"
      field_split => ", "
      value_split => "="
    }
  }
  kv {
    source => "[custom_data]"
    target => "custom"
    field_split => ";"
    value_split => "="
  }
  mutate {
    convert => [ "total_bytes", "integer" ]
    convert => [ "recipient_count", "integer" ]
    split => [ "[related_recipient_address]", ";" ]
    split => [ "[recipient_address]", ";" ]
  }
  mutate {
    rename => { "syslog_facility_code" => "[log][syslog][facility][code]" }
    rename => { "syslog_facility" => "[log][syslog][facility][name]" }
    rename => { "syslog_severity_code" => "[log][syslog][severity][code]" }
    rename => { "syslog_severity" => "[log][syslog][severity][name]" }
    rename => { "[custom][AccountForest]" => "[user][domain]" }
    rename => { "[custom][OriginalFromAddress]" => "[source][user][email]" }
    rename => { "[context][hostname]" => "[host][name]" }
    rename => { "[event_id]" => "[rule][name]" }
    rename => { "[transport_traffic_type]" => "[network][protocol]" }
    rename => { "[recipient_status]" => "[event][action]" }
    rename => { "[directionality]" => "[network][direction]" }
    rename => { "[network_message_id]" => "[event][code]" }
    rename => { "[message_subject]" => "[email][subject]" }
    rename => { "[total_bytes]" => "[source][bytes]" }
    rename => { "[original_client_ip]" => "[source][ip]" }
    rename => { "[sender_address]" => "[source][user][email]" }
    rename => { "[client_hostname]" => "[client][address]" }
    rename => { "[client_ip]" => "[client][ip]" }
    rename => { "[server_hostname]" => "[server][address]" }
    rename => { "[return_path]" => "[email][reply][to]" }
    rename => { "[server_ip]" => "[server][ip]" }
    rename => { "[message_id]" => "[event][id]" }
    rename => { "[host][name]" => "[log][source][hostname]" }
  }
  if [recipient_address] and [recipient_address] != "nil" {
    mutate {
      rename => { "[recipient_address]" => "[destination][user][email]" }
    }
  }
  if [related_recipient_address] and [related_recipient_address]!= "nil" {
    mutate {
      rename => { "[related_recipient_address]" => "[destination][user][email]" }
    }
  }
  if [date][time] {
    date {
      match => [ "[date][time]", "ISO8601" ]
      timezone => "GMT"
      target => "[event][created]"
    }
  }
  mutate {
    remove_field => [ "[custom_data]", "date", "[custom]", "recipient_count", "log_id", "schema_version", "internal_message_id", "message_info", "[context]", "data", "source_context", "tmp_sc", "source", "rest_data", "col2", "col3", "col4", "col5", "[agent][hostname]", "[fields]", "[input]", "observerip" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
