input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "f5.lba" }
    add_field => { "event.dataset" => "f5.loadbalancer" }
    add_field => { "observer.vendor" => "f5" }
    add_field => { "observer.product" => "f5.load_balancer" }
    add_field => { "observer.type" => "load_balancer" }
  }
  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" {
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "<%{pri}>%{rest_msg}"
      }
    }
  } else {
  ### Filebeats udp or tcp in
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "%{?data} {%{?data}} <%{pri}>%{rest_msg}"
      }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  mutate{
    remove_field => ["pri"]
  }
  mutate {
    strip => ["message"]
  }
  dissect {
    mapping => {
      message => "%{log.date} {%{?data}} <%{event.severity_name}>%{rest_msg}"
    }
  }
  if [message] =~ "DBUG" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1 (dropped)" }
    }
    drop {}
  }
  if [rest_msg] =~ "httpd" and [rest_msg] =~ "auth token request" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data} %{process.name}[%{process.pid}]: %{?data} [%{?data} %{source.ip}] %{rule.description}"
      }
    }
  }
    # escape forward slash else it would be considered as delimeter
  else if [rest_msg] =~ "I\/O error occurred while writing" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 3" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data} %{process.name}[%{process.pid}]: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "No members available for pool" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 4" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data} %{process.name}[%{process.pid}]: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "ICMP error limit reached" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data} %{process.name}[%{process.pid}]: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "httpd" and [rest_msg] =~ "AUDIT" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 6" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data} %{process.name}[%{process.pid}]: %{?data} - %{?data} %{user.id} %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~  "mcpd" and [rest_msg] =~ "AUDIT" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 7" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data} %{process.name}[%{process.pid}]: %{?data}, %{?data} %{user.id} %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "monitor status down" or [rest_msg] =~ "monitor status up" or [rest_msg] =~ "SNMP_TRAP" or [rest_msg] =~ " tmm" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 8" }
  }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data} %{process.name}[%{process.pid}]: %{?session.id}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~  "monitor status up" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 9" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data} %{process.name}[%{process.pid}]: %{?session.id}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "notice run-parts" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 10" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data}-%{process.name}[%{process.pid}]: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "info logger:" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 11" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{source.address} %{?data} %{process.name}: [%{?data}] %{source.ip} %{?data} %{?data} %{url.path} %{event.id}"
      }
    }
  }
  else if [rest_msg] =~ "authentication failure" {
    dissect {
      mapping => {
        rest_msg => "%{event.created->} %{+event.created} %{+event.created} %{destination.address} %{?data} %{process.name}[%{process.pid}]: %{auth_failure}"
      }
    }
    if [auth_failure] =~ "pam_unix" {
      mutate {
        add_field => { "agent.parse_rule" => "rule 12a" }
      }
      dissect {
        mapping => {
      # pam_unix(httpd:auth): authentication failure; logname= uid=48 euid=48 tty= ruser= rhost=10.175.36.53  user=admin
          auth_failure => "%{?data}: %{rule.description}; %{?data} rhost=%{source.ip} user=%{user.name}"
        }
      }
    }
    else if [auth_failure] =~ "auth_pam" {
       mutate {
        add_field => { "agent.parse_rule" => "rule 12b" }
      }
      dissect {
        mapping => {
      # [auth_pam:error] [pid 25665] [client 10.175.36.53:54544] authcache pam: user 'admin' (fallback: false) - not authenticated: authentication failure, referer: https://elkgrove80-lba.gw.cargill.com/tmui/login.jsp"
          auth_failure => "[%{data}] [%{data}] [client %{source.ip}:%{source.port}] %{?data} user '%{user.name}' %{?data} - %{rule.description}, referer: %{url.full}"
        }
      }
    }
  }

  date {
    match => ["event.created" , "MMM dd HH:mm:ss"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
  }
  mutate {
    remove_field => ["rest_msg","log.date", "auth_failure"]
  }
  translate {
    field => "[event.severity_name]"
    destination => "[rule.category]"
    dictionary => {
      "ERRR" => "Security/Failed Activity"
      "INFO" => "Security/Activity"
      "NOTE" => "Security/Activity"
      "WARN" => "Security/Warning"
    }
    fallback => "Others"
  }
}
output {
  pipeline { send_to => [enrichments] }
}