# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "tenable.nessus.scanner" }
    add_field => { "event.dataset" => "tenable.nessus" }
    add_field => { "observer.vendor" => "tenable" }
    add_field => { "observer.product" => "nessus core scanner" }
    add_field => { "observer.type" => "vulnerability scanner" }
  }
  # change to old grok pattern as Badal is working on it; 
  # using actual_msg instead rest_msg as that will be replaced by badal as common field in every file.
  if [agent.type] == "logstash" {
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => "(\<(?<pri>\d+)\>( )?)?(?<actual_msg>.*?)$" }
    }
  }
  else {
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => ".*?\{name=.*?\} (\<(?<pri>\d+)\>( )?)?(?<actual_msg>.*?)$" }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  mutate {
    remove_field => ["pri"]
  }
  if [actual_msg] =~ "call stack" or "-----" in [actual_msg] or "# ()" in [actual_msg] or "# recv()" in [actual_msg] {
    drop {}
  }
  if [actual_msg] =~ "t.nessuscore" {
    if [actual_msg] =~ "received signal" or [actual_msg] =~ "Nessus is ready" {
      dissect {
        tag_on_failure => "_dissectfailure_1"
        mapping => {
          "actual_msg" => "%{?data->} %{?data} %{?data} %{host.hostname} %{?data} [%{?data} %{event.start}][%{?data}] %{rule.description}"
        }
      }
      if [actual_msg] =~ "received signal" {
        mutate {
          add_field => { "event.action" => "SC Service stopped" }
        }
      }
      else {
        mutate {
          add_field => { "event.action" => "SC Service started back up and running" }
        }
      }
    }
    else {
      dissect {
        tag_on_failure => "_dissectfailure"
        mapping => {
          "actual_msg" => "%{?data->} %{?data} %{?data} %{host.hostname} %{?data} [%{?data} %{event.start}][%{?data}][%{tmp} : %{rule.description}"
        }
      }
    }
    if [rule.description] =~ "Finished" {
      if [rule.description] =~ "hosts up" {
        mutate {
          add_field => { "event.action" => "Finished scanning a scan chunk" }
        }
      }
      else {
        mutate {
          add_field => { "event.action" => "Scan Completed on Target IP" }
        }
      }
    } else if [rule.description] =~ "starting with " {
      dissect {
        tag_on_failure => "_dissectfailure_2"
        mapping => {
          "rule.description" => "%{rule.description}: %{[network.network_range][gte]}-%{[network.network_range][lte]}"
        }
      }
      mutate {
        add_field => { "event.action" => "Scan Started" }
      }
    } else if [rule.description] =~ "Started with " {
      mutate {
        add_field => { "event.action" => "Scan Started" }
      } 
    } else if [rule.description] =~ "too slow" {
      mutate {
        add_field => { "event.action" => "Plugin too slow" }
      }
    } else if [rule.description] =~ "Collecting report info" {
      mutate {
        add_field => { "event.action" => "Report collected for finished scan chunk" }
      }
    } else if [rule.description] =~ "Warning: " {
      dissect {
        tag_on_failure => "_dissectfailure_3"
        mapping => {
          "rule.description" => "%{?data} scan %{destination.address},{?data}"
        }
      }
    }
    mutate {
      gsub => ["tmp" ,"\]",""]
      gsub => ["tmp" ,"\[",","]
    }
    kv {
      source => "tmp"
      field_split => ","
      value_split => "="
      target => "ns"
    }
    mutate {
      rename => {"[ns][target]" => "destination.address"}
      rename => {"[ns][pid]" => "process.pid"}
      rename => {"[ns][scan]" => "event.id"}
      rename => {"[ns][duration]" => "event.duration"}
      rename => {"[ns][plugin]" => "file.name"}
    }
    if [ns][name] {
      dissect {
          tag_on_failure => "_dissectfailure_4"
          mapping => {
            "[ns][name]" => "%{file.uid}/%{process.entity_id}" 
          }
        }
    }
    if [event.duration] {
      mutate {
        gsub => ["event.duration" ,"s",""]
        convert => { "event.duration" => "float" }
      }
      ruby {
        code => "event.set('event.duration',event.get('event.duration')* 10e9)"
      }
    }
    date {
      tag_on_failure => "_dateparsefailure"
      match => ["event.start", "MMM  dd HH:mm:ss yyyy", "MMM dd HH:mm:ss yyyy", "ISO8601"]
      timezone => "GMT"
      locale => "en"
      target => "event.start"
    }
    if "_dateparsefailure" in [tags] {
      mutate {
        copy => { "message" => "log.original" }
      }
      mutate {
        remove_field => ["event.start"]
      }
    }
  }
  if "_dissectfailure" in [tags] {
    if ![log.original] {
        mutate {
          copy => { "message" => "log.original" }
        }
    }
  }
  mutate {
    remove_field => ["ns", "actual_msg", "tmp"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
