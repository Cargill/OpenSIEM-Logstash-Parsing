# Copyright [2023] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    lowercase => [ "message" ]
  }
  json {
    source => "message"
    target => "tmp"
  }
  mutate{
    add_field => { "[log][source][hostname]" => "%{[tmp][bd.hostname]}" }
  }
  mutate {
    add_field => { 
      "[event][module]" => "tenable"
      "[event][dataset]" => "tenable.asm_api"
    }
    rename => { 
      "[tmp][id]" => "[event][id]"
      "[tmp][bd.addedtoportfolio]" => "[cloud][account][id]"
      "[tmp][bd.hostname]" => "[host][name]"
      "[tmp][bd.ip_address]" => "[host][ip]"
      "[tmp][bd.original_hostname]" => "[host][hostname]"
      "[tmp][bd.record_type]" => "[dns][answers][class]"
      "[tmp][bd.domain]" => "[host][domain]"
      "[tmp][domaininfo.administrativecontact_email]" => "[destination][user][email]"
      "[tmp][domaininfo.administrativecontact_name]" => "[destination][user][name]"
      "[tmp][domaininfo.administrativecontact_organization]" => "[destination][as][organization][name]"
      "[tmp][domaininfo.administrativecontact_telephone]" => "[destination][as][number]"
      "[tmp][domaininfo.registrant_country]" => "[destination][geo][country_name]"
      "[tmp][domaininfo.registrant_name]" => "[destination][user][business][unit]"
      "[tmp][domaininfo.registrarname]" => "[observer][name]"
      "[tmp][domaininfo.status]" => "[event][action]"
      "[tmp][domaininfo.fdns_nameservers]" => "[group][domain]"
      "[tmp][app_updates][rbls]" => "[threat][list][created]"
      "[tmp][ipgeo.cloud]" => "[cloud][provider]"
      "[tmp][ipgeo.asn_number]" => "[service][id]"
      "[tmp][ipgeo.asn]" => "[service][name]"
      "[tmp][ipgeo.time_zone]" => "[cloud][region]"
      "[tmp][ipgeo.registered_country]" => "[destination][geo][country_name]"
    }
  }
  if [tmp][domaininfo.administrativecontact_email] and [tmp][domaininfo.administrativecontact_email]!= "nil" {
    mutate {
      rename => { "[tmp][domaininfo.contactemail]" => "[destination][user][email]" }
    }
  }
  if [tmp][domaininfo.administrativecontact_organization] and [tmp][domaininfo.administrativecontact_organization]!= "nil" {
    mutate {
      rename => { "[tmp][domaininfo.registrant_organization]" => "[destination][as][organization][name]" }
    }
  }
  if [tmp][domaininfo.administrativecontact_name] and [tmp][domaininfo.administrativecontact_name]!= "nil" {
    mutate {
      rename => { "[tmp][domaininfo.registrant_name]" => "[destination][user][name]" }
    }
  }
  ruby {
      code => "
        ports = []
        ports_services = []
        ports_banners = []
        ports_cves = []
        ports_cvss3_scores = []
        ports_cvss3_vectors = []
        rbls = []
        if event.get('[tmp][ports.ports]').kind_of? Array
          event.get('[tmp][ports.ports]').each do |item|
            if item!= ''  
              ports.push(item)
            end
          end
        end
        if event.get('[tmp][ports.services]').kind_of? Array
          event.get('[tmp][ports.services]').each do |item|
            if item!= ''  
              ports_services.push(item)
            end
          end
        end
        if event.get('[tmp][ports.banners]').kind_of? Array
          event.get('[tmp][ports.banners]').each do |item|
            if item!= ''  
              ports_banners.push(item)
            end
          end
        end
        if event.get('[tmp][ports.cves]').kind_of? Array
          event.get('[tmp][ports.cves]').each do |item|
            if item!= ''  
              ports_cves.push(item)
            end
          end
        end
        if event.get('[tmp][ports.cvss3_scores]').kind_of? Array
          event.get('[tmp][ports.cvss3_scores]').each do |item|
            if item!= ''  
              ports_cvss3_scores.push(item)
            end
          end
        end
        if event.get('[tmp][ports.cvss3_vectors]').kind_of? Array
          event.get('[tmp][ports.cvss3_vectors]').each do |item|
            if item!= ''  
              ports_cvss3_vectors.push(item)
            end
          end
        end
        if event.get('[tmp][rbls.rbls]').kind_of? Array
          event.get('[tmp][rbls.rbls]').each do |item|
            if item!= ''  
              rbls.push(item)
            end
          end
        end
        if !ports_cvss3_vectors.empty?
          event.set('[vulnerability][classification]', ports_cvss3_vectors)
        end
        if !ports_cvss3_scores.empty?
          event.set('[vulnerability][score][base]', ports_cvss3_scores)
        end
        if !ports_cves.empty?
          event.set('[vulnerability][id]', ports_cves)
        end
        if !ports_services.empty?
          event.set('[rule][name]', ports_services)
        end
        if !ports_banners.empty?
          event.set('[rule][description]', ports_banners)
        end
        if !ports.empty?
          event.set('[destination][port]', ports)
        end
        if !rbls.empty?
          event.set('[vulnerability][reference]', rbls)

        end
      "
      tag_on_exception => "ruby_block_exception"
  }
  if [threat][list][created] {
    date {
      match => [ "[threat][list][created]", "ISO8601" ]
      timezone => "GMT"
      locale => "en"
      target => "[threat][list][created]"
      tag_on_failure => "_dateparsefailure_tcnf"
    }
  }
  if [tmp][bd.subdomain]{
      mutate {
        add_tag => [ "subdomain" ]
      }
  }
  if [tmp][ipgeo.insideeu]{
      mutate {
        add_tag => [ "inside_EU" ]
      }
  }
  if [tmp][ipgeo.cloudhosted]{
      mutate {
        add_tag => [ "cloud_hosted" ]
      }
  }
  mutate {
    remove_field => [ "tmp" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}