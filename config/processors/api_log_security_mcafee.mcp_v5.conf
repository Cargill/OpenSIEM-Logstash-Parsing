input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  ### McAfee MCP API, tested against API v1-v5
  if ![message] or [message] == "" {
    drop {}
  }
  csv {
    source => "message"
    columns => ["num","usr","source.nat.ip","http.request.method","destination.bytes","source.bytes","url.domain","url.path","event.action","rule.name","request_timestamp_epoch","event.time","url.scheme","rule.category","http.request.body.content","service.nameee","event.severity_name", "rule.uuid", "http.response.status_code", "source.ip", "rule.description", "rule.ruleset", "user_agent.original", "user_agent.name", "user_agent.version", "process.name", "destination.ip", "destination.port"]
    convert => {
      "destination.bytes" => "integer"
      "source.bytes" => "integer"
    }
    skip_empty_columns => true
    skip_empty_rows => true
  }
  # row empty
  if "_csvskippedemptyfield" in [tags] {
      drop {}
  }

  mutate {
    split => { "rule.category" => "," }
  }
  # Message is csv, this creates event.original to include fields names
  mutate {
    add_field => { "event.original" => "request_timestamp_epoch: %{event.time}, num: %{num}, usr: %{usr}, source.nat.ip: %{source.nat.ip}, http.request.method: %{http.request.method}, destination.bytes: %{destination.bytes}, source.bytes: %{source.bytes}, url.domain: %{url.domain}, url.path: %{url.path}, event.action: %{event.action}, rule.name: %{rule.name}, request_timestamp_epoch: %{request_timestamp_epoch}, url.scheme: %{url.scheme}, rule.category: %{rule.category}, http.request.body.content: %{http.request.body.content}, service.name: %{service.name}, event.severity_name: %{event.severity_name}, last_rule: %{rule.uuid}, http_status_code: %{http.response.status_code}, client_ip: %{source.ip}, location: %{rule.description}, block_reason: %{rule.ruleset}, user_agent_comment: %{user_agent.original}, user_agent_product: %{user_agent.name}, user_agent_version: %{user_agent.version}, process_name: %{process.name}, destination_ip: %{destination.ip}, destination_port: %{destination.port}"}
  }
  mutate {
    gsub => [ "event.original", "%\{.*?}(,)? ", "" ]
    gsub => [ "event.original", "%\{.*?}", "" ]
  }
  
  if [usr] and [usr] =~ ".*?\\.*?" {
    grok {
      match => { "usr" => "(?<user.domain>.*?)\\(?<user.name>.*?)$" }
    }
  } else {
    mutate {
      rename => {
        "[usr]" => "user.name"
      }
    }
  }
  if [source.ip] and [source.ip] =~ "source_ip" {
    mutate {
      remove_field => ["source.ip"]
    }
  }
  # Create url.full 
  mutate {
    add_field => { "url.full" => "%{url.scheme}://%{url.domain}%{url.path}" }
  }
  date {
    match => ["request_timestamp_epoch",UNIX]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    }
  mutate {
    # host field is added by file input plugin
    rename => {"host" => "agent.name"}
    remove_field => ["request_timestamp_epoch", "usr", "num", "event.time", "path"]
  }
  
}
output {
  pipeline { send_to => [enrichments] }
}