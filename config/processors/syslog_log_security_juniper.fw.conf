# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "juniper.firewall" }
    add_field => { "event.dataset" => "juniper firewall" }
    add_field => { "observer.vendor" => "juniper" }
    add_field => { "observer.product" => "juniper" }
    add_field => { "observer.type" => "firewall" }
  }
  # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<rest_msg>.*?)%" }
  }
  syslog_pri {
  syslog_pri_field_name => "pri" 
  remove_field => [ "pri" ]
  }
  mutate {
    strip => ["message"]
    gsub => ["message",'\"',"'"]
  }
  if [message] =~ "RT_FLOW_SESSION_DENY" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {%{?data}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} source-address='%{source.ip}' source-port='%{source.port}' destination-address='%{destination.ip}' destination-port='%{destination.port}' service-name='%{service.name}' protocol-id='%{network.iana_number}' icmp-type='%{network.type}' policy-name='%{rule.id}' source-zone-name='%{source.domain}' destination-zone-name='%{destination.domain}' application='%{?application_name}' nested-application='%{network.application}' username='%{user.name}' roles='%{?roles}' packet-incoming-interface='%{?packet_incoming_interface}' encrypted='%{?is_encrypted}' reason='%{event.action}'] %{?rule.description}"
      }
    }
    mutate {
      add_field=> {
        "rule.category" => "Ops/Network Deny"
      }
    }
  }
  else if[message] =~ "APPTRACK_SESSION_CREATE" or [message] =~ "APPTRACK_SESSION_CLOSE" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} source-address='%{source.ip}' source-port='%{source.port}' destination-address='%{destination.ip}' destination-port='%{destination.port}' service-name='%{service.name}' nat-source-address='%{source.nat.ip}' nat-source-port='%{source.nat.port}' nat-destination-address='%{destination.nat.ip}' nat-destination-port='%{destination.nat.port}' src-nat-rule-name='%{source.nat.rule_name}' dst-nat-rule-name='%{destination.nat.rule_name}' protocol-id='%{network.iana_number}' policy-name='%{rule.id}' source-zone-name='%{source.domain}' destination-zone-name='%{destination.domain}' session-id-32='%{session_id}' username='%{user.name}' encrypted='%{?is_encrypted}'] %{rule.description}"
      }
    }
    if [rule.name] =~ "APPTRACK_SESSION_CLOSE" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 3" }
      }
      mutate {
        add_field => {
          "rule.category" => "Ops/Information"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 4" }
      }
      mutate {
        add_field => {
          "rule.category" => "Ops/Network Traffic"
        }
      }
    }
  }
  else if[message] =~ "RT_ALG_WRN_CFG_NEED" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} name='%{name}' message='%{event.message}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "WEBFILTER_URL_PERMITTED" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 6" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} source-address='%{source.ip}' source-port='%{source.port}' destination-address='%{destination.ip}' destination-port='%{destination.port}' name='%{name}' error-message='%{error.message}' profile-name='%{profile_name}' object-name='%{object_name}' pathname='%{path}' username='%{user.name}' roles='%{?roles}'] %{rule.description}"
      }
    }
    mutate {
      add_field=> {
        "rule.category" => "Ops/Network Allow"
      }
    }
  }
  else if[message] =~ "WEBFILTER_REQUEST_NOT_CHECKED" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 7" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} error-message='%{error.message}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "WEB_AUTH_FAIL" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 8" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} username='%{user.name}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "SNMPD_AUTH_FAILURE" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 9" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} function-name='%{function_name}' message='%{event.message}' source-address='%{source.ip}' destination-address='%{destination.ip}' index1='%{index_1}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "SNMPD_AUTH_RESTRICTED_ADDRESS" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 10" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} function-name='%{function_name}' source-address='%{source.ip}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "KMD_PM_SA_ESTABLISHED" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 11" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} local-address='%{source.ip}' remote-address='%{destination.ip}' local-initiator='%{source.address}' remote-responder='%{destination.address}' argument1='%{network.direction}' index1='%{index_1}' index2='%{index_2}' mode='%{process.name}' type='%{service.type}' traffic-selector-name='%{traffic_selector_name}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "SNMP_TRAP_LINK_UP" or [message] =~ "SNMP_TRAP_LINK_DOWN" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 12" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} snmp-interface-index='%{observer.ingress.interface.id}' admin-status='%{rule.ruleset}' operational-status='%{rule.ruleset}' interface-name='%{observer.ingress.interface.name}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "KMD_VPN_UP_ALARM_USER" or [message] =~ "KMD_VPN_DOWN_ALARM_USER" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 13" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} vpn-name='%{vpn_name}' remote-address='%{destination.ip}' local-address='%{source.ip}' gateway-name='%{gateway_name}' group-name='%{group.name}' tunnel-id='%{tunnel_id}' interface-name='%{observer.ingress.interface.name}' internal-ip='%{host.ip}' name='%{host.hostname}' peer-name='%{peer_name}' client-name='%{source.address}' vrrp-group-id='%{vrrp_group_name}' traffic-selector-name='%{traffic_selector_name}' traffic-selector-cfg-local-id='%{traffic_selector_cfg_source_id}' traffic-selector-cfg-remote-id='%{traffic_selector_cfg-destination-id}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "RT_FLOW_SESSION_CLOSE" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 14" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} reason='%{event.action}' source-address='%{source.ip}' source-port='%{source.port}' destination-address='%{destination.ip}' destination-port='%{destination.port}' service-name='%{service.name}' nat-source-address='%{source.nat.ip}' nat-source-port='%{source.nat.port}' nat-destination-address='%{destination.nat.ip}' nat-destination-port='%{destination.nat.port}' src-nat-rule-name='%{source.nat.rule_name}' dst-nat-rule-name='%{destination.nat.rule_name}' protocol-id='%{network.iana_number}' policy-name='%{rule.id}' source-zone-name='%{source.domain}' destination-zone-name='%{destination.domain}' session-id-32='%{session_id}' packets-from-client='%{source.packets}' bytes-from-client='%{source.bytes}' packets-from-server='%{destination.packets}' bytes-from-server='%{destination.bytes}' elapsed-time='%{event.duration}' application='%{?application_name}' nested-application='%{network.application}' username='%{user.name}' roles='%{?roles}' packet-incoming-interface='%{?packet_incoming_interface}' encrypted='%{?is_encrypted}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Information"
      }
    }
  }
  else if[message] =~ "RT_FLOW_SESSION_CREATE" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 15" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} source-address='%{source.ip}' source-port='%{source.port}' destination-address='%{destination.ip}' destination-port='%{destination.port}' service-name='%{service.name}' nat-source-address='%{source.nat.ip}' nat-source-port='%{source.nat.port}' nat-destination-address='%{destination.nat.ip}' nat-destination-port='%{destination.nat.port}' src-nat-rule-name='%{source.nat.rule_name}' dst-nat-rule-name='%{destination.nat.rule_name}' protocol-id='%{network.iana_number}' policy-name='%{rule.id}' source-zone-name='%{source.domain}' destination-zone-name='%{destination.domain}' session-id-32='%{session_id}' username='%{user.name}' roles='%{?roles}' packet-incoming-interface='%{?packet_incoming_interface}' application='%{?application_name}' nested-application='%{network.application}' encrypted='%{?is_encrypted}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "APPTRACK_SESSION_VOL_UPDATE" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 16" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.name} [%{source.user.name} source-address='%{source.ip}' source-port='%{source.port}' destination-address='%{destination.ip}' destination-port='%{destination.port}' service-name='%{service.name}' application='%{?application_name}' nested-application='%{network.application}' nat-source-address='%{source.nat.ip}' nat-source-port='%{source.nat.port}' nat-destination-address='%{destination.nat.ip}' nat-destination-port='%{destination.nat.port}' src-nat-rule-name='%{source.nat.rule_name}' dst-nat-rule-name='%{destination.nat.rule_name}' protocol-id='%{network.iana_number}' policy-name='%{rule.id}' source-zone-name='%{source.domain}' destination-zone-name='%{destination.domain}' session-id-32='%{session_id}' packets-from-client='%{source.packets}' bytes-from-client='%{source.bytes}' packets-from-server='%{destination.packets}' bytes-from-server='%{destination.bytes}' elapsed-time='%{event.duration}' username='%{user.name}' roles='%{?roles}' encrypted='%{?is_encrypted}'] %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "IKE negotiation failed with error" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 17" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{?data} %{?data} %{?data} %{?data} %{event_action}: SA %{?sa} IKE Version: %{ike_version}, VPN: %{vpn_name} Gateway: %{gateway_name}, Local: %{source.ip}/%{source.port}, Remote: %{destination.ip}/%{destination.port}, Local IKE-ID: %{source.idk_id}, Remote IKE-ID: %{destination.idk_id}, VR-ID: %{?vr_id}"
      }
    }
    if[event_action] =~ "\:" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 18" }
      }
      dissect {
        mapping => {
          "event_action" => "%{?data}: %{rule.name}"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 19" }
      }
      mutate {
        add_field => {
          "rule.name" => "%{event_action}"
        }
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else if[message] =~ "%" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 20" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{?event.created}: %{?hostname} %{rule.description}"
      }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Network Traffic"
      }
    }
  }
  else {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 21" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date_time} {name=%{observer.hostname}} <%{?data}>%{?data} %{event.created} %{?hostname} %{rule.description}"
      }
    }
    if [rule.description] =~ "(root)" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 22" }
      }
      mutate {
        add_field => {
          "rule.category" => "Audit/Access Success"
        }
      }
    }
    else if [rule.description] =~ "last message repeated" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 23" }
      }
      mutate {
        add_field => {
          "rule.category" => "Ops/Information"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 24" }
      }
      mutate {
        add_field => {
          "rule.category" => "Ops/Network Traffic"
        }
      }
    }
  }
  mutate {
    gsub => [ "log.date_time", "'", "" ]
  
  }
  date{
    match => ["event.created", "yyyy-MM-dd'T'HH:mm:ss.SSSZ"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
  }
  mutate{
    rename => {"source.idk_id" =>"network.name"}
    rename => {"destination.idk_id" => "destination.nat.ip"}
    rename => {"ike_version" => "network.iana_number"}
    rename => {"vpn_name" => "network.name"}
    remove_field => ["log.date_time","event_action","client.as.number","client.as.organization.name","client.as.organization.name.text","destination.as.number","destination.as.organization.name","destination.as.organization.name.text","server.as.number","server.as.organization.name","server.as.organization.name.text","source.as.number","source.as.organization.name","source.as.organization.name.text","gateway_name","index_1","index_2"]
  }
  if [destination.nat.ip] {
    if [destination.nat.ip] =~ "a" {
      mutate {
        remove_field => ["destination.nat.ip"]
      }
    }
  }
  # Do not remove this, due to internal need.
  if [host.hostname] and ([host.hostname] != "" or [host.hostname][0] != "" ){
    mutate {
      copy => { "host.hostname" => "host.name" }
    }
  }
  mutate {
      copy => { "observer.hostname"  => "log.source.hostname" }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
