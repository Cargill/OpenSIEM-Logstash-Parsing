# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "tenable_nessus" }
    add_field => { "[event][dataset]" => "tenable_nessus.scanner" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  if [actual_msg] =~ "call stack|-----|# ()|# recv()|# ???()|# bpf_next()" {
    drop {}
  }
  if [actual_msg] =~ "t.nessuscore|T.NessusCore" {
    if [actual_msg] =~ "received signal" or [actual_msg] =~ "Nessus is ready" {
      dissect {
        tag_on_failure => "_dissectfailure_1"
        mapping => {
          "actual_msg" => "%{?data->} %{?data} %{?data} %{[[host][hostname]]} %{?data} [%{?data} %{[[event][start]]}][%{?data}] %{[[rule][description]]}"
        }
      }
      if [actual_msg] =~ "received signal" {
        mutate {
          add_field => { "[event][action]" => "Nessus Service stopped" }
        }
      }
      else {
        mutate {
          add_field => { "[event][action]" => "Nessus Service started back up and running" }
        }
      }
    }
    else {
      grok {
        tag_on_failure => "_grokparsefailure_1"
        match => {
          "actual_msg" => "(.*?) (.*) (?<[host][hostname]>.*) (T.NessusCore)?(t.nessuscore)? \[(.*?) (?<[event][start]>.*?)\]\[(.*?)\]\[(?<tmp>.*?)( )?\:( )?(?<[rule][description]>.*)"
        }
        timeout_millis => 500
      }
    }
    if [rule][description] =~ "Finished" {
      if [rule][description] =~ "hosts up" {
        mutate {
          add_field => { "[event][action]" => "Finished scanning a scan chunk" }
        }
      }
      else {
        mutate {
          add_field => { "[event][action]" => "Scan Completed on Target IP" }
        }
      }
    } else if [rule][description] =~ "starting with " {
      dissect {
        tag_on_failure => "_dissectfailure_2"
        mapping => {
          "[rule][description]" => "%{?data}: %{tmp_ip}"
        }
      }
      if [tmp_ip] =~ "((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)),|-" {
        grok {
          tag_on_failure => "_grokparsefailure_2" 
          match => {
            "tmp_ip" => "(?<[network][network_range][gte]>.*)(,|-)(?<[network][network_range][lte]>.*)"
          }
          timeout_millis => 500
        }
        if "," in [network][network_range][gte] or "-" in [network][network_range][gte] {
          mutate {
            remove_field => [ "[network][network_range]" ]
          }
        }
      }
      mutate {
        remove_field => [ "tmp_ip" ]
      }
      mutate {
        add_field => { "[event][action]" => "Scan Started" }
      }
    } else if [rule][description] =~ "Started with " {
      mutate {
        add_field => { "[event][action]" => "Scan Started" }
      }
    } else if [rule][description] =~ "too slow" {
      mutate {
        add_field => { "[event][action]" => "Plugin too slow" }
      }
    } else if [rule][description] =~ "Collecting report info" {
      mutate {
        add_field => { "[event][action]" => "Report collected for finished scan chunk" }
      }
    } else if [rule][description] =~ "Warning: " {
      dissect {
        tag_on_failure => "_dissectfailure_3"
        mapping => {
          "[rule][description]" => "%{?data} scan %{[[destination][address]]}, %{?data}"
        }
      }
    }
    mutate {
      gsub => ["tmp" ,"\]",""]
      gsub => ["tmp" ,"\[",","]
    }
    kv {
      source => "tmp"
      field_split => ","
      value_split => "="
      target => "ns"
    }
    mutate {
      rename => {"[ns][target]" => "[destination][address]"}
      rename => {"[ns][port]" => "[destination][port]"}
      rename => {"[ns][pid]" => "[process][pid]"}
      rename => {"[ns][scan]" => "[event][id]"}
      rename => {"[ns][duration]" => "[event][duration]"}
      rename => {"[ns][plugin]" => "[file][name]"}
    }
    if [ns][name] {
      if [ns][name] =~ "Chunk " {
        dissect {
          tag_on_failure => "_dissectfailure_4"
          mapping => {
            "[ns][name]" => "%{[[file][uid]]}/Chunk %{[[process][entity_id]]}."
          }
        }
      } else {
        dissect {
          tag_on_failure => "_dissectfailure_5"
          mapping => {
            "[ns][name]" => "%{[[file][uid]]}"
          }
        }
      }      
    }
    if [event][duration] {
      mutate {
        gsub => ["[event][duration]" ,"s",""]
        convert => { "[event][duration]" => "float" }
      }
      ruby {
        code => "event.set('[event][duration]',event.get('[event][duration]')* 10e9)"
      }
    }
    date {
      tag_on_failure => "_dateparsefailure"
      match => ["[event][start]", "MMM  dd HH:mm:ss yyyy", "MMM dd HH:mm:ss yyyy", "ISO8601"]
      timezone => "GMT"
      locale => "en"
      target => "[event][start]"
    }
    if "_dateparsefailure" in [tags] {
      mutate {
        remove_field => ["[event][start]"]
      }
    }
  }
  else {
    mutate {
      add_tag => ["unparsed"]
    }
  }
  mutate {
    remove_field => ["ns", "tmp", "actual_msg"]
    add_tag=>["cmdb_enrichment"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
