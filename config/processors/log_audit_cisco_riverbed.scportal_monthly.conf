input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  if [message] =~ "appmodel.max_map_search_time_ms" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1 (to be dropped)" }
    }
    drop {}
  }
  if [message] =~ "{'" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2" }
    }
    dissect {
      mapping => {
        "message" => "%{hostname} %{host.hostname},%{model}: %{model.name},%{objtype}: %{obj.typename},%{product}: %{product.name},%{runtime}: %{runtime.id},%{schema}: %{schema.hash},%{serial}: %{serial.id},%{source}: %{source.name},%{systemtime}: %{system.time},%{version}: %{version.id}"
      }
    }
    mutate {
      gsub => ["version.id", "}\r" , ""]
    }
  }
  else if [message] =~ "^Start" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 3" }
    }
    dissect {
      mapping => {
        "message" => "%{msg1} %{msg2} %{msg3}  %{time} %{msg4} %{msg5} %{date}"
         # "message" => "%{msgva1} %{rest}"
      }
    }
    mutate {
      gsub => ["date", "\r" , ""]
      add_field => {
        "start.date" => "%{date} %{time}"
      }
    }
  }
  else {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 4" }
    }
    dissect {
      mapping => {
        "message" => "%{log.dat} %{log.time},%{process.pid} [%{rule.category}] %{log.level}  %{rule.description} "
      }
    }
    mutate {
      add_field => {
        "log.date" => "%{log.dat} %{log.time}"
      }
    }
  }
  date {
    match => ["log.date" , "yyyy-MM-dd HH:mm:ss"]
    target => "@timestamp"
  }
  mutate {
    remove_field => ["log.dat" , "log.time", "model" , "objtype" , "version" , "schema" , "hostname" , "product" , "serial" , "systemtime" , "source" , "host" , "runtime" , "log.date"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}