# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    copy => { "message" => "log.original" }
  }

  mutate {
    add_field => { "event.module" => "cisco.mso" }
    add_field => { "event.dataset" => "cisco.mso" }
    add_field => { "observer.vendor" => "cisco" }
    add_field => { "observer.product" => "cisco.mso" }
    add_field => { "observer.type" => "network_management" }
  }
  mutate {
    add_field => { "agent.rule" => "logstash" }
  }
  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" {
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => "(\<(?<pri>\d+)\>( )?)?(?<rest_msg>.*?)$" }
    }

  } else {
  ### Filebeats udp or tcp in
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => ".*?\{name=.*?} (\<(?<pri>\d+)\>( )?)?(?<rest_msg>.*?)$" }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  dissect {
    tag_on_failure => "_dissect_failure_1"
    mapping => {
      rest_msg => "%{event.created->} %{+event.created} %{+event.created} msc-logging-service fluentd: message:%{mso}"
    }
  }
  date {
    match => [ "event.created", "MMM dd HH:mm:ss"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
  }
  # failed logins via user
  if [mso] =~ "failed attempt" {
    dissect {
      tag_on_failure => "_dissect_failure_2"
      mapping => {
        mso => "%{date} %{+date} [%{?somedata}] %{?somedata} - User : %{user.name} %{rule.description}:%{repeated_msg}"
      }
    }
  }
  else {
    dissect {
      tag_on_failure => "_dissect_failure_3"
      mapping => {
        mso => "%{date} %{date} [%{?somedata}] %{?somedata} - %{rule.description}: %{+rule.description}: %{+rule.description}event:%{repeated_msg}"
      }
    }
  }
  mutate {
    remove_field => ["rest_msg", "mso", "repeated_msg", "date"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
