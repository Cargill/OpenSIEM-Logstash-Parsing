# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "preempt" }
    add_field => { "[event][dataset]" => "preempt.threat_intelligence" }
  }
  
  mutate {
    strip => ["message"]
  }
  dissect {
    mapping => {
      message => "%{[[log][date_time]]} {%{?data}} <%{[[log][level]]}>%{[[event][created]]->} %{+[[event][created]]} %{+[[event][created]]} %{?data}|%{?data}|%{?data}|%{?data}|%{[[rule][name]]}|%{[[rule][description]]}|%{?data}start=%{[[event][start]]} end=%{[[event][end]]} %{+[[event][end]]} %{+[[event][end]]} %{+[[event][end]]} %{+[[event][end]]} %{kv_msg}"
    }
  }
  kv {
    source => "kv_msg"
    field_split => " "
    value_split => "="
    target => "preem"
  }
  mutate {
    rename => {
      "[preem][externalId]" => "[rule][uuid]"
      "[preem][suser]" => "user_name"
      "[preem][src]" => "[source][ip]"
      "[preem][shost]" => "[host][hostname]"
      "[preem][cat]" => "[rule][ruleset]"
      "[preem][cn1]" => "[process][count]"
      "[preem][cs1]" => "[event][reference]"
    }
  }
  if [user_name] {
    if [user_name] =~ ".com" or [user_name] =~ ".COM" {
      mutate {
        add_field => {"parsing rule" => "Rule 1"}
        gsub => ["user_name",'[\\]',";"]
      }
      dissect {
        mapping => {
          user_name => "%{[[user][domain]]->};%{[[user][name]]}"
        }
      }
      mutate {remove_field => ["user_name"]}
    }
    else {
      mutate {
        rename => {"user_name" => "[user][name]"}
      }
    }
  }
  date {
    match => [ "[event][start]" , "MMM dd yyyy HH:mm:ss +mm:ss", "MMM dd yyyy HH:mm:ss" ] 
    timezone => "GMT"
    locale => "en"
    target => "[event][start]"
  }
  date {
    match => [ "[event][end]" , "MMM dd yyyy HH:mm:ss +mm:ss" ,"MMM dd yyyy HH:mm:ss"] 
    timezone => "GMT"
    locale => "en"
    target => "[event][end]"
  }
  mutate{
    remove_field => ["[log][date_time]","[event][created]","kv_msg","[preem]"]
  }  
  # Do not remove this, due to internal need.
  if [host][hostname] and ([host][hostname] != "" or [host][hostname][0] != "" ){
    mutate {
      copy => { "[host][hostname]" => "[host][name]" }
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
