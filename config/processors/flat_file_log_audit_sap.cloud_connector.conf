input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  if [message] =~ "^Date & Time" {
    drop {}
  }
  mutate {
    add_field => {
      "[event][module]" => "sap"
      "[event][dataset]" => "sap.cloud_connector"
    }
    copy => { "[host][name]" => "[log][source][hostname]" }
    lowercase => [ "message" ]
  }
  dissect {
    mapping => {
      "message" => "%{[event][created]} %{+[event][created]} %{?data},%{?data},%{?data},%{?data},%{[event][action]},%{[rest_msg]}"
    }
    tag_on_failure => "_dissectfailure"
  }
  if [event][action] and [event][action] =~ "unspecified" {
    grok {
      match => {
        "rest_msg" => "^.*? file (?<[file][name]>.*?) .*? serial (?<[file][x509][serial_number]>.*?) .*?"
      }
      tag_on_failure => "_grokfailure_1"
    }
  }
  if [event][action] and [event][action] =~ "service_stopped|service_started"  {
    grok {
      match => {
        "rest_msg" => "(?<[process][name]>.*?) \[(?<[destination][address]>.*?)\] .*? account://(?<[user][name]>.*?) .*?"
      }
      tag_on_failure => "_grokfailure_2"
    }
  }
  if [event][action] and [event][action] =~ "op_access_allowed" {
    grok {
      match => {
        "rest_msg" => "^.*? user (?<[user][name]>.*?) to resource (?<[process][name]>.*?) on system (?<[destination][address]>.*?):(?<[destination][port]>.*?) .*?"
      }
      tag_on_failure => "_grokfailure_3"
    }
  }
  mutate {
    gsub => [ "[event][created]", "^(.*?) (.*?\.\d\d\d).*?$", "\1T\2" ]
  }
  date {
    match => ["[event][created]" , "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  mutate {
    remove_field => [ "[agent][hostname]", "fields", "input", "type", "data" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}