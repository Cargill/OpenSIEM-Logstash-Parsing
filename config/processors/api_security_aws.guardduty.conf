# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  json {
    source => "message"
    target => "guard"
  }
  mutate {
    add_field => { "[cloud][provider]" => "aws" }
    add_field => { "[event][module]" => "aws" }
    add_field => { "[event][dataset]" => "aws.guardduty" } 
    remove_field => [ "host", "event" ]   
  }
  ruby {
    init => '@ignore = [ "path", "@timestamp", "@metadata", "host", "@version" ]'
    code => '
      def processArray(a)
        newArray = []
        a.each { |x|
          newArray << processObject(x)
        }
        newArray
      end
      def processHash(h)
        newHash = {}
        h.each { |k, v|
          newHash[k.downcase] = processObject(v)
        }
        newHash
      end
      def processObject(v)
        if v.kind_of?(Array)
          processArray(v)
        elsif v.kind_of?(Hash)
          processHash(v)
        else
          v
        end
      end
      def filter(i_event)
        i_event.to_hash.each { |k, v|
          unless @ignore.include?(k)
            i_event.remove(k)
            i_event.set(k.downcase, processObject(v))
          end
        }
        [i_event]
      end
      filter(event)
    '
  }  
  mutate {
    tag_on_failure => "mutate 1 failure"
    rename => { "[guard][severity]" => "[event][severity]" }
    rename => { "[guard][createdat]" => "[event][created]" }
    rename => { "[guard][updatedat]" => "[event][modified]" }
    rename => { "[guard][title]" => "[event][reason]" }
    rename => { "[guard][description]" => "[rule][description]" }
    rename => { "[guard][schemaversion]" => "[service][version]" }
    rename => { "[guard][accountid]" => "[cloud][account][id]" }
    rename => { "[guard][region]" => "[cloud][region]" }
    rename => { "[guard][partition]" => "[cloud][provider]" }
    rename => { "[guard][id]" => "[event][id]" }
    rename => { "[guard][type]" => "[rule][name]" }
    rename => { "[guard][resource][instancedetails][availabilityzone]" => "[cloud][availability_zone]" }
    rename => { "[guard][resource][instancedetails][imagedescription]" => "[container][image][name]" }
    rename => { "[guard][resource][instancedetails][instanceid]" => "[cloud][instance][id]" }
    rename => { "[guard][resource][instancedetails][instancestate]" => "[service][state]" }
    rename => { "[guard][resource][instancedetails][instancetype]" => "[cloud][machine][type]" }
    rename => { "[guard][resource][instancedetails][networkinterfaces][subnetid]" => "[network][name]" }
    rename => { "[guard][resource][instancedetails][networkinterfaces][securitygroups][groupname]" => "[user][group][name]" }
    rename => { "[guard][resource][instancedetails][networkinterfaces][securitygroups][groupid]" => "[user][group][id]" }
    rename => { "[guard][resource][accesskeydetails][username]" => "[user][name]" }
    rename => { "[guard][service][action][awsapicallaction][remoteipdetails][organization][asn]" => "[source][as][number]" }
    rename => { "[guard][service][action][awsapicallaction][remoteipdetails][organization][asnorg]" => "[source][as][organization][name]" }
    rename => { "[guard][service][action][awsapicallaction][servicename]" => "[service][name]" }  
    rename => { "[guard][service][action][networkconnectionaction][remoteipdetails][ipaddressv4]" => "[source][ip]" } 
    rename => { "[guard][service][action][networkconnectionaction][localipdetails][ipaddressv4]" => "[destination][ip]" } 
    rename => { "[guard][service][action][actiontype]" => "[rule][category]" }
    rename => { "[guard][service][action][portprobeaction][portprobedetails][localportdetails][port]" => "[destination][port]"	}
    rename => { "[guard][service][detectorid]" => "[rule][id]" }
    rename => { "[guard][service][eventfirstseen]" => "[event][start]" }
    rename => { "[guard][service][eventlastseen]" => "[event][end]" }
    rename => { "[guard][resource][instancedetails][networkinterfaces][privateipaddresses][privateipaddress]" => "[source][ip]" }
    rename => { "[guard][resource][instancedetails][tags][value]" => "[source][tmp]" }
  }
  mutate {
    add_field => { "[log][source][hostname]" => "%{[cloud][account][id]}" }
  }
  if [guard][service][additionalinfo][sample] {  
    mutate {
      add_field => { "[log][syslog][priority]" => "0" }
    }
  }


  if "[guard][resource][instancedetails][networkinterfaces][0][securitygroups][0][groupname]" {
    mutate {
      rename => { "[guard][resource][instancedetails][networkinterfaces][0][securitygroups][0][groupname]" => "[cloud][project][name]" }
    }    
  }
  if [guard][resource][instancedetails][networkinterfaces][0][securitygroups][1][groupname] {
      mutate {
         merge => { "[cloud][project][name]" => "[guard][resource][instancedetails][networkinterfaces][0][securitygroups][1][groupname]" }
      }
  }
  if [guard][resource][instancedetails][networkinterfaces][0][securitygroups][2][groupname] {
      mutate {
         merge => { "[cloud][project][name]" => "[guard][resource][instancedetails][networkinterfaces][0][securitygroups][2][groupname]" }
      }
  }
  if [guard][resource][instancedetails][networkinterfaces][0][securitygroups][3][groupname] {
      mutate {
         merge => { "[cloud][project][name]" => "[guard][resource][instancedetails][networkinterfaces][0][securitygroups][3][groupname]" }
      }
  }
  if [guard][resource][instancedetails][networkinterfaces][0][securitygroups][4][groupname] {
      mutate {
         merge => { "[cloud][project][name]" => "[guard][resource][instancedetails][networkinterfaces][0][securitygroups][4][groupname]" }
      }
  }  
  if ![source][ip] and [source][ip] == "" {
    mutate {
      update => { "[source][ip]" => "%{[tmp][resource][instanceDetails][networkInterfaces][0][ipv6addresses]}" }
    }
  }
  date {
    match => ["[event][created]","yyyy-MM-dd HH:mm:ss.SSS", "ISO8601"]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
    mutate {
      remove_field => ["[event][created]"]
    }
  }
  date {
    match => ["[event][modified]","yyyy-MM-dd HH:mm:ss.SSS", "ISO8601"]
    timezone => "GMT"
    locale => "en"
    target => "[event][modified]"
    tag_on_failure => "_dateparsefailure_em"
  }
  if "_dateparsefailure_em" in [tags]  {
    mutate {
      remove_field => ["[event][modified]"]
    }
  }
  date {
    match => ["[event][start]", "ISO8601", "yyyy-MM-dd HH:mm:ss.Z"]
    timezone => "GMT"
    locale => "en"
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_es"
  }
  if "_dateparsefailure_es" in [tags]  {
    mutate {
      remove_field => ["[event][start]"]
    }
  }
  date {
    match => ["[event][end]", "ISO8601", "yyyy-MM-dd HH:mm:ss.Z"]
    timezone => "GMT"
    locale => "en"
    target => "[event][end]"
    tag_on_failure => "_dateparsefailure_ee"
  }
  if "_dateparsefailure_ee" in [tags]  {
    mutate {
      remove_field => ["[event][end]"]
    }
  }
  mutate {
    remove_field => [ "guard" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}