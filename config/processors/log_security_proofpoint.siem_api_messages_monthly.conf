input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "proofpoint siem messages" }
    add_field => { "event.dataset" => "proofpoint siem messages allowed and blocked" }
    add_field => { "observer.vendor" => "proofpoint" }
    add_field => { "observer.product" => "proofpoint siem" }
    add_field => { "observer.type" => "email processing log feed" }
  }
  json {
    source => "message"
    target => "pp"
    }
  mutate {
    copy => { "message" => "log.original" }
  }
  mutate {
    rename => {"[pp][url]" => "url.full" }
    rename => {"[pp][classifications]" => "event.type"}
    rename => {"[pp][file_hashes]" => "related.hash"}
    rename => {"[pp][threat_urls]" => "rule.reference"}
    rename => {"[pp][threat_ids]" => "rule.id"}
    rename => {"[pp][threat_statuses]" => "rule.category"}
    rename => {"[pp][file_names]" => "file.attributes"}
    rename => {"[pp][event.dataset]" => "event.dataset" }
    
    rename => {"[pp][messageTime]" => "event.created"}
    rename => {"[pp][messageSize]" => "file.size"}
    rename => {"[pp][modulesRun]" => "rule.author"}
    rename => {"[pp][quarantineFolder]" => "rule.category"}
    rename => {"[pp][quarantineRule]" => "rule.name"}
    rename => {"[pp][policyRoutes]" => "event.category"}
    rename => {"[pp][senderIP]" => "source.ip"}
    rename => {"[pp][QID]" => "transaction.id"}
    rename => {"[pp][GUID]" => "trace.id"}
    rename => {"[pp][messageID]" => "event.id"}
    rename => {"[pp][sender]" => "source.user.email"}
    # TODO: check later to see if this can have multiple values
    rename => {"[pp][recipient]" => "destination.user.email"}
    rename => {"[pp][xmailer]" => "user_agent.original"}
    
    
    # TODO: Update the ECS Fields
    rename => {"[pp][spamScore]" => "event.risk_score"}
    rename => {"[pp][malwareScore]" => "vulnerability.score.base"}
    rename => {"[pp][phishScore]" => "event.risk_score_norm"}
    rename => {"[pp][impostorScore]" => "event.severity"}
    
    # these have to be custom ecs fields
    rename => {"[pp][subject]" => "email.subject"}
    rename => {"[pp][headerFrom]" => "email.header_from"}
    rename => {"[pp][headerReplyTo]" => "email.header_replyto"}

  }

  if [pp][completelyRewritten] {
    mutate {
      add_field => { "event.outcome" => "completelyRewritten"}
    }
  } else {
    mutate {
      add_field => { "event.outcome" => "notRewritten"}
    }
  }

   mutate {
    tag_on_failure => "mutate failure"
    remove_field => ["pp"]
   }
  
 
  # "messageTime": "2020-08-31T19:22:27.000Z"
  date {
    # "event.created" 2020-08-31T16:48:54.000Z
    match => ["event.created","yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  
  if "_dateparsefailure_ec" in [tags]  {
    if ![log.orignal] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
      remove_field => ["event.created"]
    }    
  }
  
}
output {
  pipeline { send_to => [enrichments] }
}