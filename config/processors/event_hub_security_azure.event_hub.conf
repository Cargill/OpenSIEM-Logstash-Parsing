# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "azure" }
    add_field => { "[event][dataset]" => "azure.eventhub.security" }
    add_field => { "[kafka][topic]" =>  "api_azure.eventhub.security" }
    add_field => { "[agent][name]" =>  "azure.eventhub" }
    add_field => { "[log][source][hostname]" => "api_azure_eventhub_security" }
  }
  mutate {
    gsub => ["message" ," ",""]
  }
  json {
    source => "message"
    target => "tmp"
  }
  if [tmp][records][0] {
    split {
      field => "[tmp][records]"
      target => "azsec"
    }
    json_encode {
      source => "azsec"
      target => "message"
    }
  }
  mutate {
    rename => {"[azsec][operationName]" => "[rule][name]"}
    rename => {"[azsec][properties][recommendationCategory]" => "[event][category]"}
    rename => {"[azsec][properties][recommendationImpact]" => "[event][severity_name]"}
    rename => {"[azsec][properties][recommendationName]" => "[event][recommendation]"}
    rename => {"[azsec][properties][recommendationSchemaVersion]" => "[rule][version]"}
    rename => {"[azsec][properties][recommendationResourceLink]" => "[event][reference]"}
    rename => {"[azsec][properties][recommendationType]" => "[event][type]"}
    rename => {"[azsec][resultSignature]" => "[error][code]"}
    rename => {"[azsec][resultType]" => "[event][action]"}
    rename => {"[azsec][level]" => "[log][level]"}
    rename => {"[azsec][resultDescription]" => "[rule][description]"}
    rename => {"[azsec][callerIpAddress]" => "[source][ip]"}
    rename => {"[azsec][category]" => "[rule][category]"}
    rename => {"[azsec][location]" => "[host][geo][name]"}
    rename => {"[azsec][time]" => "[event][start]"}
    rename => {"[azsec][operationVersion]" => "[host][os][version]"}
    rename => {"[azsec][durationMs]" => "[event][duration]"}

    rename => {"[tmp][Severity]" => "[event][severity_name]"}
    rename => {"[tmp][SystemAlertId]" => "[event][id]"}
    rename => {"[tmp][Intent]" => "[threat][tactic][name]"}
    rename => {"[tmp][AlertDisplayName]" => "[rule][name]"}
    rename => {"[tmp][Description]" => "[rule][description]"}
    rename => {"[tmp][AlertUri]" => "[event][url]"}
  }
  ruby {
    code => "
      hash_md5_list = []
      hash_sha1_list = []
      hash_sha256_list = []
      hash_sha512_list = []
      if event.get('[tmp][Entities]').kind_of?(Array)
        event.get('[tmp][Entities]').each do |item|
          if item['FileHashes'] and item['FileHashes']!= ''
            item['FileHashes'].each do |hash|
              if hash['Algorithm'] == 'MD5'
                hash_md5_list.push(hash['Value'])
              end
              if hash['Algorithm'] == 'SHA1'
                hash_sha1_list.push(hash['Value'])
              end
              if hash['Algorithm'] == 'SHA256'
                hash_sha256_list.push(hash['Value'])
              end
              if hash['Algorithm'] == 'SHA512'
                hash_sha512_list.push(hash['Value'])
              end
            end
          end
        end
      end
      if !hash_md5_list.empty?
        event.set('[file][hash][md5]', hash_md5_list)
      end
      if !hash_sha1_list.empty?
        event.set('[file][hash][sha1]', hash_sha1_list)
      end
      if !hash_sha256_list.empty?
        event.set('[file][hash][sha256]', hash_sha256_list)
      end
      if !hash_sha512_list.empty?
        event.set('[file][hash][sha512]', hash_sha512_list)
      end
    "
    tag_on_exception => "hash_ruby_block"
  }
  mutate {
    remove_field => [ "[tmp]", "[azsec]" ]
  }
  date {
    match => ["[event][start]" , "ISO8601"]
    timezone => "GMT"
    locale => "en"
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_es"
  }

  if "_dateparsefailure_es" in [tags]  {
    mutate {
      remove_field => ["[event][start]"]
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
