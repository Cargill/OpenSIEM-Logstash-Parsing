# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "sap.onapsis" }
    add_field => { "event.dataset" => "sap.onapsis" }
    add_field => { "observer.vendor" => "sap" }
    add_field => { "observer.product" => "onapsis" }
    add_field => { "observer.type" => "app protection" }
  }
  # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<rest_msg>.*?)%" }
  }
  mutate {
    strip => ["message"]
  }
if [message] =~ '^*"event_id": "HeartBeat"*' or [message] !~ '^.*? {name=.*?} .*?$' {
  # drop {}
  mutate {
    add_field => { "rule.category" => "hearbeat" }
  }
}
  dissect {
    mapping => {
      message => "%{log.date_time} {%{?data}} %{msg}"
    }
  }

  if [msg] =~ '^{"incident_type":' {
    json {
      source => "msg"
      target => "sap"
    }
    mutate {
      rename => {"[sap][event_type]" => "event.type"}
      rename => {"[sap][protocol]" => "network.protocol"}
      rename => {"[sap][alarm_name]" => "rule.description" }
      rename => {"[sap][event_id]" => "event.id" }
      rename => {"[sap][username]" => "user.name" }
      rename => {"[sap][erp_time]" => "event.created"}
      rename => {"[sap][incident_detail]" => "event.original"}
      rename => {"[sap][success]" => "rule.ruleset"}
      rename => {"[sap][sid]" => "service.id"}
      rename => {"[sap][reason]" => "rule.description"}
      rename => {"[sap][source_port]" => "source.port"}
      rename => {"[sap][user_type]"  => "user_agent.original"}
      rename => {"[sap][system_type]" => "package.name"}
      rename => {"[sap][asset_name]" => "service.node.name"}
      rename => {"[sap][incident_name]" =>  "rule.name"}
      rename => {"[sap][client]" => "host.type"}
      rename => {"[sap][sev]" => "event.severity"}
      rename => {"[sap][incident_type]" => "process.name"}
    }
# Some times src and erp_host are IP's and some times they are hostnames

    if [sap][src] =~ "\d+\.\d+\.\d+\.\d+" {
      mutate {
        rename => {"[sap][src]" => "source.ip"}
      }
    } else {
      mutate {
        rename => {"[sap][src]" => "source.adress"}
      }
    }
    if [sap][erp_host] =~ "\d+\.\d+\.\d+\.\d+" {
      mutate {
        rename => {"[sap][erp_host]" => "destination.ip" }
      }
    } else {
      mutate {
        rename => {"[sap][erp_host]" => "destination.ip" }
      }
    }
    mutate {
      remove_field => ["[sap]","log.date_time","msg"]
    }
    date {
      match => [ "event.created", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss.SSS","MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss","ISO8601"]
      timezone => "GMT"
      locale => "en"
      target => "event.created"
    }
  } else {
      grok {
        match => { "msg" => '.*?dst=(?<destination_ip>.*?)\s.*?erpHost=(?<source_ip>.*?)\s.*?eventType=(?<event_type>.*?)\s.*?incidentDetail=(?<event_original>.*?)incidentName.*?protocol=(?<network_protocol>.*?)\s.*?reason=(?<rule_description>.*?)\ssourcePort=(?<source_port>.*?)\s.*?success=(?<rule_ruleset>.*?)\s.*?systemType=(?<package_name>.*?)\sterminalSource=(?<source_address>.*?)\s.*?usrName=(?<user_name>.*?)\s.*?userType=(?<user_agent_original>.*?)\salarmProfileMatches=.*?alarm_name\": \"(?<rule_name>.*?)",.*?eventId=(?<event_id>\w+)'}
      }
      mutate {
        remove_field => ["[sap]","log.date_time","msg"]
      }
  }

   translate {
    field => "[event.type]"
    destination => "[rule.category]"
    dictionary => {
      "UserLogin" => "Audit/Access Success"
      "UserUnlocked" => "Audit/Access Granted"
      "SystemChangeGlobalSettingUpdate" => "Audit/Other"
      "ClientSpecificSettingsAllowance" => "Audit/Other"
    }
    fallback => "Others"
  }
  
}
output {
  pipeline { send_to => [enrichments] }
}
