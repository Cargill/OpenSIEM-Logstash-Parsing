# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "a10" }
    add_field => { "[event][dataset]" => "a10.waf" }
  }
  
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }

  if [actual_msg] == "a10" or [actual_msg] == "^A10" {
    # drop a10 health checks
    drop {}
  }

  if [actual_msg] =~ "^.*?(CEF|cef):.*?$" and [actual_msg] =~ "(WAF|waf)" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 1" }
    }
    grok {
      tag_on_failure => "grok_parsefailure"
      match => { "actual_msg" => "^.*?(?<[process][name]>.*?)\:\d+\|.*?\|.*?\|(?<[agent][version]>.*?)\|(WAF|waf).*?\|.*?\|(?<[event][severity]>.*?)\|rt=(?<[event][created]>.*?) src=(?<[source][ip]>.*?) spt=(?<[source][port]>\d+) dst=(?<[destination][ip]>.*?) dpt=(?<[destination][port]>\d+) dhost=(?<[host][ip]>.*?)(\:\d+)? cs1=(?<[rule][name]>.*?) cs2=(?<[event][id]>.*?) act=(?<[event][action]>.*?) cs3=(?<[rule][ruleset]>.*?) app=(?<[network][protocol]>.*?) requestMethod=(?<[http][request][method]>.*?) cn1=.*? request=(?<[url][path]>.*?) msg=(?<[rule][description]>.*?)( id=.*?)?( form=.*?)?$" }
      timeout_millis => 500
    }
    if [network][protocol] and [url][domain] and [destination][port] and [http][request][body][content] {
      mutate {
        add_field => { "[url][full]" => "%{[network][protocol]}://%{[[url][domain]]}:%{[[destination][port]]}%{[[http][request][body][content]]}" }
      }
    }
    if [url][domain] {
      mutate {
        add_field => { "[url][full]" => "%{[[url][scheme]]}://%{[[url][domain]]}/%{[[url][path]]}" }
      }
    }
  } else if [actual_msg] =~ "(r|R)esets (C|c)onnection" {
    dissect {
      add_field => { "[agent][parse_rule]" => "RULE 2" }
      tag_on_failure => "_dissectfailure_1"
      mapping => {
        "actual_msg" => "[%{?data}] %{[[network][transport]]} %{[[source][ip]]} > %{[[destination][ip]]}:%{[[destination][port]]->} %{?data} %{[[event][action]]}"
      }
    }
  } else if [actual_msg] =~ "persist-xff:" {
    if [actual_msg] =~ "client_ip" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 3(a)" }
      }
      grok {
        tag_on_failure => "_parsefailure_body2"
        #persist-xff:uri=/; client_ip=10.47.134.204; user_agent=0;
        #persist-xff:mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/105.0.0.0 safari/537.36, /portal/transportador/cargillfm/incluirplaca/add] 167.136.35.66
        #persist-xff:oc/16.0.14931.20724 (skype for business), /groupexpansion/service.svc/webticket_bearer] 217.122.166.113
        match => { "actual_msg" => "^(?<[event][type]>.*?):(?<[user_agent][original]>.*?)\; client_ip=(?<[client][ip]>.*?);.*?$" }
        timeout_millis => 500
      }
    } else { 
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 3(b)" }
      }
      grok {
        tag_on_failure => "_parsefailure_body3"
        #persist-xff:uri=/; client_ip=10.47.134.204; user_agent=0;
        #persist-xff:mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/105.0.0.0 safari/537.36, /portal/transportador/cargillfm/incluirplaca/add] 167.136.35.66
        #persist-xff:oc/16.0.14931.20724 (skype for business), /groupexpansion/service.svc/webticket_bearer] 217.122.166.113
        match => { "actual_msg" => "^((?<[month]>.*?) (?<[date]>.*?) (?<[time]>.*?) (?<[host][hostname]>.*?) (?<[process][name]>.*?)\: \[(?<[event][module]>.*?)\]\<(?<[log][syslog][severity][code]>.*?)\>)?(?<[event][type]>.*?):(?<[user_agent][original]>.*)\, (?<[url][path]>.*?)(\] (?<[source][ip]>.*?))?$" }
        timeout_millis => 500
      }
      if [month] and [date] and [time] {
        mutate {
          add_field => { "[event][created]" => "%{month} %{date} %{time}"}
        }
      }
    }
  } else {
    mutate {
      add_field => { "[agent][parse_rule]" => "no rule match" }
    }
  }
  # [event][created] = jan 06 2021 15:14:53
  date {
    match => ["[event][created]","MMM dd yyyy HH:mm:ss"]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags] {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
      remove_field => ["[event][created]"]
    }
  }
  mutate {
    remove_field => ["actual_msg", "pri", "cn1"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
