# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    gsub => [ 
      "message", "\r", "",
      "message", '"', ''
    ]
  }

  kv {
    source => "message"
	  transform_key=> "lowercase"
	  target => fs
    allow_duplicate_values => false
    tag_on_failure => "_kv_filter_error_fs"
    value_split => ':'
    field_split => ';'
    trim_key => " "
    trim_value => " "
    }     
  mutate {  
    rename => { "[fs][netbiosname]" => "host.hostname" }
    rename => { "[fs][dns_hostname]" => "dns.answers.name" }
    rename => { "[fs][dhcp_hostname]" => "host.hostname" }
    rename => { "[fs][user_name]" => "user.name" }
    rename => { "[fs][ad_display_name]" => "user.full_name" }
    rename => { "[fs][ad_username]" => "user.id" }
    rename => { "[fs][online]" => "event.action" }
    rename => { "[fs][ip]" => "host.ip" }
    rename => { "[fs][mac]" => "host.mac" }
    rename => { "[fs][nic_vendor]" => "host.manufacturer" }
    rename => { "[fs][function]" => "host.type" }
    rename => { "[fs][os]" => "host.os.name" }
    rename => { "[fs][vendor_model]" => "host.model" } 
    rename => { "[fs][sw_port_alias]" => "observer.ingress.interface.alias" } 
    rename => { "[fs][num_of_hosts_on_port]" => "observer.ingress.interface.host_count" }
    rename => { "[fs][segment_path]" => "network.name" }
    rename => { "[fs][wlan_ap_name]" => "observer.name" }
    rename => { "[fs][wlan_ctp_ip]" => "observer.ip" }
    rename => { "[fs][wlan_ssid]" => "network.vlan.id" }
    rename => { "[fs][serial_number]" => "host.serial" }
    rename => { "[fs][timestamp]" => "event.created" }
    strip => ["host.serial"]  
    add_field => { "event.module" => "forescout inventory" }
    add_field => { "event.dataset" => "forescout device inventory" }
    add_field => { "observer.vendor" => "forescout" }
    add_field => { "observer.product" => "forescout" }
    add_field => { "observer.type" => "forescout" }
  }
  if [fs][aci_ep_sw_port] and [fs][aci_ep_sw_port] !~ "^[iI]rresolvable$"  and [fs][aci_ep_sw_port] !~ "^[uU]nknown$" {
    grok {
      match => { "[fs][aci_ep_sw_port]" => "^(?<observer.ingress.interface.name>.*?):(?<observer.ingress.interface.id>.*?)$" }      
      tag_on_failure => "_groktimeout_fs_sw_port1"
    }
  }
  if [fs][sw_ip_port] and [fs][sw_ip_port] !~ "^[iI]rresolvable$" and [fs][sw_ip_port] !~ "^[uU]nknown$" { 
    grok {
      match => { "[fs][sw_ip_port]" => "^(?<observer.ingress.interface.name>.*?):(?<observer.ingress.interface.id>.*?)$" }      
      tag_on_failure => "_groktimeout_fs_sw_port2"
    }
  }  
   # "1614786647"
  date {
    match => ["event.created" , "UNIX_MS" ]
    timezone => "GMT"
    locale => "ec"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.created"]
    }
  }
  mutate {
    remove_field => ["fs", "headers"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
