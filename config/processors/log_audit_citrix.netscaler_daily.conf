input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "citrix.netscale" }
    add_field => { "event.dataset" => "citrix.netscale" }
    add_field => { "observer.vendor" => "citrix" }
    add_field => { "observer.product" => "citrix.netscale" }
    add_field => { "observer.type" => "vpn" }
  }
  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" {
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "<%{pri}> %{rest_msg}"
      }
    }
  } else {
  ### Filebeats udp or tcp in
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "%{?data} {%{?data}} <%{pri}> %{rest_msg}"
      }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  mutate{
    remove_field => ["pri"]
  }
  mutate {
    strip => ["message"]
    gsub => ["message" , '[\"]', ""]
  }
  if[message] == "" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1 (dropped)" }
    }
    drop {}
  }
  else {
    dissect {
      mapping => {
        "message" => "%{log.date_time} {%{?data}} <%{?data}> %{event.created} %{+event.created} %{source.address} %{rest_msg}"
      }
    }
    if[message] =~ "- NatIP" and [message] !~ " - customername  - username:domainname" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 2" }
      }
      grok {
        match => {
          "rest_msg" => "(%{DATA})? : %{DATA:event_description} :  Source %{IP:source.ip}:%{DATA:source.port} - Vserver %{IP:destination.ip}:%{DATA:destination.port} - NatIP %{IP:server.nat.ip}:%{DATA:server.nat.port} - Destination %{DATA:dest.ip}:%{DATA:destination.port} - Delink Time %{DATA:delink_time} (?:- )?Total_bytes_send %{NUMBER:source.bytes} - Total_bytes_recv %{NUMBER:destination.bytes}"
        }
      }
    }
    else if[message] =~ "- connectionId" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 3" }
      }
      grok {
        match => {
          "rest_msg" => "(?:%{DATA})? : %{DATA:event_description} :  Source %{IP:source.ip}:%{NUMBER:source.port} - Destination %{IP:destination.ip}:%{NUMBER:destination.port} - customername  - username:domainname %{DATA:source.user.name}:%{DATA:client.domain} - (?:applicationName %{DATA:host.hostname} - )?startTime %{DATA:event.start} (?:- endTime %{DATA:event.end} - Duration %{DATA:fix_duration}  - Total_bytes_send %{NUMBER:source.bytes} - Total_bytes_recv %{NUMBER:destination.bytes} - Total_compressedbytes_send %{NUMBER:source.compressed_bytes} - Total_compressedbytes_recv %{NUMBER:destination.compressed_bytes} - Compression_ratio_send %{DATA:source.ratio_btyes} - Compression_ratio_recv %{DATA:destination.ratio_bytes} )?- connectionId %{NUMBER:connection_id}(?: - Total_bytes_wire_send %{NUMBER:source.wire_bytes} - Total_bytes_wire_recv %{NUMBER:destination.wire_bytes})?"
        }
      }
    }
    else if[message] =~ "- HandshakeTime" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 4" }
      }
      grok {
        match => {
          "rest_msg" => "(?:%{DATA})? : %{DATA:event_description} :  (?:%{DATA} )?SPCBId %{NUMBER:spcb_id} - (?:ClientIP %{IP:source.ip} - ClientPort %{NUMBER:source.port} - VserverServiceIP %{IP:destination.ip} - VserverServicePort %{NUMBER:destination.port})?(?:ServerIP %{IP:destination.ip} - ServerPort %{NUMBER:destination.port})? - (?:%{DATA})?Version %{DATA:event.version} - (?:CipherSuite %{DATA:cipher_suite} )?- Session %{DATA:session_type} (?: )?- (?:%{DATA:event.action} -SerialNumber %{DATA:serial_number} - SignatureAlgorithm %{DATA:signature_algorithm} - ValidFrom %{DATA:event.start} - ValidTo %{DATA:event.end} - )?HandshakeTime %{GREEDYDATA:handshake_time}"
        }
      }
    }
    else if[message] =~ "SPCBId" and [message] =~ "- SubjectName"{
      mutate {
        add_field => { "agent.parse_rule" => "RULE 5" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description} :  SPCBId %{spcb_id} - SubjectName %{subject_name} %{?data}"
        }
      }
    }
    else if[message] =~ "SPCBId" and [message] =~ "- IssuerName"{
      mutate {
        add_field => { "agent.parse_rule" => "RULE 6" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description} :  SPCBId %{spcb_id} - IssuerName %{issuer_name} %{?data}"
        }
      }
    }
    else if[message] =~ "- Failure_reason" and [message] =~ ":  User"{
      mutate {
        add_field => { "agent.parse_rule" => "RULE 7" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description} :  User %{source.user.name} - Client_ip %{source.ip} - Failure_reason %{rule.category} - Browser %{user_agent.original}"
        }
      }
    }
    else if[message] =~ "- Last_contact" and [message] =~ ": Context"{
      mutate {
        add_field => { "agent.parse_rule" => "RULE 8" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description} : Context %{source.user.name}@%{source.ip} - SessionId: %{?session_id}- User %{?data} - Client_ip %{?data} - Nat_ip %{source.nat.ip} - Vserver %{destination.ip}:%{destination.port} - Last_contact %{event.end} - Group(s) %{group.name}"
        }
      }
    }
    else if([message] =~ ": Context" or [message] =~ ":  User") and [message] !~ "- Http_resources_accessed" and [message] !~ ": Group"  and [message] !~ "- Remote_ip" and [message] !~ "- Browser_type" and [message] =~ "- " {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 9" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description} :%{starting_data}User %{source.user.name} - %{kv_msg}"
        }
      }
      kv {
        source => "kv_msg"
        field_split => "-"
        value_split => " "
        target => "net"
      }
      mutate {
        rename => {
          "[net][Vserver]" => "Vserver"
          "[net][Source]" => "Source"
          "[net][Destination]" => "Destination"
        }
      }
      dissect {
        mapping => {
          Vserver => "%{destination.ip}:%{destination.port}"
        }
      }
      dissect {
        mapping => {
          Source => "%{source.ip}:%{source.port}"
        }
      }
      dissect {
        mapping => {
          Destination => "%{destination.ip}:%{destination.port}"
        }
      }
      mutate {
        rename => {"[net][Nat_ip]" => "source.nat.ip"}
        rename => {"[net][Start_time]" => "event.start"}
        rename => {"[net][End_time]" => "event.end"}
        rename => {"[net][Duration]" => "fix_duration"}
        rename => {"[net][Total_bytes_send]" => "source.bytes"}
        rename => {"[net][Total_bytes_recv]" => "destination.bytes"}
        rename => {"[net][Group(s)]" => "group.name"}
      }
      if [starting_data] =~ " Context" {
        mutate {
          add_field => { "agent.parse_rule" => "RULE 10" }
      }
        dissect {
          mapping => {
            "starting_data" => "%{?data}Context %{?data}@%{?data} - SessionId: %{?session_id}-%{?data}"
          }
        }
      }
    }
    else if([message] =~ ": Context" or [message] =~ ":  User") and [message] =~ "- Http_resources_accessed" and [message] !~ ": Group"  and [message] !~ "- Remote_ip" and [message] !~ "- Browser_type" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 11" }
      }
      if [rest_msg] =~ "NonHttp_services_accessed" and [rest_msg] =~ "Total_UDP_flows" {
        dissect {
          mapping => {
            "rest_msg" => "%{?data} : %{event_description} :%{starting_data}User %{source.user.name} - Client_ip %{source.ip} - Nat_ip %{source.nat.ip} - Vserver %{destination.ip}:%{destination.port} - Start_time %{event.start} - End_time %{event.end} - Duration %{fix_duration}  - Http_resources_accessed %{http_resource_accessed} - NonHttp_services_accessed %{non_http_resource_accessed} - Total_TCP_connections %{total_tcp_connection} - Total_UDP_flows %{total_upd_flows} - Total_policies_allowed %{total_policies_allowed} - Total_policies_denied %{total_policies_denied} - Total_bytes_send %{source.bytes} - Total_bytes_recv %{destination.bytes} - Total_compressedbytes_send %{source.compressed_bytes} - Total_compressedbytes_recv %{destination.compressed_bytes} - Compression_ratio_send %{source.compression_ratio} - Compression_ratio_recv %{destination.compression_ratio} - LogoutMethod %{logout_method} - Group(s) %{group.name}"
          }
        }
      }
      else {
        dissect {
          mapping => {
            "rest_msg" => "%{?data} : %{event_description} :%{starting_data}User %{source.user.name} - Client_ip %{source.ip} - Nat_ip %{source.nat.ip} - Vserver %{destination.ip}:%{destination.port} - Start_time %{event.start} - End_time %{event.end} - Duration %{fix_duration}  - Http_resources_accessed %{http_resource_accessed} - Total_TCP_connections %{total_tcp_connection} - Total_policies_allowed %{total_policies_allowed} - Total_policies_denied %{total_policies_denied} - Total_bytes_send %{source.bytes} - Total_bytes_recv %{destination.bytes} - Total_compressedbytes_send %{source.compressed_bytes} - Total_compressedbytes_recv %{destination.compressed_bytes} - Compression_ratio_send %{source.compression_ratio} - Compression_ratio_recv %{destination.compression_ratio} - LogoutMethod %{logout_method} - Group(s) %{group.name}"
          }
        }
      }
      if [starting_data] =~ " Context" {
        mutate {
          add_field => { "agent.parse_rule" => "RULE 12" }
      }
        dissect {
          mapping => {
            "starting_data" => "%{?data}Context %{?data}@%{?data} - SessionId: %{?session_id}-%{?data}"
          }
        }
      }
    }
    else if[message] =~ ": Context" and [message] =~ "- Browser_type"{
      mutate {
        add_field => { "agent.parse_rule" => "RULE 13" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description} : Context %{source.user.name}@%{source.ip} - SessionId: %{?session_id}- User %{?user} - Client_ip %{?data} - Nat_ip %{source.nat.ip} - Vserver %{destination.ip}:%{destination.port} - Browser_type %{browser_type} - SSLVPN_client_type %{sslvpn_client_type} - Group(s) %{groups}"
        }
      }
    }
    else if[message] !~ ": Context" and [message] =~ " - Total_bytes_send" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 14" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description} :  Source %{source.ip}:%{source.port} - Destination %{destination.ip}:%{destination.port} - Start Time %{event.start} - End Time %{event.end} - Total_bytes_send %{source.bytes} - Total_bytes_recv %{destination.bytes}"
        }
      }
    }
    else if[message] =~ ": Context" and [message] =~ ": Group" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 15" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description} : Context %{source.user.name}@%{source.ip} - SessionId: %{?session_id}- %{url.full} User %{?data} : Group(s) %{groups} : Vserver %{destination.ip}:%{destination.port} - %{event.start} : SSO is %{?sso} : %{http.request.method} %{http.request.referrer} -%{?data}"
        }
      }
    }
    else if[message] =~ ":  User" and [message] =~ "- Status "{
      mutate {
        add_field => { "agent.parse_rule" => "RULE 16" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description} :  User %{user.name} - Remote_ip %{source.ip} - Command %{?command} - Status %{event.outcome}"
        }
      }
      mutate{
        gsub => [ "event.outcome", "['](?=[^']*$)", "" ]
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 17" }
      }
      dissect {
        mapping => {
          "rest_msg" => "%{?data} : %{event_description}"
        }
      }
    }
    dissect {
      mapping => {
        "event_description" => "%{?data} %{?data} %{classification_values} %{?data}"
      }
    }
    translate {
      field => "[classification_values]"
      destination => "[event.category]"
      dictionary => {
        "SSL_HANDSHAKE_SUCCESS" => "Audit/Information"
        "SSL_HANDSHAKE_SUBJECTNAME" => "Audit/Information"
        "SSL_HANDSHAKE_ISSUERNAME" => "Audit/Information"
        "SESSION_UPDATE" => "Audit/Information"
        "NETWORK_UPDATE" => "Audit/Information"
        "CHANNEL_UPDATE" => "Audit/Information"
        "REMOVE_SESSION_DEBUG" => "Audit/Information"
        "HTTPREQUEST" => "Audit/Information"
        "OTHERCONN_DELINK" => "Audit/Information"
        "ICAEND_CONNSTAT" => "Audit/Information"
        "ICASTART" => "Audit/Information"
        "TCPCONNSTAT" => "Audit/Information"
        "LOGIN" => "Audit/Authentication Success"
        "CONN_TERMINATE" => "Audit/Information"
        "CMD_EXECUTED" => "Audit/Information"
        "Message" => "Audit/Information"
        "EXTRACTED_GROUPS" => "Audit/Information"
        "LOGOUT" => "Audit/Authentication Success"
        "MONITORDOWN" => "Audit/Information"
        "MONITORUP" => "Audit/Information"
        "TRAP_SENT" => "Audit/Information"
        "DEVICEUP" => "Audit/Information"
        "DEVICEDOWN" => "Audit/Information"
        "CONN_DELINK" => "Audit/Information"
        "LOGIN_FAILED" => "Audit/Authentication Failure"
        "TCPCONN_TIMEDOUT" => "Audit/Information"
      }
      fallback => "Others"
    }
    mutate {
      strip => ["source.port", "source.nat.ip"]
      gsub => [ "log.date_time", "'", "" ]
    }
    mutate {
      convert => {"destination.bytes" => "integer"}
      convert => {"source.bytes" => "integer"}
      convert => {"destination.port" => "integer"}
      convert => {"source.port" => "integer"}
      rename => {"event_description" => "rule.description"}
    }
    if [event.start] {
      date {
        match => ["event.start","MM/dd/yyyy:HH:mm:ss z","MM/dd/yyyy:HH:mm:ss ZZZ","MM/dd/yyyy:HH:mm:ss 'GMT '"]
        timezone => "GMT"
        locale => "en"
        target => "event.start"
      }
    }
    if [event.end] {
      date {
        match => ["event.end","MM/dd/yyyy:HH:mm:ss z","MM/dd/yyyy:HH:mm:ss 'GMT '"]
        timezone => "GMT"
        locale => "en"
        target => "event.end"
      }
    }
    date {
      match => ["delink_time", "MM/dd/yyyy:HH:mm:ss z","MM/dd/yyyy:HH:mm:ss 'GMT '"]
      timezone => "GMT"
      locale => "en"
      target => "delink_time"
    }
    if[source.ip]
    {
      if [source.ip] =~ "a" or [source.ip] =~ "c" or [source.ip] =~ " "
      {
        mutate {
          remove_field => ["source.ip"]
        }
      }
    }
    if[source.nat.ip] {
      if [source.nat.ip] =~ "a" or [source.nat.ip] =~ "c" or [source.nat.ip] =~ " "
      {
        mutate {
          remove_field => ["source.nat.ip"]
        }
      }
    }
    # TODO - add back the event.created/start/end - chk with brian- now err in elastic due to date date type
    mutate{
      remove_field => ["log.date_time","rest_msg","starting_data","classification_values","Vserver","Source","Destination","Client_ip","kv_msg","event.created","[net]","fix_duration","non_http_resource_accessed","total_tcp_connection","total_upd_flows","total_policies_allowed","total_policies_denied","source.compressed_bytes","destination.compressed_bytes","source.compression_ratio","destination.compression_ratio","logout_method","sslvpn_client_type","dest.ip"]
    }
  }
  # Do not remove this, due to internal need.
  mutate {
    copy => { "host.hostname" => "host.name" }
  }

}
output {
  pipeline { send_to => [enrichments] }
}