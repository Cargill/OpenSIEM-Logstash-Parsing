input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    strip => ["message"]
    gsub => ["message" , '[\"]' , ""]
    gsub => ["message" , '[\"\"]' , ""]
  }
  if [message] =~ "{name=" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    dissect {
      mapping => {
      # if header is present
        message => '%{log.date} {%{?data}} %{source.ip} - - [%{event.created}] %{http.request.method} %{url.path} HTTP/%{http.version} %{http.response.status_code} %{http.response.bytes} %{?some_value}'
      }
    }
  }
  else {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2" }
    }
    dissect {
      mapping => {
        message => '%{source.ip} - - [%{date_time}] %{http.request.method} %{url.path} HTTP/%{http.version} %{http.response.status_code} %{http.response.bytes} %{?some_value}'
      }
    }
    date {
      match => ["log.date","ISO8601"]
      timezone => "GMT"
      locale => "en"
      target => "@timestamp"
    }
  }
  date {
    # 21/May/2018:01:04:21 -0500
    match => ["event.created","dd/MMM/yyyy:HH:mm:ss Z"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
  }
  mutate {
    convert => {
      "http.response.status_code" => "integer"
    }
  }
  if [http.response.status_code] and [http.response.status_code] >=400 {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 3" }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Error"
      }
    }
  }
  else {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 4" }
    }
    mutate {
      add_field => {
        "rule.category" => "Ops/Information"
      }
    }
  }
  mutate {
    remove_field => ["date_time","log.date"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}