# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "ubiquiti.wireless.bridge" }
    add_field => { "event.dataset" => "ubiquiti.bridge.session" }
    add_field => { "observer.vendor" => "ubiquiti" }
    add_field => { "observer.product" => "ubiquiti.bridge" }
    add_field => { "observer.type" => "wireless_bridge" }
  }
  mutate {
    copy => { "message" => "log.original" }
  }
  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" { 
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => "(\<(?<pri>\d+)\>( )?)?(?<rest_msg>.*?)$" }
    }
  } 
  else {
  ### Filebeats udp or tcp in
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => ".*?\{name=.*?\} (\<(?<pri>\d+)\>( )?)?(?<rest_msg>.*?)$" }
    }
  }
  mutate {
    gsub => ["rest_msg","\n\t",","]
    gsub => ["rest_msg","\t",""]
  }

  syslog_pri {
    syslog_pri_field_name => "pri"
  }

  if [rest_msg] =~ "init: " {
    dissect {
      tag_on_failure => "_dissectfailure_init"
      mapping => {
        "rest_msg" => "%{data->} %{data} %{data} init: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "wireless: " {
    dissect {
      tag_on_failure => "_dissectfailure_wireless"
      mapping => {
        "rest_msg" => "%{data->} %{data} %{data} wireless: %{rule.description}"
      }
    }
  }
  else {
    dissect {
      tag_on_failure => "_dissectfailure"
      mapping => {
        "rest_msg" => "%{data->} %{data} %{data} %{observer.type}[%{event.id}]: %{rule.description}"
      }
    }
  }
  if [rule.description] =~ "Bad password attempt" {
     mutate {
       copy => { "rule.description" => "tmp"}
     }
     dissect {
       tag_on_failure => "_dissectfailure_bad_pw"
       mapping => { "tmp" => "Bad password attempt for '%{user.name}' from %{source.ip}" }
     }
     if [source.ip] =~ ":" {
       dissect {
         mapping => { "source.ip" => "%{source.ip}:%{source.port}" }
       }
     }
  }
  else if [rule.description] =~ "Child " {
     mutate {
       copy => { "rule.description" => "tmp"}
     }
     dissect {
       tag_on_failure => "_dissectfailure_child_connec"
       mapping => { "tmp" => "Child connection from %{source.ip}:%{source.port}" }
     }
  }
  else if [rule.description] =~ "Login attempt" {
     mutate {
       copy => { "rule.description" => "tmp"}
     }
     dissect {
       tag_on_failure => "_dissectfailure_login_attempt"
       mapping => { "tmp" => "Login attempt for nonexistent user from %{source.ip}:%{source.port}" }
     }
  }

  mutate {
     remove_field => ["data", "pri", "tmp", "rest_msg"]
  }
  date {
    match => ["event.created", "ISO8601"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
}
output {
  pipeline { send_to => [enrichments] }
}
