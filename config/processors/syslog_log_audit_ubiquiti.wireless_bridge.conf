# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "ubiquiti.wireless.bridge" }
    add_field => { "event.dataset" => "ubiquiti.bridge.session" }
    add_field => { "observer.vendor" => "ubiquiti" }
    add_field => { "observer.product" => "ubiquiti.bridge" }
    add_field => { "observer.type" => "wireless_bridge" }
  }
  mutate {
    copy => { "message" => "log.original" }
  }
### Header
  # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<rest_msg>.*?)%" }
  }
    mutate {
      gsub => ["rest_msg","\n\t",","]
      gsub => ["rest_msg","\t",""]
    }

  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  dissect {
    tag_on_failure => "_dissectfailure"
    mapping => {
      "rest_msg" => "%{data} %{data} %{data} %{observer.type}[%{event.id}]: %{rule.description}:%{source.port}"
    }
  }


  if [rule.description] =~ "Bad password attempt" {
     mutate {
       copy => { "rule.description" => "tmp"}
     }
     dissect {
       tag_on_failure => "_dissectfailure_bad_pw"
       mapping => {
         "tmp" => "Bad password attempt for '%{user.name}' from %{source.ip}"
       }
     }
  }

  mutate {
     remove_field => ["data","pri", "tmp"]
  }
  date {
    match => ["event.created", "ISO8601"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
}
output {
  pipeline { send_to => [enrichments] }
}
