# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "ubiquiti" }
    add_field => { "[event][dataset]" => "ubiquiti.wireless.bridge.session" }
  }
  mutate {
    copy => { "message" => "[log][original]" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  mutate {
    gsub => ["actual_msg","\n\t",","]
    gsub => ["actual_msg","\t",""]
  }

  if [actual_msg] =~ "init: " {
    dissect {
      tag_on_failure => "_dissectfailure_init"
      mapping => {
        "actual_msg" => "%{?data->} %{?data} %{?data} init: %{[[rule][description]]}"
      }
    }
  }
  else if [actual_msg] =~ "wireless: " {
    dissect {
      tag_on_failure => "_dissectfailure_wireless"
      mapping => {
        "actual_msg" => "%{?data->} %{?data} %{?data} wireless: %{[[rule][description]]}"
      }
    }
  }
  else {
    dissect {
      tag_on_failure => "_dissectfailure"
      mapping => {
        "actual_msg" => "%{?data->} %{?data} %{?data} %{[[observer][type]]}: %{[[rule][description]]}"
      }
    }
  }
  if [rule][description] =~ "Bad password attempt" {
     mutate {
       copy => { "[rule][description]" => "tmp"}
     }
     dissect {
       tag_on_failure => "_dissectfailure_bad_pw"
       mapping => { "tmp" => "Bad password attempt for '%{[[user][name]]}' from %{[[source][ip]]}" }
     }
     if [source][ip] =~ ":" {
       dissect {
         mapping => { "[source][ip]" => "%{[[source][ip]]}:%{[[source][port]]}" }
       }
     }
  }
  else if [rule][description] =~ "Child " {
     mutate {
       copy => { "[rule][description]" => "tmp"}
     }
     dissect {
       tag_on_failure => "_dissectfailure_child_connec"
       mapping => { "tmp" => "Child connection from %{[[source][ip]]}:%{[[source][port]]}" }
     }
  }
  else if [rule][description] =~ "Login attempt" {
     mutate {
       copy => { "[rule][description]" => "tmp"}
     }
     dissect {
       tag_on_failure => "_dissectfailure_login_attempt"
       mapping => { "tmp" => "Login attempt for nonexistent user from %{[[source][ip]]}:%{[[source][port]]}" }
     }
  }

  mutate {
     remove_field => [ "tmp", "actual_msg" ]
  }
  date {
    match => ["[event][created]", "ISO8601"]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
}
output {
  pipeline { send_to => [enrichments] }
}
