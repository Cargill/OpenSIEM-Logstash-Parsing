input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  if [message] =~ "name=" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 1" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date} {%{?data}} %{rest_msg}"
      }
    }
    kv {
      source => "rest_msg"
      field_split => ","
      value_split => ":"
    }
    mutate {
      rename => {" SourceIP" => "source.ip"}
      rename => {" SourcePort" => "source.port"}
      rename => {" User Agent" => "user.agent"}
      rename => {" URL" => "url.path"}
    }
  }
  else {
    mutate {
      add_field => { "parse_rule_name" => "RULE 2" }
    }
  dissect {
    mapping => {
      "message" => "[%{log.date}] [%{process.pid}] [%{url.scheme}_%{url.port}_%{host.protocol} %{http.request.bytes}] [%{source.ip}:%{source.port}] %{actual_message}"
    }
  }

  grok {
    match => [ "actual_message", "%{WORD:event}(: %{GREEDYDATA:rest_of_msg})?" ]
  }

  if [event] == "connect" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 3" }
    }
    aggregate {
      task_id => "%{source.ip}:%{source.port}"
      code => "
        map['request_url'] = ''
        map['send'] = []
        map['recv'] = []
        map['info'] = []
        map['stat'] = []
      "
      map_action => "create"
    }
  } else if [event] == "send" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 4" }
    }
    aggregate {
      task_id => "%{source.ip}:%{source.port}"
      code => "
        map['send'] << event.get('rest_of_msg')
      "
      map_action => "update"
    }
  } else if [event] == "recv" {
      mutate {
        add_field => { "parse_rule_name" => "RULE 5" }
      }

    mutate {
      # strip \r character
      strip => ["rest_of_msg"]
    }

    if [rest_of_msg] =~ "^Host:" {
      mutate {
        add_field => { "parse_rule_name" => "RULE 6" }
      }
      dissect {
        mapping => {
          "rest_of_msg" => "Host: %{request_url}"
        }
      }
      aggregate {
        task_id => "%{source.ip}:%{source.port}"
        code => "
          map['request_url'] = event.get('request_url')
        "
        map_action => "update"
      }
    }

    if [rest_of_msg] =~ "^User-Agent:" {
      mutate {
        add_field => { "parse_rule_name" => "RULE 7" }
      }
      dissect {
        mapping => {
          "rest_of_msg" => "User-Agent: %{user_agent}"
        }
      }

      aggregate {
        task_id => "%{source.ip}:%{source.port}"
        code => "
          map['user_agent'] = event.get('user_agent')
        "
        map_action => "update"
      }
    }
    aggregate {
      task_id => "%{source.ip}:%{source.port}"
      code => "
        map['recv'] << event.get('rest_of_msg')
      "
      map_action => "update"
    }
  } else if [event] == "info" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 8" }
    }
    aggregate {
      task_id => "%{source.ip}:%{source.port}"
      code => "
        map['info'] << event.get('rest_of_msg')
      "
      map_action => "update"
    }
  } else if [event] == "stat" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 9" }
    }
    aggregate {
      task_id => "%{source.ip}:%{source.port}"
      code => "
        map['stat'] << event.get('rest_of_msg')
      "
      map_action => "update"
    }
  } else if [event] == "disconnect" {
    mutate {
      add_field => { "parse_rule_name" => "RULE 10" }
    }
    aggregate {
      task_id => "%{source.ip}:%{source.port}"
      code => "
        event.set('send' , map['send'])
        event.set('recv' , map['recv'])
        event.set('info' , map['info'])
        event.set('stat' , map['stat'])
        event.set('request_url', map['request_url'])
        event.set('user_agent', map['user_agent'])
      "
      map_action => "update"
      end_of_task => true
      add_tag => [ "aggregated" ]
      timeout => 2
    }
    mutate {
      add_field => { "msg" => "Time: %{log.date}, SourceIP: %{source.ip}, SourcePort: %{source.port}, URL: %{request_url}, User Agent: %{user_agent}" }
    }
  }
  }
  mutate {
    remove_field => [ "received_time"]
  }
  # VAR_ENRICHMENTS
}
output {
# VAR_OUTPUT
}