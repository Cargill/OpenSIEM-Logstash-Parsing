# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  if [message] == "" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1 (dropped)" }
    }
    drop {}
  }
  ## "<191" indicates the debug fields - verfied from the logrithym and also SIEM admins is confirmed that the debug fields can be removed.

  if [message] =~ "<191>" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2 (dropped)" }
    }
    drop {}
  }
  mutate {
    strip => ["message"]
    gsub => ["message" , "\r\n" , ";"] ## replacing \n with ; to use as a delimiter
    gsub =>["message" , "  ", " "]
    gsub => ["message" , "\n" , ";"]
  }
  dissect {
    mapping => {
      "message" => "%{log.date} {%{?data}} %{rest_msg}"
    }
  }
  if [message] =~ "<187" {
    if [message] =~ "com.pingidentity.pingone.api.PingOneAdminApiException" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 3" }
      }
      dissect {
        mapping => {
          "rest_msg" => "<%{log.level}>%{event.created->} %{+event.created} %{+event.created} %{source.address} [%{del},%{del1},%{log.logger}] %{rule.description};%{del}: %{http.request.method} request to %{url.full} returned %{error.code}: %{del}"
        }
      }
    }
    else if [message] =~ "java.net.UnknownHostException" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 4" }
      }
      dissect {
        mapping => {
          "rest_msg" => "<%{log.level}>%{event.created->} %{+event.created} %{+event.created} %{source.address} [%{del},%{del1},%{log.logger}] %{rule.description};"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 5" }
      }
      dissect {
        mapping => {
          "rest_msg" => "<%{log.level}>%{event.created->} %{+event.created} %{+event.created} %{source.address} [%{del},%{del1},%{log.logger}] %{rule.description}"
        }
      }
    }
  }
  else if [message] =~ "<188" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 6" }
    }
    dissect {
      mapping => {
        "rest_msg" => "<%{log.level}>%{event.created->} %{+event.created} %{+event.created} %{source.address} [%{del},%{del1},%{log.logger}] %{rule.description}"
      }
    }
  }
  date {
    match => ["event.created" , "MMM dd HH:mm:ss"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
  }
  #### Classification part ####

  ## 187 - Error
  ## 188 - Warning
  ## 191 - debug
  translate {
    field => "[log.level]"
    destination => "[rule.category]"
    dictionary => {
      "187" => "Ops Error"
      "188" => "Ops Warning"
      "191" => "Ops other"
    }
    fallback => "Others"
  }
  mutate {
    remove_field => ["del","del1","log.date","rest_msg"]
  }
# log.logger => HttpServletRespProxy, HttpOutput, IntegrationControllerServlet , MuxInvocationHandler etc
}
output {
  pipeline { send_to => [enrichments] }
}
