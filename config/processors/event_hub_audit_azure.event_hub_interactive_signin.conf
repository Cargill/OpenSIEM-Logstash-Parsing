# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  if [message] =~ '^{"records": \[' {
    json {
      source => "message"
      target => "tmp"
      skip_on_invalid_json => true
    }
    split {
      field => "[tmp][records]"
      target => "az"
    }
    mutate {
      replace => { "message" => "%{az}" }
    }
  } else {
    json {
      source => "message"
      target => "az"
      skip_on_invalid_json => true
    }
  }
  mutate{
    add_field => { "[event][module]" => "azure" }
    add_field => { "[event][dataset]" => "azure.interactivesignin" }
    add_field => { "[log][source][hostname]" => "%{[az][TenantId]}" }
  }
  mutate {
    rename => { "[az][TenantId]" => "[cloud][account][id]" }
    rename => { "[az][TimeGenerated]" => "[event][ingested]" }
    rename => { "[az][OperationName]" => "[event][reference]" }
    rename => { "[az][Category]" => "[event][category]" }
    # rename => { "host" => "[agent][name]" }
    rename => { "[az][DurationMs]" => "[event][duration]"}
    rename => { "[az][ResultType]" => "[error][code]" }
    rename => { "[az][CorrelationId]" => "[event][id]" }
    rename => { "[az][Identity]" => "[file][group]" }
    rename => { "[az][CreatedDateTime]" => "[event][created]" }
    rename => { "[az][IPAddress]" => "[source][ip]" }
    rename => { "[az][UserAgent]" => "[user_agent][original]" }
    rename => { "[az][UserPrincipalName]" => "[user][email]" }
    rename => { "[az][AppDisplayName]" => "[process][name]" }
    rename => { "[az][UserId]" => "[user][id]" }
    rename => { "[az][OperationVersion]" => "[service][version]" }
    rename => { "[az][AppId]" => "[process][entity_id]" }
    rename => { "[az][Status][failureReason]" => "[event][reason]" }
    rename => { "[az][AutonomousSystemNumber]" => "[source][as][number]" }
    rename => { "[az][UserDisplayName]" => "[user][full_name]" }
    rename => { "[az][ConditionalAccessStatus]" => "[event][action]" }
    rename => { "[az][ResourceServicePrincipalId]" => "[cloud][instance][id]" }
    rename => { "[az][Status][additionalDetails]" => "[rule][category]"}
    rename => { "[az][Status][errorCode]" => "[rule][id]" } 
    rename => { "[az][AuthenticationRequirement]" => "[event][kind]"}
    rename => { "[az][ClientAppUsed]" => "[event][provider]"}
    rename => { "[az][MfaDetail]" => "[event][outcome]"}
    rename => { "[az][ResourceDisplayName]" => "[group][name]"}
    rename => { "[az][Type]" => "[event][type]"}
    rename => { "[az][DeviceDetail][deviceId]" => "[host][id]"}
    rename => { "[az][DeviceDetail][operatingSystem]" => "[host][os][name]"}
    rename => { "[az][DeviceDetail][displayName]" => "[host][hostname]"}
  }
  mutate{
    gsub => ["[az][NetworkLocationDetails]", "[\r\n  ]", ""]
    gsub => ["[az][NetworkLocationDetails]", '\"', '"']
  }
  json { 
    source => "[az][NetworkLocationDetails]"
    target => "[az][NetworkLocationDetails]"
  }
  ruby {
    code => "
      networktype_list = []
      networknames_list = []
      
      if event.get('[az][NetworkLocationDetails]').kind_of? Array
        event.get('[az][NetworkLocationDetails]').each do |item|
          if item['networkType'] != ''  
            networktype_list.push(item['networkType'])
          end
          if item['networkNames'] != ''
            networknames_list.push(item['networkNames'])
          end
        end
      end
 
      if !networktype_list.empty?
        event.set('[network][type]', networktype_list)
      end
      if !networknames_list.empty?
        event.set('[network][name]', networknames_list)
      end
    "
    tag_on_exception => "ruby_block_exception"
  }
  json {
    source => "[az][LocationDetails]"
    target => "[az][LocationDetails]"
    skip_on_invalid_json => true
  }
  json {
    source => "[az][AuthenticationDetails]"
    target => "[az][AuthenticationDetails]"
    skip_on_invalid_json => true
  }
  # json {
  #   source => "[az][DeviceDetail]"
  #   target => "[az][DeviceDetail]"
  #   skip_on_invalid_json => true
  # }
  json {
    source => "[az][AuthenticationProcessingDetails]"
    target => "[az][AuthenticationProcessingDetails]"
    skip_on_invalid_json => true
  }
  
  # json {
  #   source => "[az][ConditionalAccessPolicies]"
  #   target => "[user][roles]"
  #   skip_on_invalid_json => true
  # }
  mutate {
    remove_field => [ "tmp", "[az]" ]
	# "tmp", "az",
  }
  # split {
  #   field => "[user][roles]"
  #   target => "[user][roles]"
  # }
  
  mutate {
    gsub => [
      "[event][created]", "^(.*?)T(.*?\.\d\d\d).*?$", "\1 \2" ,
      "[event][ingested]", "^(.*?)T(.*?\.\d\d\d).*?$", "\1 \2"
    ]
  }
  date {
    match => [ "[event][created]" , "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  date {
    match => [ "[event][ingested]" , "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_ei"
  }
}
output {
  pipeline { send_to => [enrichments] }
}
 
