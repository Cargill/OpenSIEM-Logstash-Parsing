# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter { 
  mutate{  
    remove_field => [ "host", "event" ]   
  }
  mutate{
    add_field => { "[event][module]" => "azure" }
    add_field => { "[event][dataset]" => "azure.interactivesignin" }
  }
   json {
      source => "message" 
      target => "tmp"
      skip_on_invalid_json => false
      tag_on_failure => "_jsonparsefailure_split_msg"
    }
  if [message] =~ '^{"records": \[' {
    split {
      field => "[tmp][records]"
      target => "az"
    }
  } else {
    mutate {
      rename => { "tmp" => "az"}
    }
  }
  json {
    source => "[az][networklocationdetails]"
    target => "[az][networklocationdetails]" 
    tag_on_failure => "_jsonparsefailure_network"
  }
  json {
    source => "[az][devicedetail]"
    target => "[az][devicedetail]"
    tag_on_failure => "_jsonparsefailure_device"
  }
  json {
    source => "[az][locationdetails]"
    target => "[az][locationdetails]"
    tag_on_failure => "_jsonparsefailure_location"
  }
  json {
    source => "[az][authenticationprocessingdetails]"
    target => "[az][authenticationprocessingdetails]"
    tag_on_failure => "_jsonparsefailure_auth_proc"
  }
  json {
    source => "[az][authenticationdetails]"
    target => "[az][authenticationdetails]"
    tag_on_failure => "_jsonparsefailure_auth_detail"
  }
  json {
    source => "[az][authenticationrequirementpolicies]"
    target => "[az][authenticationrequirementpolicies]"
    tag_on_failure => "_jsonparsefailure_auth_policy"
  }
  json {
    source => "[az][conditionalaccesspolicies]"
    target => "[az][conditionalaccesspolicies]"
    tag_on_failure => "_jsonparsefailure_conditional"
  }
  json {
    source => "[az][status]"
    target => "[az][status]"
    tag_on_failure => "_jsonparsefailure_status"
  }
  ### lowercase all field names
  ruby {
    init => '@ignore = [ "path", "@timestamp", "@metadata", "host", "@version" ]'
    code => '
      def processArray(a)
        newArray = []
        a.each { |x|
          newArray << processObject(x)
        }
        newArray
      end
      def processHash(h)
        newHash = {}
        h.each { |k, v|
          newHash[k.downcase] = processObject(v)
        }
        newHash
      end
      def processObject(v)
        if v.kind_of?(Array)
          processArray(v)
        elsif v.kind_of?(Hash)
          processHash(v)
        else
          v
        end
      end
      def filter(i_event)
        i_event.to_hash.each { |k, v|
          unless @ignore.include?(k)
            i_event.remove(k)
            i_event.set(k.downcase, processObject(v))
          end
        }
        [i_event]
      end
      filter(event)
    '
  }

  ruby {
    code => "
      networktype_list = []
      networknames_list = []
      
      if event.get('[az][networklocationdetails]').kind_of? Array
        event.get('[az][networklocationdetails]').each do |item|
          if item['networkType'] != ''  
            networktype_list.push(item['networkType'])
          end
          if item['networkNames'] != ''
            networknames_list.push(item['networkNames'])
          end
        end
      end
 
      if !networktype_list.empty?
        event.set('[network][type]', networktype_list)
      end
      if !networknames_list.empty?
        event.set('[network][name]', networknames_list)
      end
    "
    tag_on_exception => "ruby_block_exception"
  }
  #     rename => { "[az][mfadetail]" => "[event][outcome]" } 
  mutate {
    rename => { "[az][tenantid]" => "[cloud][account][id]" }
    rename => { "[az][timegenerated]" => "[event][ingested]" }
    rename => { "[az][operationname]" => "[event][reference]" }
    rename => { "[az][category]" => "[event][category]" }
    rename => { "[az][durationms]" => "[event][duration]"}
    rename => { "[az][resulttype]" => "[error][code]" }
    rename => { "[az][correlationid]" => "[event][id]" }
    rename => { "[az][identity]" => "[file][group]" }
    rename => { "[az][createddatetime]" => "[event][created]" }
    rename => { "[az][ipaddress]" => "[source][ip]" }
    rename => { "[az][useragent]" => "[user_agent][original]" }
    rename => { "[az][userprincipalname]" => "[user][email]" }
    rename => { "[az][appdisplayname]" => "[process][name]" }
    rename => { "[az][userid]" => "[user][id]" }
    rename => { "[az][operationversion]" => "[service][version]" }
    rename => { "[az][appid]" => "[process][entity_id]" }
    rename => { "[az][status][failurereason]" => "[event][reason]" }
    rename => { "[az][resultdescription]" => "[error][message]" }
    rename => { "[az][autonomoussystemnumber]" => "[source][as][number]" }
    rename => { "[az][userdisplayname]" => "[user][full_name]" }
    rename => { "[az][conditionalaccessstatus]" => "[event][action]" }
    rename => { "[az][resourceserviceprincipalid]" => "[cloud][instance][id]" }
    rename => { "[az][status][additionaldetails]" => "[rule][category]"}
    rename => { "[az][status][errorcode]" => "[rule][id]" } 
    rename => { "[az][authenticationrequirement]" => "[event][kind]" }
    rename => { "[az][clientappused]" => "[event][provider]" }
    rename => { "[az][resourcedisplayname]" => "[group][name]" }
    rename => { "[az][type]" => "[event][type]" }
    rename => { "[az][devicedetail][deviceid]" => "[host][id]"}
    rename => { "[az][devicedetail][operatingsystem]" => "[host][os][name]"}
    rename => { "[az][devicedetail][displayname]" => "[host][hostname]"}
    rename => { "[az][authenticationdetails][authenticationmethod]" => "[http][request][method]" }
    rename => { "[az][authenticationdetails][authenticationstepresultdetail]" => "[rule][description]" }
    rename => { "[az][authenticationdetails][authenticationsteprequirement]" =>"[error][type]" }
    rename => { "[az][authenticationdetails][0][authenticationmethod]" => "[http][request][method]" }
    rename => { "[az][authenticationdetails][0][authenticationstepresultdetail]" => "[rule][description]" }
    rename => { "[az][authenticationdetails][0][authenticationsteprequirement]" =>"[error][type]" }
    rename => { "[az][devicedetail][browser]" => "[process][parent][name]" }
    rename => { "[az][devicedetail][trusttype]" => "[tls][version_protocol]" }
    rename => { "[az][authenticationdetails]" => "[event][outcome]" }
    rename => { "[az][conditionalaccesspolicies]" => "[user][group][name]" }
    copy => { "[az][authenticationprocessingdetails][0][key]" => "[tls][cipher]" }
  }
  json_encode {
    source => "[event][outcome]"
  }
  json_encode {
    source => "[user][group][name]"
  }
  mutate {
    add_field => { "[@metadata][ismanaged]" => "host_is_not_managed" }
  }
  mutate {
    merge => { "[event][outcome]" => "[@metadata][ismanaged]" }
  } 
  mutate {
    add_field => { "[@metadata][iscompliant]" => "host_is_iscompliant" }
  }
    mutate {
      merge => { "[event][outcome]" => "[@metadata][iscompliant]" }
    } 
  
  mutate {
    add_field => { "[log][source][hostname]" => "%{[host][hostname]}" }
  }
  
    mutate {
    gsub => [
      "[event][created]", "^(.*?)T(.*?\.\d\d\d).*?$", "\1 \2" ,
      "[event][ingested]", "^(.*?)T(.*?\.\d\d\d).*?$", "\1 \2"
    ]
  }
  date {
    match => [ "[event][created]" , "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  date {
    match => [ "[event][ingested]" , "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_ei"
  }
  # 
  mutate {
    remove_field => [ "tmp", "az" ]    
  }
}
output {
  pipeline { send_to => [enrichments] }
}
 
