# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "cisco.wireless.access_point" }
    add_field => { "event.dataset" => "cisco.wireless" }
    add_field => { "observer.vendor" => "cisco" }
    add_field => { "observer.product" => "cisco.wireless.access_point" }
    add_field => { "observer.type" => "wireless.access_point" }
  }
  mutate {
    strip => ["message"]
  }
  ### Header
  ### Logstash tcp or udp in
  # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<rest_msg>.*?)%" }
  }
   
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  
  if [rest_msg] =~ " UTC:" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    dissect {
      mapping => {
        rest_msg => "%{?process.pid}: %{eventcreated->} %{+eventcreated} %{+eventcreated} %{?event.created.timezone}: %{?data}-%{?data2}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] !~ " UTC:" and [rest_msg] !~ ": *"{
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2" }
    }
    dissect {
      mapping => {
        rest_msg => "%{?pid}: %{eventcreated->} %{+eventcreated} %{+eventcreated}: %{?data}-%{?data2}-%{rule.name}: %{event.action}"
      }
    }
  }
  else {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 3" }
    }
    dissect {
      mapping => {
        rest_msg => "%{?pid}: %{eventcreated->} %{+eventcreated} %{+eventcreated}: %{?data}-%{?data2}-%{rule.name}: %{event.action}"
      }
    }
  }
  if [eventcreated] =~ ": "{
    mutate {
      add_field => { "agent.parse_rule" => "RULE 4" }
    }
    dissect {
      mapping => {
        eventcreated => "%{?data} %{event.created->} %{+event.created} %{+event.created}"
      }
    }
  }
  else if [eventcreated] =~ "\*" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5" }
    }
    dissect {
      mapping => {
        eventcreated => "*%{event.created->} %{+event.created} %{+event.created}"
      }
    }
  }
  mutate {
    add_field => {"event.created" => "%{eventcreated}"}
    remove_field => ["rest_msg","log.date","event.type","eventcreated"]
  }
  
   mutate {
     gsub => [
      "event.created", " \w+$", ""
    ]
  }
    
  #feb 8 22:45:13.900 utc
  date {
    match => ["event.created" , "MMM dd yyyy HH:mm:ss", "MMM dd yyyy HH:mm:ss.SSS", "yyyy-mm-dd HH:mm:ss", "yyyy-mm-dd HH:mm:ss.SSS", "MMM dd HH:mm:ss" ,"MMM dd HH:mm:ss.SSS","yyyy/MM/dd 'at' HH:mm:ss", "MMM d HH:mm:ss" ]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.created"]
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
