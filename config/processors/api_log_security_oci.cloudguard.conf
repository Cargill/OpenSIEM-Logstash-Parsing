# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    copy => { "message" => "log.original" }
  }
  json {
    source => "message"
    target => "cg"
  }
  mutate {
    rename => { "[cg][id]" => "event.id" }
    rename => { "[cg][oracle][ingestedtime]" => "event.ingested" }
    rename => { "[cg][oracle][loggroupid]" => "file.gid" }
  }
  kv {
    source => "[cg][data][message]"
    target => "tmp"
    field_split => ", "
    value_split => ": "
  }
  mutate {
    rename => { "[tmp]['region']" => "cloud.region" }
    rename => { "[tmp]['reason']" => "event.reason" }
    rename => { "[tmp]['resourceType']" => "dns.answers.type" }
    rename => { "[tmp]['problemDescription']" => "rule.description" }
    rename => { "[tmp]['problemName']" => "rule.category" }
    rename => { "[tmp]['status']" => "service.state" }
    rename => { "[tmp]['firstDetected']" => "event.start" }
    rename => { "[tmp]['lastDetected']" => "event.end" }
    rename => { "[tmp]['problemType']" => "event.type" }
    rename => { "[tmp]['problemRecommendation']" => "event.recommendation" }
  }
  mutate {
    remove_field => [ "[cg]", "[tmp]" ]
  }
  date {
    match => ["event.start" , "ISO8601" ]
    timezone => "GMT"
    target => "event.start"
    tag_on_failure => "_dateparsefailure_es"
  }
  if "_dateparsefailure_es" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.start"]
    }
  }
  date {
    match => ["event.end" , "ISO8601" ]
    timezone => "GMT"
    target => "event.end"
    tag_on_failure => "_dateparsefailure_ee"
  }
  if "_dateparsefailure_ee" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.end"]
    }
  }
  date {
    match => ["event.ingested" , "ISO8601" ]
    timezone => "GMT"
    target => "event.ingested"
    tag_on_failure => "_dateparsefailure_ei"
  }
  if "_dateparsefailure_ei" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.ingested"]
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}