# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "cisco" }
    add_field => { "[event][dataset]" => "cisco.aci" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
  }

  # 2. We now apply a grok pattern to extract known fields
  grok {
    match => { "actual_msg" => "%{SYSLOGTIMESTAMP:[[tmp][dateoriginal]]} %{GREEDYDATA:[[tmp][device]]} \%LOG_LOCAL%{INT:[[tmp][loglocal]]}-%{INT:[[tmp][severity]]}-SYSTEM_MSG \[%{WORD:[[tmp][code]]}](?:\[%{WORD:[[tmp][lifecycle]]}])?\[%{DATA:[[tmp][rule]]}]\[%{WORD:[[tmp][det_severity]]}\]\[%{DATA:[[tmp][effected_dn]]}] %{GREEDYDATA:[[tmp][error_message]]}" }
    timeout_millis => 500
  }
  
  # we now know if this is fault or event by the number of fields that msg_details contains. we can look into the last field
  if [tmp][lifecycle] {
    mutate {
      add_field => {
        "[tmp][msg_type]" => "alert"
      }
    }
  }
  else {
    mutate {
      add_field => {
        "[tmp][msg_type]" => "event"
      }
    }
  }
 
  # 3. clean the observer name
  mutate {
    gsub =>
      [ "[tmp][host]", "\{name\=", "",
        "[tmp][host]", "\}", "",
        "[tmp][host]", "\..*", ""
      ]
  }
  
  # 4. pure ACI messages differ from ACI messages from nexus subsystems. we know nexus messages if rule = [sys]. in that case we need additional parsing
  if "[sys]" in [tmp][rule]
  {
    grok {
      match => {"[tmp][error_message]" => "%{SYSLOGTIMESTAMP:[[tmp][nexus_date]]} \%%{WORD:[[tmp][nexus_loglocal]]}-%{INT:[[tmp][nexus_severity]]}-%{WORD:[[tmp][nexus_module]]}:\s%{GREEDYDATA:[[tmp][nexus_errormessage]]}"}
      timeout_millis => 500
    }
    mutate {
      update => {"[tmp][severity]" => "%{[[tmp][nexus_severity]]}"}
      update => {"[tmp][module]" => "%{[[tmp][nexus_module]]}" }
      update => {"[tmp][error_message]" => "%{[[tmp][nexus_errormessage]]}"}
    }
  }

  # 5. We end up with all SDWAN specific fields from rest msg. Now use 3 mutate filters (for readability) to perform 3 actions below
  # a) Parse fields that belong to ECS into ECS fields
  mutate {
    rename => {"[tmp][device]" => "[host][hostname]"}
    rename => {"[tmp][code]" => "[error][code]"}
    rename => {"[tmp][msg_type]" => "[event][kind]" }
    rename => {"[tmp][det_severity]" => "[log][level]"}
    rename => {"[tmp][severity]" => "[log][syslog][severity][code]"}
    rename => {"[tmp][error_message]" => "[error][message]"}
    rename => {"[tmp][host]" => "[observer][hostname]"}
    rename => {"[tmp][module]" => "[event][type]"}
    rename => {"[tmp][lifecycle]" => "[event][action]"}
    rename => {"[tmp][loglocal]" => "[log][syslog][facility][code]"}
    rename => {"[tmp][nexus_loglocal]" => "[log][syslog][facility][name]"}
  }

  # b) Parse fields that don't belong to ECS into Labels (as per https://www.elastic.co/guide/en/ecs/current/ecs-custom-fields-in-ecs.html#_the_labels_field)
  
  mutate {
    rename => {
      "[tmp][effected_dn]" => "[labels][effected_dn]"
    }
  }
  

  # 6. Proceed to hardcoded evaluations
  # [event][category]
  if [event][kind] == "fault"
  {
    translate {
      source => "[event][action]"
      target => "[event][category]"
      dictionary => {
      "link-state-change" => "host"
      }
    }
  }
  else
  {
    translate {
      source => "[[log][syslog][facility][name]]"
      target => "[event][category]"
      dictionary => {
      "LOG_AUTH" => "authentication"
      }
    }
  }

 # 7. Translate full msg, explanation, recommendation
  translate {
    id => "cisco-aci-errors"
    source => "[error][code]"
    target => "[tmp][error_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_aci.json" # ** Must set full "/path/to/lookup.json" to your lookup file **
    refresh_interval => 3000
    fallback => '{"key1":"not_found"}' 
  }

  # a) because a fallback value can only contain a string, additional processing is done to ensure that failed lookups store values in proper fields
  if [tmp][error_translation] == '{"key1":"not_found"}' {
    json { 
      source => "[tmp][error_translation]" 
      target => "[tmp][error_translation]"
    }
    mutate {
      remove_field => ["[tmp][error_translation]"]
    }
    mutate {
        add_field => { "[tmp][error_translation][type]" => "not_found_alert_type"}
        add_field => { "[tmp][error_translation][remediation]"=> "not_found_recommendation"}
        add_field => { "[tmp][error_translation][messages]"=> "%{[[error][message]]}"}
        add_field => { "[tmp][error_translation][severity]"=> "%{[[log][syslog][severity][code]]}"}
        rename => {"[tmp][rule]" => "[tmp][error_translation][explanation]"}
    }
  }
  
  # b) add proper fields from [tmp] translated
  mutate {
      add_field => { "[error][type]" => "%{[[tmp][error_translation][type]]}"}
      add_field => { "[event][reason]" => "%{[[tmp][error_translation][explanation]]}"}
      add_field => { "[event][recommendation]" => "%{[[tmp][error_translation][remediation]]}"}
      add_field => { "[event][message]" => "%{[[tmp][error_translation][messages]]}"}
      add_field => { "[event][severity]" => "%{[[tmp][error_translation][severity]]}"}
  }

  # 8. Convert fields (i.e. extract site, appliance type, etc)
  if "" in [network][name] or ![network][name]  {
    mutate {
      add_field => {"[network][name]" => "%{[[host][hostname]]}" }
    }
  }
  mutate {
    add_field => {"[service][type]" => "%{[[host][hostname]]}"}
  }
  mutate {
    gsub => [
      "[service][type]", "(.*)-([a-z]*)", "\2",
      "[network][name]", "([a-z]*)([0-9].*)", "\1"
    ]
  }

  # 9) Drop unused/unwanted fields
  mutate {
    remove_field => [ "[tmp]", "pri", "actual_msg" ]
  }
}

output {
  pipeline { send_to => [enrichments] }
}
