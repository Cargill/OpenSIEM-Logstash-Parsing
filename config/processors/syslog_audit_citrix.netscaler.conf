# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
# https://developer-docs.netscaler.com/en-us/netscaler-syslog-message-reference/current-release.html (format referernce doc)
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "citrix" }
    add_field => { "[event][dataset]" => "citrix.netscaler" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  mutate {
    strip => ["actual_msg"]
    gsub => ["actual_msg" , '[\"]', ""]
  }
  if [actual_msg] == "" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 1 (dropped)" }
    }
    drop {}
  }
  else {
    dissect {
      mapping => {
        "actual_msg" => "%{[[event][created]]} %{+[[event][created]]} %{[[source][address]]} %{?data} : %{event_description} : %{rest_msg}"
      }
    }
    dissect {
      mapping => {
        "event_description" => "%{?data} %{[event][kind]} %{classification_values} %{?data}"
      }
    }
    mutate{
      copy => { "[classification_values]" => "[event][type]" }
    }
    translate {
      source => "[classification_values]"
      target => "[event][category]"
      dictionary => {
        "SSL_HANDSHAKE_SUCCESS" => "Audit/Information"
        "SSL_HANDSHAKE_SUBJECTNAME" => "Audit/Information"
        "SSL_HANDSHAKE_ISSUERNAME" => "Audit/Information"
        "SESSION_UPDATE" => "Audit/Information"
        "NETWORK_UPDATE" => "Audit/Information"
        "CHANNEL_UPDATE" => "Audit/Information"
        "REMOVE_SESSION_DEBUG" => "Audit/Information"
        "HTTPREQUEST" => "Audit/Information"
        "OTHERCONN_DELINK" => "Audit/Information"
        "ICAEND_CONNSTAT" => "Audit/Information"
        "ICASTART" => "Audit/Information"
        "TCPCONNSTAT" => "Audit/Information"
        "LOGIN" => "Audit/Authentication Success"
        "CONN_TERMINATE" => "Audit/Information"
        "CMD_EXECUTED" => "Audit/Information"
        "Message" => "Audit/Information"
        "EXTRACTED_GROUPS" => "Audit/Information"
        "LOGOUT" => "Audit/Authentication Success"
        "MONITORDOWN" => "Audit/Information"
        "MONITORUP" => "Audit/Information"
        "TRAP_SENT" => "Audit/Information"
        "DEVICEUP" => "Audit/Information"
        "DEVICEDOWN" => "Audit/Information"
        "CONN_DELINK" => "Audit/Information"
        "LOGIN_FAILED" => "Audit/Authentication Failure"
        "TCPCONN_TIMEDOUT" => "Audit/Information"
      }
      fallback => "Others"
    }
    if [event][kind] == "TCP" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 2 (TCP)" }
      }
      if [event][type] == "CONN_DELINK" or [event][type] == "OTHERCONN_DELINK" {
        grok {
          match => {
            "rest_msg" => " Source (?<[source][ip]>.*?)\:(?<[source][port]>\d+) - Vserver (?<[server][ip]>.*?)\:(?<[server][port]>\d+) - NatIP (?<[source][nat][ip]>.*?)\:(?<[source][nat][port]>\d+) - Destination (?<[destination][ip]>.*?)\:(?<[destination][port]>\d+) - Delink Time (?<[event][end]>.*?) (?:- )?Total_bytes_send (?<[source][bytes]>\d+) - Total_bytes_recv (?<[destination][bytes]>\d+)"
          }
          timeout_millis => 500
        }
      }
      else if [event][type] == "CONN_TERMINATE" {
        dissect{
          mapping => {
            "rest_msg" => " Source %{[[source][ip]]}:%{[[source][port]]} - Destination %{[[destination][ip]]}:%{[[destination][port]]} - Start Time %{[[event][start]]} %{+[[event][start]]} - End Time %{[[event][end]]} %{+[[event][end]]} - Total_bytes_send %{[[source][bytes]]} - Total_bytes_recv %{[[destination][bytes]]}"
          }
        }
      }
      else if [event][type] == "NAT_CONN_DELINK" or [event][type] == "NAT_OTHERCONN_DELINK" {
        dissect{
          mapping => {
            "rest_msg" => " Source %{[[source][ip]]}:%{[[source][port]]} - Destination %{[[destination][ip]]}:%{[[destination][port]]} - NatIP %{[[server][nat][ip]]}:%{[[server][nat][port]]} - Destination %{[[destination][ip]]}:%{[[destination][port]]} - Start Time %{[[event][start]]} %{+[[event][start]]} -End Time %{[[event][end]]} %{+[[event][end]]} - Total_bytes_send %{[[source][bytes]]} - total_bytes_recv %{[[destination][bytes]]} - ClosureReason %{[[event][reason]]}"
          }
        }
      }
    }
    else if [event][kind] == "ICA" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 3 (ICA)" }
      }
      if [event][type] == "Message" {
        if [rest_msg] =~ "Session GUID" {
          dissect {
            mapping => {
              "rest_msg" => " %{[[rule][name]]}:%{?data}Session GUID [%{[[event][id]]}],%{rest_data}"
            }
          }
          kv {
            source => "rest_data"
            field_split => "\],"
            value_split => "\["
            target => "net"
          }
          dissect {
            mapping => {
              "[net][ Client IP/Port ]" => "%{[[source][ip]]}/%{[[source][port]]}"
              "[net][ Server IP/Port ]" => "%{[[destination][ip]]}/%{[[destination][port]]}"
            }
          }
          mutate{
            rename=> { "[net][ User ]" => "[source][user][name]" }
            rename=> { "[net][ Server ]" => "[destination][address]" }
            rename=> { "[net][ Client ]" => "[source][address]" }
            rename=> { "[net][ Session setup time ]" => "[event][start]" }
            rename=> { "[net][ Skip Code ]" => "[event][code]" }
          }
        }
        else {
          mutate {
            rename=> { "rest_msg" => "[rule][description]" }
          }
        }
      }
      else {
        dissect{
            mapping => {
              "rest_msg" => "%{?starting_data}session_guid %{[[event][id]]} - device_serial_number %{[[host][serial]]} - client_cookie %{[[http][cookie][name]]} - flags %{?data} - %{rest_data}"
            }
        }
        if [event][type] == "SESSION_SETUP" {
          dissect{
            mapping => {
              "rest_msg" => "session_setup_time %{[[event][start]]} - client_ip %{[[source][ip]]} - client_type %{?data} - client_launcher %{?data} - client_version %{?data} - client_hostname %{[[source][address]]} - domain_name %{[[source][domain]]} - server_name %{[[server][address]]} - connection_priority %{[[event][severity_name]]} - access_type %{[[event][reason]]} - status %{[[event][code]]} - username %{[[source][user][name]]}"
            }
          }
        }
        else if [event][type] == "SESSION_UPDATE" {
          dissect{
            mapping => {
              "rest_msg" => "nsica_session_status %{[[event][code]]} - nsica_session_client_ip %{[[source][ip]]} - nsica_session_client_port %{[[source][port]]} - nsica_session_server_ip %{[[destination][ip]]} - %{[[source][ip]]} nsica_session_server_port %{[[destination][port]]} - %{?data}"
            }
          }
        }
      }
    }
    else if [event][kind] == "AAA" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 4 (AAA)" }
      }
      if [event][type] == "EXTRACTED_GROUPS" {
        dissect {
          mapping => {
            "rest_msg" => " Extracted_groups %{[[group][name]]}"
          }
        }
      }
      else if [event][type]  == "LOGIN_FAILED" {
        dissect {
          mapping => {
            "rest_msg" => "{?starting_data}User %{[[source][user][name]]} - Client_ip %{[[source][ip]]} - Failure_reason %{[[error][message]]} - Browser %{[[user_agent][name]]}"
          }
        }
      }
      else {
        mutate {
          rename => { "rest_msg" => "[rule][description]" }
        }
      }
    }
    else if [event][kind] == "DNS" or [event][kind] == "SSLI" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 5 (DNS-SSLI)" }
      }
      dissect {
        mapping => {
          "rest_msg" => " Source (?<[source][ip]>.*?)\:(?<[source][port]>\d+) - Destination (?<[destination][ip]>.*?)\:(?<[destination][port]>\d+) User : %{[[source][user][name]]} - Domain : %{[[source][domain]]} - Category : %{[[rule][category]]} Action : %{[[event][action]]} - Reason : %{[[event][reason]]}"
        }
      }
    }
    else if [event][kind] == "SSLVPN" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 6 (SSLVPN)" }
      }
      if [event][type] == "LOGIN" {
        dissect {
          mapping => {
            "rest_msg" => "%{?starting_data}SessionId: %{[[trace][id]]} - User %{[[source][user][name]]} - Client_ip %{[[source][ip]]} - Nat_ip %{[[source][nat][ip]]} - Vserver %{[[destination][ip]]}:%{[[destination][port]]} - Browser_type %{[[user_agent][name]]} - SSLVPN_client_type %{sslvpn_client_type} - Group(s) %{[[group][name]]}"
          }
        }
      }
      else if [event][type] == "LOGOUT" {
        dissect {
          mapping => {
            "rest_msg" => "%{?starting_data}User %{[[source][user][name]]} - Client_ip %{[[source][ip]]} - Nat_ip %{[[source][nat][ip]]} - Vserver %{[[destination][ip]]}:%{[[destination][port]]} - Start_time %{[[event][start]]} - End_time %{[[event][end]]} - Duration %{fix_duration}  - Http_resources_accessed %{http_resource_accessed} - Total_TCP_connections %{total_tcp_connection} - Total_policies_allowed %{total_policies_allowed} - Total_policies_denied %{total_policies_denied} - Total_bytes_send %{[[source][bytes]]} - Total_bytes_recv %{[[destination][bytes]]} - Total_compressedbytes_send %{?data} - Total_compressedbytes_recv %{?data} - Compression_ratio_send %{?data} - Compression_ratio_recv %{?data} - LogoutMethod %{[event][reason]} - Group(s) %{[[group][name]]}"
          }
        }
      }
      else if [event][type] == "HTTPREQUEST" {
        grok {
          match => {
            "rest_msg" => "Context.*?\@(?<[source][ip]>\d+.*?)\s+\- (?<rest_data>.*?$)"
          }
          timeout_millis => 500
        }
        dissect {
          mapping => {
            "rest_data" => "SessionId: %{[[trace][id]]}- %{[[url][full]]} User %{[[source][user][name]]} : Group(s) %{[[group][name]]} : Vserver %{[[destination][ip]]}:%{[[destination][port]]} - %{[[event][start]]} : SSO is %{?sso} : %{[[http][request][method]]} %{[[http][request][referrer]]} -%{?data}"
          }
        }
      }
      else if [event][type] == "TCPCONNSTAT" {
        dissect {
          mapping => {
            "rest_msg" => "%{?starting_data}SessionId: %{[[trace][id]]} - User %{[[source][user][name]]} - Client_ip %{[[source][ip]]} - Nat_ip %{[[source][nat][ip]]} - Vserver %{[[server][ip]]}:%{[[server][port]]} - Source %{[[source][ip]]}:%{[[source][port]]} - Destination %{[[destination][ip]]}:%{[[destination][port]]} - Start_time %{[[event][start]]} - End_time %{[[event][end]]} - Duration %{?data} - Total_bytes_send %{[[source][bytes]]} - Total_bytes_recv %{[[destination][bytes]]} - Total_compressedbytes_send %{?data} - Total_compressedbytes_recv %{?data} - Compression_ratio_send %{?data} - Compression_ratio_recv %{?data} - Access %{[[event][action]]} - Group(s) %{[[group][name]]}"
          }
        }
      }
      else if [event][type] == "TCPCONN_TIMEDOUT" {
        dissect {
          mapping => {
            "rest_msg" => "%{?starting_data}SessionId: %{[[trace][id]]} - User %{[[source][user][name]]} - Client_ip %{[[source][ip]]} - Nat_ip %{[[source][nat][ip]]} - Vserver %{[[destination][ip]]}:%{[[destination][port]]} - Last_contact %{[[event][end]]} - Group(s) %{[[group][name]]}"
          }
        }
      }
      else if [event][type] == "UDPFLOWSTAT" {
        dissect {
          mapping => {
            "rest_msg" => "%{?starting_data}SessionId: %{[[trace][id]]} - User %{[[source][user][name]]} - Client_ip %{[[source][ip]]} - Nat_ip %{[[source][nat][ip]]} - Vserver %{[[server][ip]]}:%{[[server][port]]} - Source %{[[source][ip]]}:%{[[source][port]]} - Destination %{[[destination][ip]]}:%{[[destination][port]]} - Start_time %{[[event][start]]} - End_time %{[[event][end]]} - Duration %{?data} - Total_bytes_send %{[[source][bytes]]} - Total_bytes_recv %{[[destination][bytes]]} Access %{[[event][action]]} - Group(s) %{[[group][name]]}"
          }
        }
      }
      else if [event][type] =~ "HTTP_RESOURCEACCESS_DENIED" {
        dissect {
          mapping => {
            "rest_msg" => "%{?starting_data}Denied_by_policy %{[[rule][name]]}"
          }
        }
      }
      else if [event][type] == "ICAEND_CONNSTAT" {
        dissect {
          mapping => {
            "rest_msg" => " Source %{[[source][ip]]}:%{[[source][port]]} - Destination %{[[destination][ip]]}:%{[[destination][port]]} - customername  - username:domainname %{[[source][user][name]]}:%{[[source][user][domain]]} - startTime %{[[event][start]]} - endTime %{[[event][end]]} - Duration %{?data}  - Total_bytes_send %{[[source][bytes]]} - Total_bytes_recv %{[[destination][bytes]]} - Total_compressedbytes_send %{?data} - Total_compressedbytes_recv %{?data} - Compression_ratio_send %{?data} - Compression_ratio_recv %{?data} - connectionId %{[[trace][id]]} - Total_bytes_wire_send %{?data} - Total_bytes_wire_recv %{?data}"
          }
        }
      }
      else if [event][type] == "ICASTART" {
        dissect {
          mapping => {
            "rest_msg" => " Source %{[[source][ip]]}:%{[[source][port]]} - Destination %{[[destination][ip]]}:%{[[destination][port]]} - customername  - username:domainname %{[[source][user][name]]}:%{[[source][user][domain]]} - applicationName %{[[process][name]]} startTime %{[[event][start]]} - connectionId %{[[trace][id]]}"
          }
        }
      }
      else if [event][type] == "LICLMT_REACHED" {
        dissect {
          mapping => {
            "rest_msg" => "{?starting_data}Vserver %{[[server][ip]]}:%{[[server][port]]} - License_limit %{?data}"
          }
        }
      }
      else if [event][type] == "REMOVE_SESSION_DEBUG" {
        dissect {
          mapping => {
            "rest_msg" => "{?starting_data}Sessionid %{[[trace][id]]} - User %{[[source][user][name]]} - Client_ip %{[[source][ip]]} - Nat_ip %{[[source][nat][ip]]} - Vserver %{[[server][ip]]}:%{[[server][port]]} - Errmsg %{[[error][message]]}"
          }
        }
      }
      else if [event][type] == "CLISEC_EXP_EVAL" {
        dissect {
          mapping => {
            "rest_msg" => "{?starting_data}User %{[[source][user][name]]} :- Client_ip %{[[source][ip]]} - Vserver %{[[server][ip]]}:%{[[server][port]]} - %{?data}"
          }
        }
      }
      else if [event][type] == "CLISEC_CHECK" {
        dissect {
          mapping => {
            "rest_msg" => "{?starting_data}Client_ip %{[[source][ip]]} - Vserver %{[[server][ip]]}:%{[[source][port]]} - %{?data}"
          }
        }
      }
      else{
        mutate{
          rename => { "rest_msg" => "[rule][description]" }
        }
      }
    }
    else if [event][kind] == "AAATM" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 7 (AAATM)" }
      }
      if [event][type] == "Message" {
        mutate{
          rename => { "rest_msg" => "[rule][description]" }
        }
      }
      else{
        kv {
          source => "rest_msg"
          field_split => "-"
          value_split_pattern => " "
          target => "net"
        }
        mutate {
          rename => {
            "[net][Vserver]" => "Vserver"
            "[net][Source]" => "Source"
            "[net][Destination]" => "Destination"
            "[net][Nat_ip]" => "Natip_value"
            "[net][username:domainname]" => "user_dom"
          }
        }
        if [Vserver] {
          dissect {
            mapping => {
              "Vserver" => "%{[[server][ip]]}:%{[[server][port]]}"
            }
          }
        }
        if [Source] {
          dissect {
            mapping => {
              "Source" => "%{[[source][ip]]}:%{[[source][port]]}"
            }
          }
        }
        if [Destination] {
          dissect {
            mapping => {
              "Destination" => "%{[[destination][ip]]}:%{[[destination][port]]}"
            }
          }
        }
        if [Natip_value] {
          grok {
              tag_on_failure => "_parsefailure_ci"
              match => { "Natip_value" => "(?<[source][nat][ip]>[^\:]+)\:?(<[source][nat][port]>\d+)?" }
              timeout_millis => 500
          }
        }
        if [user_dom] {
          grok {
            match => { user_dom => "(<[source][user][name]>[^\:]+)\:?(<[source][user][domain]>.*?)?" }
            timeout_millis => 500
          }
        }
        mutate {
          rename => {"[net][User]" => "[source][user][name]"}
          rename => {"[net][Client_ip]" => "[client][ip]" }
          rename => {"[net][Group(s)]" => "[group][name]"}
          rename => {"[net][Browser_type]" => "[user_agent][name]" }
          rename => {"[net][Start_time]" => "[event][start]"}
          rename => {"[net][End_time]" => "[event][end]"}
          rename => {"[net][Duration]" => "[event][duration]"}
          rename => {"[net][Total_bytes_recv]" => "[source][bytes]"}
          rename => {"[net][Total_bytes_send]" => "[destination][bytes]"}
          rename => {"[net][LogoutMethod]" => "[event][reason]" }
        }
      }
    }
    else if [event][kind] == "ACL" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 8 (ACL)" }
      }
      dissect{
        mapping => {
          "rest_msg" => " Source %{[[source][ip]]}:%{[[source][port]]} -> Destination %{[[destination][ip]]}:%{[[destination][port]]} Protocol %{[network][protocol]- Type %{[[service][type]]} - Code %{[[event][code]]} Timestamp %{[[event][duration]]} - Hit count %{[[event][sequence]]} - Hit Rule %{[[rule][name]]} - Action %{[[event][action]]} - Data"
        }
      }
    }
    else if [event][kind] == "ALG" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 9 (ALG)" }
      }
      kv {
        source => "rest_msg"
        field_split => "-"
        value_split => ":"
        target => "net"
      }
      mutate {
        rename => { "Group" => "[group][name]" }
        rename => { "Errmsg" => "[error][message]" }
        rename => { "Source_IP" => "[source][ip]" }
        rename => { "Source_port" => "[source][port]" }
        rename => { "Destination_IP" => "[destination][ip]" }
        rename => { "Destination_port" => "[destination][port]" }
        rename => { "Natted_IP" => "[source][nat][ip]" }
        rename => { "Natted_port" => "[source][nat][port]" }
        rename => { "Sequence_Number" => "[event][sequence]" }
        rename => { "Caller_user_name" => "[source][user][name]" }
        rename => { "Callee_user_name" => "[destination][user][name]" }
        rename => { "Caller_domain_name" => "[source][user][domain]" }
        rename => { "Callee_domain_name" => "[destination][user][domain]" }
        rename => { "Call_ID" => "[trace][id]" }
        rename => { "Error_Code" => "[error][code]" }
        rename => { "Infomsg" => "[event][reason]" }
        rename => { "Session_ID" => "[trace][id]" }
        rename => { "Method" => "[event][action]" }
        rename => { "Error" => "[error][type]" }
      }
    }
    else if [event][kind] == "SUBSCRIBER" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 10 (SUBSCRIBER)" }
      }
      if [event][type] == "SESSION_EVENT" {
        dissect {
          mapping => {
           "rest_msg" => " Session %{[[trace][id]]}"
          }
        }
      }
      else if [event][type] == "SESSION_FAILURE" {
        dissect {
          mapping => {
           "rest_msg" => " FailureReason\s?: %{[[error][message]]}"
          }
        }
      }
      else{
        mutate {
          rename => { "rest_msg" => "[rule][description]" }
        }
      }
    }
    else if [event][kind] == "URLFILT" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 11 (URLFILT)" }
      }
      dissect{
        mapping => {
          "rest_msg" => " Source %{[[source][address]]} - Destination %{[[destination][address]]} URL %{[[url][full]]} - Category %{[[group][id]]} - Categorygroup %{[[group][name]]} - Reputation %{[[event][risk_score]]} - Policyaction %{[[event][action]]}"
        }
      }
    }
    else if [event][kind] == "CI"{
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 12 (CI)" }
      }
      if [event][type] == "ICAP_LOG" {
        grok {
          tag_on_failure => "_parsefailure_ci"
          match => { "rest_msg" => "Source (?<[source][ip]>.*?)\:(?<[source][port]>\d+) - Destination (?<[destination][ip]>.*?)\:(?<[destination][port]>\d+) - Domain\s+(?<[url][domain]>.*?) - Content\s+\-\s+Type.*?ICAPServer (?<[server][ip]>.*?)\:(?<[server][port]>\d+) - Mode (?<[service][type]>.*?) Service (?<[service][name]>.*?) Response(?<[http][response][status_code]>\d+) - Action (?<[event][action]>.*?)" }
          timeout_millis => 500
        } 
      }
      else if [event][type] == "INLINE_INSPECTION_LOG" or [event][type] == "TRAFFIC_MIRROR_LOG" {
        grok {
          tag_on_failure => "_parsefailure_ci"
          match => { "rest_msg" => "ID (?<[event][id]>.*?) - Source (?<[source][ip]>.*?)\:(?<[source][port]>\d+) - Destination (?<[destination][ip]>.*?)\:(?<[destination][port]>\d+) - Protocol (?<[network][protocol]>.*?) - URL (?<[url][full]>.*?) - Domain\s+(?<[url][domain]>.*?) - Service (?<[service][name]>.*?) - .*? - Action (?<[event][action]>.*?) - (Request)?\s?Bytes\s?Sent (?<[source][bytes]>\d+) - (Response)?\s?Bytes\s?Sent (?<[destination][bytes]>\d+) - OriginServer (?<[server][ip]>.*?)\:(?<[server][port]>\d+)" }
          timeout_millis => 500
        }
      }
      else {
        mutate {
          rename => { "rest_msg" => "[rule][description]" }
        }
      }
    }
    else if [event][kind] == "TRANSFORM" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 13 (TRANSFORM)" }
      }
      kv {
        source => "rest_msg"
        field_split => "-"
        value_split => " "
        target => "net"
      }
      mutate {
        rename => { "Client" => "[client][ip]" }
        rename => { "Action" => "[event][action]" }
        rename => { "PCREerrorcode" => "[error][code]" }
        rename => { "URL" => "[url][full]" }
        rename => { "Profile" => "[rule][name]" }
        rename => { "into" => "[url][full]" }
      }
    }
    else if [event][kind] == "RDP" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 14 (RDP)" }
      }
      kv {
          source => "rest_msg"
          field_split => "-"
          value_split => ":"
          target => "net"
        }
        mutate {
          rename => {
            "[net][UserName]" => "[source][user][name]"
          }
        }
    }
    else if [event][kind] == "UI" or [event][kind] == "CLI" or [event][kind] == "GUI" or [event][kind] == "API" or [event][kind] == "CONSOLE" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 15 (CMD_EXECUTE)" }
      }
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 3" }
      }
      kv {
        source => "rest_msg"
        field_split => "-"
        value_split => " "
        target => "net"
      }
      mutate{
        rename => { "[net][User]" => "[source][user][name]" }
        rename => { "[net][Command]" => "[process][command_line]" }
        rename => { "[net][Remote_ip]" => "[destination][ip]" }
        rename => { "[net][Status]" => "[event][outcome]" }
      }
      
    }
    else if [event][kind] == "BOT" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 16 (BOT)" }
      }
      if [event][type] == "BOT_TPS" {
        mutate{
          rename => { "rest_msg" => "[rule][description]" }
        }
      }
      else {
        dissect {
          mapping => {
           "rest_msg" => "%{[[event][action]]}. %{rest_data}"
          }
        }
        kv {
          source => "rest_data"
          field_split => " "
          value_split => ":"
          target => "net"
        }
        mutate {
          rename => { "URL" => "[url][full]" }
          rename => { "LogMsg" => "[event][reason]" }
          rename => { "User-Agent" => "[user_agent][name]" }
        }
      }
    }
    else if [event][kind] == "CVPN" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 17 (CVPN)" }
      }
      kv {
        source => "rest_msg"
        field_split => ":"
        value_split => " "
        target => "net"
      }
      mutate {
        rename => { "[net][HTML_URL]" => "[url][full]" }
        rename => { "[net][REWRITTEN_URL]" => "[url][full]" }
        rename => { "[net][MATCHED_URL]" => "[url][full]" }
        rename => { "[net][PCRE_ERROR]" => "[error][code]"}
        rename => { "rest_msg" => "[rule][description]" }
      }
    }
    else if [event][kind] == "SSLLOG" {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 18 (SSLLOG)" }
      }
      if [event][type] == "SSL_OCSPURL_RESOLVE_SUCCESS" or [event][type] == "SSL_OCSPURL_RESOLVE_FAILURE" {
        dissect {
          mapping => {
           "rest_msg" => "Domainname %{[[source][domain]] Ipaddress %{[[source][ip]]}}"
          }
        }
      }
      else if [event][type] =~ "SSL_HANDSHAKE" or [event][type] == "SSL_CERT_EXPIRY_IMMINENT" or [event][type] =~ "SSL_CRL_UPDATE" {
        kv {
          source => "rest_msg"
          field_split => "-"
          value_split => ":"
          target => "net"
        }
        mutate {
          rename => { "ServerIP" => "[server][ip]" }
          rename => { "ServerPort" => "[server][port]" }
          rename => { "SubjectName" => "[tls][server][subject]" }
          rename => { "IssuerName" => "[tls][server][issuer]" }
        }
      }
      else {
        mutate{
          rename => { "rest_msg" => "[rule][description]" }
        }
      }
    }
    # else if [event][kind] == "LSN" or [event][kind] == "PITBOSS" or [event][kind] == "NSIP6" or [event][kind] == "EVENT" or [event][kind] == "APPFW" or [event][kind] == "ROUTING" or [event][kind] == "SNMP" or [event][kind] == "APPFW_RESP" {
    else {
      mutate{
        add_field => { "[agent][parse_rule]" => "RULE 18 (OTHERS)" }
      }
      mutate {
        rename => { "rest_msg" => "[rule][description]" }
      }
    }
    mutate {
      strip => ["[source][port]", "[source][nat][ip]"]
      gsub => [ "[log][date_time]", "'", "" ]
    }
    mutate {
      convert => {"[destination][bytes]" => "integer"}
      convert => {"[source][bytes]" => "integer"}
      convert => {"[destination][port]" => "integer"}
      convert => {"[source][port]" => "integer"}
    }
    if [event][start] {
      date {
        match => ["[event][start]","MM/dd/yyyy:HH:mm:ss z","MM/dd/yyyy:HH:mm:ss ZZZ","MM/dd/yyyy:HH:mm:ss 'GMT '"]
        timezone => "GMT"
        locale => "en"
        target => "[event][start]"
        tag_on_failure => "_dateparsefailure_se"
      }
    }
    if [event][end] {
      date {
        match => ["[event][end]","MM/dd/yyyy:HH:mm:ss z","MM/dd/yyyy:HH:mm:ss 'GMT '"]
        timezone => "GMT"
        locale => "en"
        target => "[event][end]"
      }
    }
    if "_dateparsefailure_se" in [tags]  {
      mutate {
        remove_field => ["[event][start]"]
      }
    }
    if [source][ip] {
      if [source][ip] =~ "a" or [source][ip] =~ "c" or [source][ip] =~ " " {
        mutate {
          remove_field => ["[source][ip]"]
        }
      }
    }
    if [source][nat][ip] {
      if [source][nat][ip] =~ "a" or [source][nat][ip] =~ "c" or [source][nat][ip] =~ " "
      {
        mutate {
          remove_field => ["[source][nat][ip]"]
        }
      }
    }
    mutate {
      remove_field => ["event_description","Natip_value","rest_data","http_resource_accessed","rest_msg","[net]","[log][date_time]","starting_data","classification_values","Vserver","Source","Destination","Client_ip","kv_msg","[event][created]","fix_duration","non_http_resource_accessed","total_tcp_connection","total_upd_flows","total_policies_allowed","total_policies_denied","[source][compressed_bytes]","[destination][compressed_bytes]","[source][compression_ratio]","[destination][compression_ratio]","logout_method","sslvpn_client_type","[dest][ip]","actual_msg"]
    }
  }
  # Do not remove this, due to internal need.
  if [host][hostname] and ([host][hostname] != "" or [host][hostname][0] != "" ) {
    mutate {
      copy => { "[host][hostname]" => "[host][name]" }
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}