# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  json {
    source => "message"
    target => "ss"
  }
  mutate {
    rename => { "[ss][last_seen_time]" => "[event][end]" }
    rename => { "[ss][first_seen_time]" => "[event][start]" }
    rename => { "[ss][issue_id]" => "[event][id]" } 	
    rename => { "[ss][scheme]" => "[network][protocol]" }
    rename => { "[ss][final_url]" => "[url][full]" }
    rename => { "[ss][domain]" => "[host][domain]" }
    rename => { "[ss][hostname]" => "[dns][answers][name]" }
    rename => { "[ss][user_agent]" => "[user_agent][original]" }
    rename => { "[ss][src_ip]" => "[source][ip]" }
    rename => { "[ss][product_state_status_description]" => "[service][state]" }
    rename => { "[ss][product_state_ref]" => "[rule][reference]" }
    rename => { "[ss][analysis_description]" => "[rule][description]" }
    rename => { "[ss][connection_attributes][protocol]" => "[network][transport]" }
    rename => { "[ss][connection_attributes][dst_port]" => "[destination][port]" }
    rename => { "[ss][connection_attributes][dst_ip]" => "[destination][ip]" }
    rename => { "[ss][connection_attributes][dst_host]" => "[dns][answers][name]" }
    rename => { "[ss][event.dataset]" => "[event][dataset]" }
  }
  if ![event][start] and [observations][last_seen_at] {
    mutate {
      rename => { "[observations][last_seen_at]" => "[event][start]"}
    }
  }
  date {
    match => ["[event][start]" , "yyyy-mm-dd HH:mm:ss", "ISO8601"]
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_es"
  }
  if "_dateparsefailure_es" in [tags] {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
    remove_field => ["[event][start]"]
    }
  }
  date {
    match => ["[event][end]" , "yyyy-mm-dd HH:mm:ss", "ISO8601"]
    target => "[event][end]"
    tag_on_failure => "_dateparsefailure_ee"
  }
  if "_dateparsefailure_ee" in [tags] {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
    remove_field => ["[event][end]"]
    }
  }
  mutate {
    remove_field => [ "[ss]" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}