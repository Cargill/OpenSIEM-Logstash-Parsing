# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "cisco" }
    add_field => { "[event][dataset]" => "cisco.ise" }
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }

  # 1. Start by copying the original message to [log][original].  We'll then pick the common fields and placing them under [tmp]. [tmp] is a temporary slot to work out the parsing. Ideally we should use dissect but there are some variations in logs for what grok is a better fit
  mutate {
    add_field => {"[log][original]" => "%{[message]}"}
  }
  grok {
    match => {
      "actual_msg" => "%{SYSLOGTIMESTAMP:syslog_date} %{NOTSPACE:[[observer][name]]} %{NOTSPACE:[[tmp][cat_name]]} %{NUMBER:[[tmp][msg_id]]} %{NUMBER:[[tmp][total_segments]]} %{NUMBER:[[tmp][segment_number]]} %{GREEDYDATA:[[tmp][msg]]}"
    }
    timeout_millis => 500
  }

  #grok doesn't allow some nested fields, so we'll convert here so we can conveniently drop "tmp" later
  mutate {
    rename => { "syslog_date" => "[tmp][syslog_date]"}
    rename => { "priority" => "[tmp][priority]"}
  }

  # 2. Correct timestamps are crucial to ISE logs, so we'll make sure to convert and update them
  mutate {
    copy => { "@timestamp" => "[event][ingested]"}
  }

  date {
    match => ["[tmp][time]",  "MMM dd yyyy HH:mm:ss",
            "MMM  d yyyy HH:mm:ss", "ISO8601" ]
    target => "[event][created]"
    id => "datetime_created"
  }

  date {
    match => ["[tmp][syslog_date]",  "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss"   ]
    #by not updating timestamp directly we avoid issues if there are problems with this field
    target => "[tmp][syslog_date]"
    id => "datetime_syslog_date"
  }

  mutate {
    copy => { "[tmp][syslog_date]" => "[@timestamp]"}
  }

  # 3. Cisco ISE events may be split into multiple log messages. Until we implement stitching for these logs, we need to parse those differently, as follows:
  # a) If the [tmp][segment_number] is 0 we'll fully parse the message.
  if [tmp][segment_number] == "0"
  {
    dissect {
      mapping => {
        "[tmp][msg]" => "%{[[tmp][ise_timestamp]]} %{+[[tmp][ise_timestamp]]} %{+[[tmp][ise_timestamp]]} %{[[tmp][ise_seq_num]]} %{[[event][code]]} %{[log][syslog][severity][name]} %{[[tmp][class]]}: %{[[tmp][msg_text]]}, %{[[tmp][rest_msg]]}"
      }
    }
    kv {
      source => "[tmp][rest_msg]"
      field_split => "="
      field_split_pattern => ", "
      target => "[kvs]"
      remove_char_key => "\s"
      # whitespace => "strict" #check later
    }
    date { 
      match => ["[tmp][ise_timestamp]",  "MMM dd yyyy HH:mm:ss",
                  "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS ZZ" ]
      target => "[@timestamp]"
      id => "datetime_ise_timestamp"
    }
  }

  # b) If [tmp][segment_number] is >0, all is left on the message are the KVs
  else
  {
    mutate {
      rename => { "[tmp][msg]" => "[tmp][rest_msg]"}
    }
    kv {
      source => "[tmp][rest_msg]"
      field_split => "="
      field_split_pattern => ", "
      target => "[kvs]"
      remove_char_key => "\s"
      # whitespace => "strict" #check later
    }
  }

  # 4. Transform KV fields if necessary
  if [kvs][FailureReason]
  {
    grok {
      match => { "[kvs][FailureReason]" => "%{NUMBER:[[error][code]]} %{GREEDYDATA:[[error][message]]}"}
      timeout_millis => 500
    }
  }

  # 5. We end up with all key ISE specific fields. Everything else particular to event is under rest_msg.
  #    Now use separate mutate filters (for readability) to perform actions below:
  # a) Parse fields that belong to ECS into ECS fields
  mutate {
    rename => { "[tmp][msg_text]" => "[event][reason]" }
    rename => { "[tmp][cat_name]" => "[event][action]"}
    rename => { "[tmp][msg_id]" => "[event][id]" }
    rename => { "[tmp][class]" => "[event][provider]"}
    add_field => {"[event][sequence]" => "%{[[tmp][segment_number]]}_%{[[tmp][total_segments]]}"}
  }

  # 6. Categorizations
  translate {
    source => "[event][action]"
    target => "[event][module]"
    dictionary => {
      "CISE_Passed_Authentications" => "aaa_audit"
      "CISE_AAA_Audit" => "aaa_audit"
      "CISE_Failed_Authentications" => "aaa_audit"
      "CISE_AAA_Diagnostics" => "aaa_diagnostics"
      "CISE_Authentication_Flow_Diagnostics" => "aaa_diagnostics"
      "CISE_Identity_Stores_Diagnostics" => "aaa_diagnostics"
      "CISE_Policy_Diagnostics" => "aaa_diagnostics"
      "CISE_RADIUS_Diagnostics" => "aaa_diagnostics"
      "CISE_Guest" => "aaa_diagnostics"
      "CISE_My_Devices" => "aaa_diagnostics"
      "CISE_AD_Connector" => "aaa_diagnostics"
      "CISE_TACACS_Diagnostics" => "aaa_diagnostics"
      "CISE_Accounting" => "accounting"
      "CISE_RADIUS_Accounting" => "accounting"
      "CISE_TACACS_Accounting" => "accounting"
      "CISE_System_Diagnostics" => "system_diagnostics"
      "CISE_Licensing" => "system_diagnostics"
    }
    fallback => "event"
  }
  translate {
      source => "[event][action]"
      target => "[event][kind]"
      dictionary => {
          "CISE_Failed_Authentications" => "alert"
          "CISE_Failed_Attempts" => "alert"
      }
      fallback => "event"
  }
  translate {
    source => "[event][action]"
    target => "[event][category]"
    dictionary => {
      "CISE_System_Diagnostics" => "host"
      "CISE_Licensing" => "host"
      "CISE_TACACS_Accounting" => "configuration"
      "CISE_RADIUS_Accounting" => "configuration"
    }
    fallback => "authentication"
  }
  translate {
    source => "[event][action]"
    target => "[event][type]"
    dictionary => {
      "CISE_Passed_Authentications" => "allowed"
      "CISE_Failed_Authentications" => "denied"
      "CISE_System_Diagnostics" => "info"
      "CISE_Licensing" => "info"
    }
    fallback => "access"
  }
  translate {
    source => "[event][action]"
    target => "[event][outcome]"
    dictionary => {
      "CISE_Passed_Authentications" => "success"
      "CISE_Failed_Authentications" => "failure"
      "CISE_Failed_Attempts" => "failure"
    }
    fallback => "unknown"
  }

  # 7. ISE Specific convertions. Note that ISE fields vary by message type, so not all fields are present in every message
  mutate {
    rename => { "[kvs][DeviceIPAddress]" => "[source][ip]" }
    rename => { "[kvs][DevicePort]" => "[source][port]"}
    rename => { "[kvs][DetinationIPAddress]" => "[destination][ip]"}
    rename => { "[kvs][DestinationPort]" => "[destination][port]"}
    rename => { "[kvs][Protocol]" => "[network][protocol]"}
    rename => { "[kvs][NetworkDeviceName]" => "[host][hostname]"}
    rename => { "[kvs][UserName]" => "[user][id]"}
    rename => { "[kvs][CmdSet]" => "proc_tmp"}
    remove_field => ["[kvs][FailureReason]"]
  }
  mutate {
    gsub => [
	  "proc_tmp", "\[\]", "",
	  "proc_tmp", "CmdArgAV=", "",
	  "proc_tmp", "<cr>", ""
      ]
	strip => [ "proc_tmp" ]
  }
  grok {  
    match => {
      "proc_tmp" => "^CmdAV=(?<[process][command_line]>.*?)(\s\<cr\>)?$"
    }
  } 

  # 8. Convert fields (i.e. extract site, appliance type, etc)
  if [tmp][segment_number] == "0" and [host][hostname]
  {
    if "" in [network][name] or ![network][name] {
      mutate {
        add_field => {"[network][name]" => "%{[[host][hostname]]}" }
      }
    }
    mutate {
      add_field => {"[service][type]" => "%{[[host][hostname]]}"}
    }
    mutate {
      gsub => [
        "[service][type]", "(.*)-([a-z]*)", "\2",
        "[network][name]", "([a-z]*)([0-9].*)", "\1"
      ]
    }
  }
  json_encode {
    source => "[kvs]"
    target => "[labels][tags]"
  }

  # 9. Drop unused/unwanted fields
  mutate {
    remove_field => [ "[tmp]", "[kvs]", "actual_msg", "proc_tmp" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
