# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "proofpoint" }
    add_field => { "[event][dataset]" => "proofpoint.trap" }
    add_field => { "[log][source][hostname]" => "api_proofpoint_trap" }
  }
  json {
    source => "message"
    target => "tmp"
  }
  mutate {
    rename => { "[tmp][summary]" => "[event][reason]" }
    rename => { "[tmp][event_sources]" => "[event][category]" }
    rename => { "[tmp][created_at]" => "[event][created]" }
    rename => { "[tmp][event_ids]" => "[event][id]" }
    rename => { "[tmp][hosts][cnc]" => "[related][ip]" }
    rename => { "[tmp][hosts][attacker]" => "[threat][list][ioc]" }
    rename => { "[tmp][hosts][forensics]" => "[threat][list][event_analysis]" }
    rename => { "[tmp][description]" => "[rule][description]" }
    rename => { "[tmp][id]" => "[trace][id]" }
    rename => { "[tmp][score]" => "[event][risk_score]" }
    rename => { "[tmp][state]" => "[event][outcome]" }
    rename => { "[tmp][closed_at]" => "[event][end]" }
    rename => { "[tmp][updated_at]" => "[event][modified]" }
    rename => { "[tmp][team]" => "[team][name]" }
    rename => { "[tmp][assignee]" => "[assignee][user][name]" }
    rename => { "[tmp][event_count]" => "[event][sequence]" }
    rename => { "[tmp][close_detail]" => "[event][recommendation]" }
    rename => { "[tmp][failed_quarantines]" => "[event][risk_score_norm]" }
    
  }
  ruby {
    code => "
     detected_user_list = []
     detected_email_list=[]
     if event.get('[tmp][users]').kind_of?(Array)
      event.get('[tmp][users]').each do |item|
        if item != ''
         detected_user_list.push(item)
        end
      end
    end
    if event.get('[tmp][quarantine_results]').kind_of?(Array)
      event.get('[tmp][quarantine_results]').each do |item|
        if item['recipient'] != '' or 'null'
         detected_email_list.push(item['recipient'])
        end
      end
    end
    if event.get('[tmp][incident_field_values]').kind_of?(Array)
      event.get('[tmp][incident_field_values]').each do |item|
        if item['name'] == 'Classification'
         event.set('[threat][list][category]', item['value'])
        end
        if item['name'] == 'Attack Vector'
         event.set('[threat][list][attribute_tag]', item['value'])
        end
        if item['name'] == 'Severity'
         event.set('[event][severity_name]', item['value'])
        end
      end
    end
     if !detected_user_list.empty?
      event.set('[source][user][name]', detected_user_list)
     end
     if !detected_email_list.empty?
      event.set('[user][email]', detected_email_list)
     end
    "
    tag_on_exception => "msgparts_ruby_block"
  }

  mutate {
    remove_field => [ "tmp" ]
  }
  date {
    match => ["[event][created]","yyyy-MM-dd'T'HH:mm:ss'Z'"]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  date {
    match => ["[event][end]","yyyy-MM-dd'T'HH:mm:ss'Z'"]
    timezone => "GMT"
    locale => "en"
    target => "[event][end]"
    tag_on_failure => "_dateparsefailure_ee"
  }
  date {
    match => ["[event][modified]","yyyy-MM-dd'T'HH:mm:ss'Z'"]
    timezone => "GMT"
    locale => "en"
    target => "[event][modified]"
    tag_on_failure => "_dateparsefailure_em"
  }
  
}
output {
  pipeline { send_to => [enrichments] }
}