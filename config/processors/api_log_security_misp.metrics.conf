# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => {"[log][source][hostname]" => "api_misp_metrics"}
  }
  csv {
    columns => ["uuid","event_id","category","type","ioc","comment","to_ids","date","object_relation","attribute_tag","object_uuid","object_name","object_meta_category","event_info","event_member_org","event_source_org","event_distribution","event_threat_level_id","event_analysis","event_date","event_tag","event_timestamp"]
    separator => ","
    target => "misp"
  }
  mutate {
    add_tag => [ "mitre att&ck" ]
    rename => { "[misp][uuid]" => "[threat][list][uuid]" } # 1ff024e0-7f60-4e68-b841-867de9ecc0ff
    rename => { "[misp][event_id]" => "[threat][list][event_id]" }
    rename => { "[misp][object_uuid]" => "[threat][list][object_uuid]" }
    rename => { "[misp][type]" => "[threat][list][type]" } # domain, url, email-src
    rename => { "[misp][ioc]" => "[threat][list][ioc]" }
    ### dates
    rename => { "[misp][event_timestamp]" => "[threat][list][start]" } # 1598861433
    rename => { "[misp][date]" => "[threat][list][created]" } # 1598861397
    rename => { "[misp][event_date]" => "[threat][list][ingested]" } # 2020-08-31
    ### map to memcache
    rename => { "[misp][event_member_org]" => "[threat][list][member_org]" }
    rename => { "[misp][event_source_org]" => "[threat][list][source_org]" } # CthulhuSPRL.be
    rename => { "[misp][event_info]" => "[threat][list][event_info]" } # Flashpoint, phishing
    rename => { "[misp][event_threat_level_id]" => "[threat][list][severity_name]" } # undefined, high, medium, low
    rename => { "[misp][category]" => "[threat][list][category]" } # payload delivery, network activity
    rename => { "[misp][object_meta_category]" => "[threat][list][object_category]" } # file, network
    rename => { "[misp][comment]" => "[threat][list][comment]"  } # update tags, maybe... Dynamic DNS Hostname, VBoxHeadless.exe, VBoxHeadless.exe, micro.xml, micro.vdi
    rename => { "[misp][event_tag]" => "[threat][list][event_tag]" }
    lowercase => [ "[threat][list][ioc]" ]
  }
  ## If MAC in MISP IOC then remove : or -
  if [threat][list][ioc] =~ "^(.*?\|)?([0-9A-F]{2}[:-]){5}([0-9A-F]{2})(\|.*?)?$" {
    # 2 dimensional MISP IOC
    if [threat][list][ioc] =~ "^.*?\|.*?" {
      mutate {
        split => { "[threat][list][ioc]" => "|" }
      }
      if [threat][list][ioc][0] =~ "^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$" {
        mutate {
          gsub => [
            "[threat][list][ioc][0]", ":", "",
            "[threat][list][ioc][0]", "-", ""
            
          ]
          join => { "[threat][list][ioc]" => "," }
        }
      } else if [threat][list][ioc][1] =~ "^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$" {
        mutate {
          gsub => [
            "[threat][list][ioc][1]", ":", "",
            "[threat][list][ioc][1]", "-", ""
          ]
          join => { "[threat][list][ioc]" => "," }
        }
      }
    # single dimensional MISP IOC
    } else {
      mutate {
        gsub => [
          "[threat][list][ioc]", ":", "",
          "[threat][list][ioc]", "-", ""
        ]
      }
    }
  }

  if [misp][to_ids] == 1 {
    mutate {
      add_field => { "[threat][list][safe_to_enable_ids]" => "true" }
    }
  }
  else {
    mutate {
      add_field => { "[threat][list][safe_to_enable_ids]" => "false" }
    }
  }
  mutate {
    rename => { "[misp][object_relation]" => "[threat][list][object_relation]" }  # md5, filename, attachment
    rename => { "[misp][attribute_tag]" => "[threat][list][attribute_tag]" }  # adware, backdoor, infostealer
    rename => { "[misp][object_name]" => "[threat][list][object_name]" }  # url, registry-key, coin-address
  }
  ##### TODO: "event_analysis",  2,  [0,1,2,3] need translation "event_analysis" to [threat][list][event_analysis]
  ### lookups
  translate {
    field => "[misp][event_distribution]"
    destination => "[threat][list][distribution]"
    dictionary => {
      "0" => "Your organisation only"
      "1" => "This community only"
      "2" => "Connected communities"
      "3" => "All communities"
      "4" => "Sharing group"
    }
  }
  ### Datetime Parsing
  ### "[threat][list][start]"  1598861433
  date {
    match => ["[threat][list][start]","UNIX"]
    timezone => "GMT"
    locale => "en"
    target => "[threat][list][start]"
    tag_on_failure => "_dateparsefailure_tls"
  }
  if "_dateparsefailure_tls" in [tags]  {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
     remove_field => ["[threat][list][start]"]
    }
  }
  ### "[threat][list][created]" 1598861397
  date {
    match => ["[threat][list][created]","UNIX"]
    timezone => "GMT"
    locale => "en"
    target => "[threat][list][created]"
    tag_on_failure => "_dateparsefailure_tlc"
  }
  if "_dateparsefailure_tls" in [tags]  {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
     remove_field => ["[threat][list][created]"]
    }
  }
  ### "[threat][list][ingested]" 2020-08-31
  date {
    match => ["[threat][list][ingested]","yyyy-MM-dd"]
    timezone => "GMT"
    locale => "en"
    target => "[threat][list][ingested]"
    tag_on_failure => "_dateparsefailure_tli"
  }
  if "_dateparsefailure_tli" in [tags]  {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
     remove_field => ["[threat][list][ingested]"]
     
    }
  }
  ### Pull MITRE ATT&CK data from MISP tags from [threat][list][event_tag
  ## pullout tags that are "mitre att&ck" id's
  mutate {
    copy => { "[threat][list][event_tag]" => "[threat][list][event_tag2]" }
  }
  mutate {
    # russian threat actor,IcedID,banking malware,ELASTICSEARCH,VETTED
    split => { "[threat][list][event_tag2]" => ",]" }
  }
  ### MISP MITRE ATT&CK tactic id
  grok {
    match => { "[threat][list][event_tag2]" => '.*?(?<[threat][tactic][id]>(?i)ta\d{3})(\"|,| |$)' }
    timeout_millis => 500
    tag_on_failure => ["__grok_failure_ta"]
    add_field => { "[threat][framework]" => "MITRE ATT&CK" }
  }
  mutate {
    remove_tag => ["__grok_failure_ta"]
  }
  ### MISP MITRE ATT&CK technique id
  grok {
    match => { "[threat][list][event_tag2]" => '.*?(?<[threat][technique][id]>(?i)t\d{4})(\"|,| |$)' }
    timeout_millis => 500
    tag_on_failure => ["__grok_failure_tt"]
  }
  # if [threat][framework] is not already set and threat technique grok succeded
  if ![threat][framework] and "__grok_failure_tt" not in [tags] {
    mutate {
      add_field => { "[threat][framework]" => "MITRE ATT&CK" }
    }
  }
  mutate {
    remove_tag => ["__grok_failure_tt"]
  }
  #### Fields not mapped
  # float  A floating point value.
  # pdb  Microsoft Program database (PDB) path information ??
  # eppn  eduPersonPrincipalName - eppn - the NetId of the person for the purposes of inter-institutional authentication. Should be stored in the form of user@univ.edu, where univ.edu is the name of the local security domain.
  # attachment  Please upload files using the Upload Attachment button.
  # malware-sample  Please upload files using the Upload Attachment button.
  # comment  Comment or description in a human language. This will not be correlated with other attributes
  # text  Name, ID or a reference
  # hex  A value in hexadecimal format
  # other  Other attribute
  # iban  International Bank Account Number
  # bic  Bank Identifier Code Number also known as SWIFT-BIC, SWIFT code or ISO 9362 code
  # bank-account-nr  Bank account number without any routing number
  # aba-rtn  ABA routing transit number
  # bin  Bank Identification Number
  # cc-number  Credit-Card Number
  # prtn  Premium-Rate Telephone Number
  # phone-number  Telephone Number
  # threat-actor  A string identifying the threat actor
  # campaign-name  Associated campaign name
  # campaign-id  Associated campaign ID
  # malware-type
  # dns-soa-email  RFC1035 mandates that DNS zones should have a SOA (Statement Of Authority) record that contains an email address where a PoC for the domain could be contacted. This can sometimes be used for attribution/linkage between different domains even if protected by whois privacy
  # whois-registrant-email  The e-mail of a domain's registrant, obtained from the WHOIS information.
  # whois-registrant-phone  The phone number of a domain's registrant, obtained from the WHOIS information.
  # whois-registrant-name  The name of a domain's registrant, obtained from the WHOIS information.
  # whois-registrant-org  The org of a domain's registrant, obtained from the WHOIS information.
  # whois-registrar  The registrar of the domain, obtained from the WHOIS information.
  # whois-creation-date  The date of domain's creation, obtained from the WHOIS information.
  # size-in-bytes  Size expressed in bytes
  # counter  An integer counter, generally to be used in objects
  # datetime  Datetime in the ISO 8601 format
  # cpe  Common platform enumeration
  # github-username  A github user name
  # github-repository  A github repository
  # github-organisation  A github organisation
  # jabber-id  Jabber ID
  # twitter-id  Twitter ID
  # first-name  First name of a natural person
  # middle-name  Middle name of a natural person
  # last-name  Last name of a natural person
  # date-of-birth  Date of birth of a natural person (in YYYY-MM-DD format)
  # place-of-birth  Place of birth of a natural person
  # gender  The gender of a natural person (Male, Female, Other, Prefer not to say)
  # passport-number  The passport number of a natural person
  # passport-country  The country in which the passport was issued
  # passport-expiration  The expiration date of a passport
  # redress-number  The Redress Control Number is the record identifier for people who apply for redress through the DHS Travel Redress Inquiry Program (DHS TRIP). DHS TRIP is for travelers who have been repeatedly identified for additional screening and who want to file an inquiry to have erroneous information corrected in DHS systems
  # nationality  The nationality of a natural person
  # visa-number  Visa number
  # issue-date-of-the-visa  The date on which the visa was issued
  # primary-residence  The primary residence of a natural person
  # country-of-residence  The country of residence of a natural person
  # special-service-request  A Special Service Request is a function to an airline to provide a particular facility for A Passenger or passengers.
  # frequent-flyer-number  The frequent flyer number of a passenger
  # travel-details  Travel details
  # payment-details  Payment details
  # place-port-of-original-embarkation  The original port of embarkation
  # place-port-of-clearance  The port of clearance
  # place-port-of-onward-foreign-destination  A Port where the passenger is transiting to
  # passenger-name-record-locator-number  The Passenger Name Record Locator is a key under which the reservation for a trip is stored in the system. The PNR contains, among other data, the name, flight segments and address of the passenger. It is defined by a combination of five or six letters and numbers.
  # reference  Reference used by the publishing party (e.g. ticket number)
  # Targeting data  Targeting information to include recipient email, infected machines, department, and or locations.
  # Antivirus detection  List of anti-virus vendors detecting the malware or information on detection performance (e.g. 13/43 or 67%). Attachment with list of detection or link to VirusTotal could be placed here as well.
  # Payload delivery  Information about the way the malware payload is initially delivered, for example information about the email or web-site, vulnerability used, originating IP etc. Malware sample itself should be attached here.
  # Artifacts dropped  Any artifact (files, registry keys etc.) dropped by the malware or other modifications to the system
  # Payload installation  Location where the payload was placed in the system and the way it was installed. For example, a filename|md5 type attribute can be added here like this: c:\windows\system32\malicious.exe|41d8cd98f00b204e9800998ecf8427e.
  # Persistence mechanism  Mechanisms used by the malware to start at boot. This could be a registry key, legitimate driver modification, LNK file in startup
  # Network activity  Information about network traffic generated by the malware
  # Payload type  Information about the final payload(s). Can contain a function of the payload, e.g. keylogger, RAT, or a name if identified, such as Poison Ivy.
  # Attribution  Identification of the group, organisation, or country behind the attack
  # External analysis  Any other result from additional analysis of the malware like tools output Examples: pdf-parser output, automated sandbox analysis, reverse engineering report.
  # Financial fraud  Financial Fraud indicators, for example: IBAN Numbers, BIC codes, Credit card numbers, etc.
  # Support Tool  Tools supporting analysis or detection of the event
  # Social network  Social networks and platforms
  # Person  A human being - natural person
  # Other  Attributes that are not part of any other category or are meant to be used as a component in MISP objects in the future Types
  # Type  Description
  # mobile-application-id  The application id of a mobile application
  # chrome-extension-id  Chrome extension id
  # cortex  Cortex analysis result
  # boolean  Boolean value - to be used in objects
  # anonymised  Anonymised value - described with the anonymisation object via a relationship.
  mutate {
    remove_field => [ "misp", "[threat][list][event_tag2]" ]
  }
  if [threat][list][type] == "hassh-md5" {
    mutate {
      copy => { "[threat][list][ioc]" => "[process][hash][md5]" }
    }
  }
  if [threat][list][type] == "hasshserver-md5" {
    mutate {
      copy => { "[threat][list][ioc]" => "[process][parent][hash][md5]" }
    }
  }
  if [threat][list][type] == "md5" or [threat][list][type] == "ssdeep" or [threat][list][type] == "imphash" or [threat][list][type] == "pehash" or [threat][list][type] == "impfuzzy" or [threat][list][type] == "tlsh" or [threat][list][type] == "cdhash" {
    mutate {
      copy => { "[threat][list][ioc]" => "[file][hash][md5]" }
    }
  }
  if [threat][list][type] == "sha1" {
    mutate {
      copy => { "[threat][list][ioc]" => "[file][hash][sha1]" }
    }
  }
  if [threat][list][type] == "sha256" or [threat][list][type] == "authentihash" or [threat][list][type] == "sha224" {
    mutate {
      copy => { "[threat][list][ioc]" => "[file][hash][sha256]" }
    }
  }
  if [threat][list][type] == "sha512" or [threat][list][type] == "sha384" or [threat][list][type] == "sha512/224" or [threat][list][type] == "sha512/256"{
    mutate {
      copy => { "[threat][list][ioc]" => "[file][hash][sha512]" }
    }
  }
  if [threat][list][type] == "filename" {
    mutate {
      copy => { "[threat][list][ioc]" => "[file][name]" }
    }
  }
  if [threat][list][type] == "filename|md5" {
    dissect {
      mapping => {
        "[threat][list][ioc]" => "%{[[file][name]]}|%{[[file][hash][md5]]}"
      }
    }
  }
  if [threat][list][type] == "filename|sha1" {
    dissect {
      mapping => {
        "[threat][list][ioc]" => "%{[[file][name]]}|%{[[file][hash][sha1]]}"
      }
    }
  }
  if [threat][list][type] == "filename|sha256" or [threat][list][type] == "filename|authentihash" or [threat][list][type] == "filename|ssdeep" or [threat][list][type] == "filename|imphash" or [threat][list][type] == "filename|impfuzzy" or [threat][list][type] == "filename|pehash" or [threat][list][type] == "filename|tlsh" or [threat][list][type] == "filename|sha224" {
    dissect {
      mapping => {
        "[threat][list][ioc]" => "%{[[file][name]]}|%{[[file][hash][sha256]]}"
      }
    }
  }
  if [threat][list][type] == "filename|sha384" or [threat][list][type] == "filename|sha512" or [threat][list][type] == "filename|sha512/224" or [threat][list][type] == "filename|sha512/256" {
    dissect {
      mapping => {
        "[threat][list][ioc]" => "%{[[file][name]]}|%{[[file][hash][sha512]]}"
      }
    }
  }
  if [threat][list][type] == "ip-src" {
    mutate {
      copy => { "[threat][list][ioc]" => "[source][ip]" }
    }
  }
  if [threat][list][type] == "ip-dst" {
    mutate {
      copy => { "[threat][list][ioc]" => "[destination][ip]" }
    }
  }
  if [threat][list][type] == "hostname" {
    mutate {
      copy => { "[threat][list][ioc]" => "[host][hostname]" }
    }
  }
  if [threat][list][type] == "domain" {
    mutate {
      copy => { "[threat][list][ioc]" => "[url][domain]" }
    }
  }
  if [threat][list][type] == "domain|ip" {
    dissect {
      mapping => {
        "[threat][list][ioc]" => "%{[[url][domain]]}|%{[[destination][ip]]}"
      }
    }
  }
  if [threat][list][type] == "url" or [threat][list][type] == "uri" or [threat][list][type] == "btc" or [threat][list][type] == "dash" or [threat][list][type] == "xmr"{
    mutate {
      copy => { "[threat][list][ioc]" => "[url][full]" }
    }
  }
  if [threat][list][type] == "http-method" {
    mutate {
      copy => { "[threat][list][ioc]" => "[http][request][method]" }
    }
  }
  if [threat][list][type] == "user-agent" {
    mutate {
      copy => { "[threat][list][ioc]" => "[user_agent][original]" }
    }
  }
  if [threat][list][type] == "ja3-fingerprint-md5" {
    mutate {
      copy => { "[threat][list][ioc]" => "[tls][server][hash][md5]" }
    }
  }
  if [threat][list][type] == "regkey" {
    mutate {
      copy => { "[threat][list][ioc]" => "[registry][key]" }
    }
  }
  if [threat][list][type] == "regkey|value" {
    dissect {
      mapping => {
        "[threat][list][ioc]" => "%{[[registry][key]]}|%{[[registry][value]]}"
      }
    }
  }
  if [threat][list][type] == "AS" {
    mutate {
      copy => { "[threat][list][ioc]" => "[source][as][organization][name]" }
    }
  }
  if [threat][list][type] == "snort" or [threat][list][type] == "bro" or [threat][list][type] == "zeek" or [threat][list][type] == "yara" or [threat][list][type] == "pattern-in-file" or [threat][list][type] == "pattern-in-traffic" or [threat][list][type] == "pattern-in-memory" {
    mutate {
      copy => { "[threat][list][ioc]" => "[rule][description]" }
    }
  }
  if [threat][list][type] == "community-id" {
    mutate {
      copy => { "[threat][list][ioc]" => "[process][hash][md5]" }
    }
  }
  if [threat][list][type] == "mime-type" {
    mutate {
      copy => { "[threat][list][ioc]" => "[file][mime_type]" }
    }
  }
  if [threat][list][type] == "identity-card-number" {
    mutate {
      copy => { "[threat][list][ioc]" => "[user][id]" }
    }
  }
  if [threat][list][type] == "cookie" {
    mutate {
      copy => { "[threat][list][ioc]" => "[http][cookie][name]" }
    }
  }
  if [threat][list][type] == "vulnerability" or [threat][list][type] == "weakness" or [threat][list][type] == "link" {
    mutate {
      copy => { "[threat][list][ioc]" => "[vulnerability][reference]" }
    }
  }
  if [threat][list][type] == "named pipe" or [threat][list][type] == "mutex" {
    mutate {
      copy => { "[threat][list][ioc]" => "[file][path]" }
    }
  }
  if [threat][list][type] == "target-user" {
    mutate {
      copy => { "[threat][list][ioc]" => "[destination][user][name]" }
    }
  }
  if [threat][list][type] == "target-email" {
    mutate {
      copy => { "[threat][list][ioc]" => "[destination][user][email]" }
    }
  }
  if [threat][list][type] == "target-machine" {
    mutate {
      copy => { "[threat][list][ioc]" => "[destination][address]" }
    }
  }
  if [threat][list][type] == "target-org" or [threat][list][type] == "target-external"{
    mutate {
      copy => { "[threat][list][ioc]" => "[destination][as][organization][name]" }
    }
  }
  if [threat][list][type] == "windows-scheduled-task" or [threat][list][type] == "windows-service-name" or [threat][list][type] == "windows-service-displayname" {
    mutate {
      copy => { "[threat][list][ioc]" => "[process][name]" }
    }
  }
  if [threat][list][type] == "x509-fingerprint-sha1" {
    mutate {
      copy => { "[threat][list][ioc]" => "[tls][server][hash][sha1]" }
    }
  }
  if [threat][list][type] == "x509-fingerprint-md5" {
    mutate {
      copy => { "[threat][list][ioc]" => "[tls][server][hash][md5]" }
    }
  }
  if [threat][list][type] == "x509-fingerprint-sha256" {
    mutate {
      copy => { "[threat][list][ioc]" => "[tls][server][hash][sha256]" }
    }
  }
  if [threat][list][type] == "port" {
    mutate {
      copy => { "[threat][list][ioc]" => "[destination][port]" }
    }
  }
  if [threat][list][type] == "ip-dst|port" {
    dissect {
      mapping => {
        "[threat][list][ioc]" => "%{[[destination][ip]]}|%{[[destination][port]]}"
      }
    }
  }
  if [threat][list][type] == "hostname|port" {
    dissect {
      mapping => {
        "[threat][list][ioc]" => "%{[[destination][address]]}|%{[[destination][port]]}"
      }
    }
  }
  if [threat][list][type] == "mac-address" or [threat][list][type] == "mac-eui-64" {
    mutate {
      copy => { "[threat][list][ioc]" => "[source][mac]" }
    }
  }
  if [threat][list][type] == "email-src" or [threat][list][type] == "email-src-display-name" or [threat][list][type] == "email-reply-to" or [threat][list][type] == "email-x-mailer" {
    mutate {
      copy => { "[threat][list][ioc]" => "[source][user][email]" }
    }
  }
  if [threat][list][type] == "email-dst" or [threat][list][type] == "email-dst-display-name" {
    mutate {
      copy => { "[threat][list][ioc]" => "[destination][user][email]" }
    }
  }
  if [threat][list][type] == "email-subject" {
    mutate {
      copy => { "[threat][list][ioc]" => "[email][subject]" }
    }
  }
  if [threat][list][type] == "email-attachment" {
    mutate {
      copy => { "[threat][list][ioc]" => "[file][name]" }
    }
  }
  if [threat][list][type] == "email-body" {
    mutate {
      copy => { "[threat][list][ioc]" => "[email][body]" }
    }
  }
  if [threat][list][type] == "email-header" {
    mutate {
      copy => { "[threat][list][ioc]" => "[email][header]" }
    }
  }
  # Do not remove this, due to internal need.
  if [host][hostname] and ([host][hostname] != "" or [host][hostname][0] != "" ){
    mutate {
      copy => { "[host][hostname]" => "[host][name]" }
    }
  }
  mutate {
    add_field => { "[event][module]" => "api misp metrics" }
    add_field => { "[event][dataset]" => "misp metrics" }
    add_field => { "[observer][vendor]" => "misp" }
    add_field => { "[observer][product]" => "misp metrics" }
    add_field => { "[observer][type]" => "api" }
  }
}
output {
  pipeline { send_to => [enrichments] }
}

