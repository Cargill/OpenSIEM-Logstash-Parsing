# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
   # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<actual_msg>.*)" }
  }
  syslog_pri {
  syslog_pri_field_name => "pri" 
  remove_field => [ "pri" ]
  }
  mutate {
    add_field => { "event.module" => "checkpoint.operations" }
    add_field => { "event.dataset" => "checkpoint.audit_logs" }
    add_field => { "observer.vendor" => "checkpoint" }
    add_field => { "observer.product" => "checkpoint.firewall" }
    add_field => { "observer.type" => "firewall" }
  }

  if [actual_msg] =~ "authentication failure" {
    grok {
      tag_on_failure => "_parsefailure_auth"
        match => { "actual_msg" => "^(?<event.created>.*?\d+:\d+:\d+) (?<observer.name>.*?) .*?\): (?<rule.description>.*?);.*?uid=(?<user.id>\d+).*?tty=(?<network.protocol>.*?) .*? user=(?<user.name>.*?)$" }
    }
  }

  if [actual_msg] =~ "illegal pam password attempt" {
    dissect {
	  mapping => {
	    "rest_msg" => "%{event.created} %{+event.created} %{+event.created} %{+event.created} %{network.name}-%{service.type} %{?data}: [%{network.protocol}] %{rule.description} for '%{user.name}' from %{source.ip}:%{source.port}"
	  }
	}
  }
  mutate {
    gsub => [
      "event.created", "  ", " "
    ]
  }

  date {
    match => ["event.created" , "yyyy MMM d HH:mm:ss", "ISO8601"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags] {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
      remove_field => ["event.created"]
    }
  }

  mutate {
    remove_field => ["actual_msg","pri"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
