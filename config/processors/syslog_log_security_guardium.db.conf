# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "guardium.db" }
    add_field => { "event.dataset" => "guardium.db" }
    add_field => { "observer.vendor" => "guardium" }
    add_field => { "observer.product" => "guardium.db" }
    add_field => { "observer.type" => "database" }
  }
  # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<rest_msg>.*?)%" }
  }
  syslog_pri {
  syslog_pri_field_name => "pri" 
  remove_field => [ "pri" ]
  }
  mutate {
    strip => ["message"]
    gsub => ["message" ,'[\"]',""]
  }

 
  dissect {
    mapping => {
      "message" => "%{?log.date_time} {name=%{?data}} <%{?pri}>%{event.created->} %{+event.created} %{+event.created} %{host.hostname} %{rest_message}"
    }
    tag_on_failure => ["_dissectfailure_1"]
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
	
  if [rest_message] !~ "GuardiumSniffer\[" {
    if [rest_message] =~ "\[" and [rest_message] =~ "\]:" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 1" }
      }

	  if [rest_message] =~ "\{" or [rest_message] =~ "\}" {
      mutate {
        gsub => ["rest_message" , "[\{}]", ""]
      }  
	  }
	  
	  dissect {
        mapping => {
          "rest_message" => "%{process.name}[%{process.pid}]: %{json_msg}"
        }
		tag_on_failure => ["_dissectfailure_2"]
      }
	  mutate {
			gsub => ["json_msg" , "[\{}]", ""]
		} 
    kv {
        source => "json_msg"
        field_split => ","
        value_split => ":"
        target => "gurd"
      }

      mutate {
	  ## error fields
		rename => {"[gurd][error]" => "error"}
		rename => {"[gurd][agent.name]" => "agent.name"}
      ## rule fields
        rename => {"[gurd][Alert based on rule ID]" => "rule.name"}
        rename => {"[gurd][Rule #]" => "rule.id"}
      ## Event fields
        rename => {"[gurd][violationID]" => "event.id"}
        rename => {"[gurd][Server Type]" => "event.module"}
        rename => {"[gurd][Severity]" => "event.severity_name"}
      ## Source fields
        rename => {"[gurd][Client IP]" => "source.ip"}
        rename => {"[gurd][Client]" => "source.address"}
        rename => {"[gurd][Client PORT]" => "source.port"}
        rename => {"[gurd][OSUser]" => "source.user.name"}
      ## destination fields
        rename => {"[gurd][Server IP]" => "destination.ip"}
        rename => {"[gurd][Server]" => "destination.address"}
        rename => {"[gurd][Server Port]" => "destination.port"}
      ## service field
        # rename => {"[gurd][Service Name]" => "service.type"}
        rename => {"[gurd][Requestype]" => "service.name"}
      ## Network fields
        rename => {"[gurd][Net Protocol]" => "network.protocol"}
      ## Host fields
        rename => {"[gurd][Application User Name]" => "host.user.name"}
      ## database fields
        # rename => {"[gurd][Database Name]" => "database.name"}
        rename => {"[gurd][DB Protocol]" => "database.protocol"}
        rename => {"[gurd][DB Protocol Version]" => "database.protocol_version"}
        rename => {"[gurd][SQL]" => "database.query"}
      ## Process fields
        rename => {"[gurd][Source Program]" => "process.name"}
      ## Date/Time
        # rename => {"[gurd][Session start]" => "??"}
            # N/A redundant with EPOC field, 2020-06-08 04:11:26
        # rename => {"[gurd][Last Error]" => "event.end"}
            # Example null
        # rename => {"[gurd][EPOC Alert Occurred]" => "?"}
            # 1592064797000
        rename => {"[gurd][EPOC Event Occurred]" => "event.start"}
            # 1592064797000
      ## revisit most re blank in example logs
        # rename => {"[gurd][Category]" => "%%category"}
        # rename => {"[gurd][Classification]" => "%%classification"}
        # rename => {"[gurd][Authorization Code]" => "%%AuthorizationCode"}
        # rename => {"[gurd][SQL Status]" => "%%SqlStatus"}
      ## drop temp fields
        remove_field => [ "[json_msg]", "pri"]
      }
	  
	  
	mutate {
    split => { "error" => ":" }
		add_field => {"error.message" => "%{[error][0]}"}
		add_field => {"file.path" => "%{[error][1]}"}
		remove_field => ["[error]"]		 
  } 
	  
	mutate{
		strip => ["file.path"]
	}	    
  if "[gurd][Server Type]" == "ORACLE" {
    mutate {
      rename => {"[gurd][Service Name]" => "database.name"}
    }
  } else if "[gurd][Server Type]" == "MS SQL SERVER"{
    mutate {
      rename => {"[gurd][Database Name]" => "database.name"}
    }
  } else {
    mutate {
      rename => {"[gurd][Service Name]" => "service.type"}
      rename => {"[gurd][Database Name]" => "database.name"}
    }
  }

      if [gurd][DB User] =~ ".*?\\.*?" {
        grok {
          match => {
            "[gurd][DB User]" => "(?<user.domain>.*?)\\(?<user.name>.*?)$"
          }
        }
      } else {
        mutate {
          rename => {"[gurd][DB User]" => "user.name"}
        }
      }
      mutate {
        remove_field => ["[gurd]"]
      }

      if [destination_ip] {
        dissect {
          mapping => {
            destination_ip => "%{destination.ip} (%{destination.address})"
          }
		tag_on_failure => ["_dissectfailure_3"]
        }
        mutate {
          remove_field =>["destination_ip"]
        }
      }
      if [source_ip] {
        dissect {
          mapping => {
            source_ip => "%{source.ip} (%{source.address})"
          }
		  tag_on_failure => ["_dissectfailure_4"]
        }
        mutate {
          remove_field =>["destination_ip"]
        }
      }
      if [process.title] =~ "port" {
        mutate {
          add_field => { "agent.parse_rule" => "RULE 2" }
        }
        dissect {
          mapping => {
            "rest_message" => "%{?data} port %{source.port}"
          }
		  tag_on_failure => ["_dissectfailure_5"]
        }
      }
    }
    else if[rest_message] =~ "run-parts" and [rest_message] =~ "\[" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 3" }
      }
      grok{
        match =>
        {
          "rest_message" => "%{DATA:process.name}\[%{NUMBER:process.pid}(?:\])? %{GREEDYDATA:process.title}"
        }
      }
    }
    else if [rest_message] =~ ": pam_unix"{
      mutate {
        add_field => { "agent.parse_rule" => "RULE 4" }
      }
      dissect {
        mapping => {
          "rest_message" => "%{process.name}: pam_unix(%{?data}:session): %{process.title}"
        }
		tag_on_failure => ["_dissectfailure_6"]
      }
    }
  }
  else if [rest_message] =~ ":  subject" and [rest_message] =~ "Alert based on rule ID" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5" }
    }
    dissect {
      mapping => {
        rest_message => "%{process.name}[%{process.pid}]:  subject %{process.title}, %{?data}Category: %{msg}"
      }
	  tag_on_failure => ["_dissectfailure_7"]
    }
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5(a)" }
      gsub => ["msg" , "\\n"," "]
      gsub => ["msg" , "[\\]",""]
    }
    if [msg] =~ "Authorization Code:" and [msg] =~ "Request Type:" and [msg] =~ "SQL Status:" and [msg] =~ "Last Error:" {
      dissect{
        mapping =>
        {
          msg => "%{category_name} %{?data}: %{classification} Severity MED%{severity_MED} %{?data} # %{rule.description} ]%{?data}: %{request_info} Server Type:%{destination_type} %{?data}: %{source.ip} %{?data}: %{destination.ip} %{?data}: %{source.port} %{?data}: %{destination.port} %{?data}:%{service.name} %{?data}: %{db.name} %{?data}: %{network.protocol} %{?data}: %{db_protocol} %{?data}: %{db_protocolversion} %{?data}: %{db.user} %{?data}: %{user.name} %{?data}: %{file.path} %{?data}: %{autherzation.code} %{?data}: %{request_type} %{?data}: %{last_error} %{?data}: %{sql_name} %{?data}: %{sql_status} %{?data}"
        }
		tag_on_failure => ["_dissectfailure_8"]
      }
    }
    else {
      dissect{
        mapping =>
        {
          msg => "%{category_name} %{?data}: %{classification} Severity MED%{severity_MED} %{?data} # %{rule.description} ]%{?data}: %{request_info} Server Type:%{destination_type} %{?data}: %{source.ip} %{?data}: %{destination.ip} %{?data}: %{source.port} %{?data}: %{destination.port} %{?data}:%{service.name} %{?data}: %{db.name} %{?data}: %{network.protocol} %{?data}: %{db.protocol} %{?data}: %{protocol.version} %{?data}: %{db.user} %{?data}: %{user.name} %{?data}"
        }
		tag_on_failure => ["_dissectfailure_9"]
      }
    }
  }
  else if [process.title] and [process.title] =~ "#" {
    dissect {
      mapping => {
        "process.title" => "%{rule.name}#"
	    }
		tag_on_failure => ["_dissectfailure_10"]
    }
    mutate {
      remove_field => ["process.title"]
    }
  }
  if [event.created] {
    date {
      match => ["event.created" , "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-mm-dd HH:mm:ss", "yyyy-mm-dd HH:mm:ss.SSS","MMM dd HH:mm:ss", "MMM dd HH:mm:ss ZZZ","yyyy-MM-dd'T'HH:mm:ssZ"]
      timezone => "GMT"
      locale => "en"
      target => "event.created"
      tag_on_failure => "_dateparsefailure_ec"
    }
    if "_dateparsefailure" in [tags]  {
        if ![log.original] {
      mutate {
          copy => { "message" => "log.original" }
        }
      }
      mutate {
        remove_field => ["event.created"]
      }
    }
  }
  
  
  
  mutate {
    remove_field => ["log.date_time","rest_message","015\nSQL","015\nRequest Info","msg"]
  }
  # Do not remove this, due to internal need.
  if [host.hostname] and ([host.hostname] != "" or [host.hostname][0] != "" ){
    mutate {
      copy => { "host.hostname" => "host.name" }
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
