# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "junos" }
    add_field => { "event.dataset" => "junos.pulse.vpn" }
    add_field => { "observer.vendor" => "junos" }
    add_field => { "observer.product" => "junos.pulse.vpn" }
    add_field => { "observer.type" => "vpn" }
  }
  mutate {
    strip => ["message"]
    gsub => ["message",'\"',"'"]
  }
  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" {
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "<%{pri}>%{rest_msg}"
      }
    }
  } else {
  ### Filebeats udp or tcp in
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "%{?data} {%{?data}} <%{pri}>%{rest_msg}"
      }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  mutate{
    remove_field => ["pri", "rest_msg"]
  }
  dissect {
    mapping => {
      "message" => "%{log.date_time} {%{?data}} <%{?data}>%{?data} %{event.created} %{source.address} PulseSecure: %{?data} %{?data} %{?data} %{?data} %{?data} %{?data} %{?data} %{?data} [%{source.ip}] %{source.user.name}(%{group.domain})[%{?data}] - %{event_description}"
    }
  }
  if [event_description] =~ "System\(\)\[\]"
  {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    mutate{
      gsub => [ "event_description", "[\]](?=[^\]]*$)", "x_x;" ]
    }
    if[event_description] =~ "Sending logMessageTrap"{
      mutate {
        add_field => { "agent.parse_rule" => "RULE 2" }
      }
      dissect {
        mapping => {
          "event_description" => "Sending logMessageTrap [ logID='%{event.id}' logType='%{event.type}' logDescription='%{rule.description}' x_x;%{?data}"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 3" }
      }
      dissect {
        mapping => {
          "event_description" => "hello%{msg}"
        }
      }
    }
  }
  else if [event_description] =~ "Host Checker policy" and [event_description] =~ "passed on"{
    mutate {
      add_field => { "agent.parse_rule" => "RULE 4" }
    }
    if [event_description] =~ "address" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 4 (a)" }
      }
      dissect {
        mapping => {
          "event_description" => "%{event.code} '%{event.action}' passed on host '%{?data}' address '%{source.mac}' %{?data}"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 4 (b)" }
      }
      dissect {
        mapping => {
          "event_description" => "%{?data} passed on host %{destination.ip} %{?data}"
        }
      }
    }
  }
  else if [event_description] =~ "Host Checker policy" and [event_description] =~ "failed on"{
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5" }
    }
    if [event_description] =~ " address " and [event_description] =~ "reason" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 5 (a)" }
      }
      dissect {
        mapping => {
          "event_description" => "%{event.code} '%{event.action}' failed on host '%{?data}' address '%{source.mac}' %{?data} reason '%{rule.description}'%{?data}"
        }
      }
    }
    else if[event_description] =~ "Reason" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 5 (b)" }
      }
      dissect {
        mapping => {
          "event_description" => "%{?data} Reason: '%{rule.description}'%{?data}"
        }
      }
    }
  }
  else if [event_description] =~ "Received OCSP response" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 6" }
    }
    dissect {
      mapping => {
        "event_description" => "%{event.code} %{+event.code} %{+event.code} %{?data} '%{destination.ip}' with url '%{url.full}', user: '%{?data}'; serial number: '%{?device.serial_number}'%{?data}"
      }
    }
  }
  else if [event_description] =~ "Sending OCSP request" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 7" }
    }
    dissect {
      mapping => {
        "event_description" => "%{event.code} %{+event.code} %{+event.code} %{?data} '%{source.ip}' with url '%{url.full}'; user: '%{?data}'; serial number: '%{?device.serial_number}'%{?data}"
      }
    }
  }
  else if [event_description] =~ "OCSP checking successfully passed" or [event_description] =~ "OCSP checking started" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 8" }
    }
    dissect {
      mapping => {
        "event_description" => "%{event.code} %{+event.code} %{+event.code} %{+event.code} %{?data}: '%{?source.user.name} having %{?certificate version} certificate '%{tls.client.subject}' with serial number: '%{?device.serial_number}' issued by '%{?issued_by}'%{?data}"
      }
    }
  }
  else if [event_description] =~ "Primary authentication successful" or [event_description] =~ "Primary authentication failed" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 9" }
    }
    mutate {
      add_field => {
        "rule.description" => "%{event_description}"
      }
    }
  }
  else if [event_description] =~ "Key Exchange number" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 10" }
    }
    dissect {
      mapping => {
        "event_description" => "Key Exchange number %{?key_exchange_number} occurred for user with NCIP %{destination.ip}"
      }
    }
  }
  else if [event_description] =~ "VPN Tunneling: User" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 11" }
    }
    dissect {
      mapping => {
        "event_description" => "VPN Tunneling: User with IP %{source.nat.ip} %{event.code}"
      }
    }
  }
  else if [event_description] =~ "VPN Tunneling: Session ended" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 12" }
    }
    if [event_description] == "VPN Tunneling: Session ended for user with IPv4 address" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 12 (a)" }
      }
      dissect {
        mapping => {
          event_description => "%{rule.description}"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 12 (b)" }
      }
      dissect {
        mapping => {
          "event_description" => "VPN Tunneling: %{event.code} with IPv4 address %{source.nat.ip}"
        }
      }
    }
  }
  else if [event_description] =~ "VPN Tunneling: Session started" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 13" }
    }
    dissect {
      mapping => {
        "event_description" => "VPN Tunneling: %{event.code} with IPv4 address %{source.nat.ip}, hostname %{source.address}"
      }
    }
  }
  else if [event_description] =~ "User Accounts modified" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 14" }
    }
    if [event_description] !~ "Removed username" and [event_description] =~ "^User" and [event_description] =~ "username" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 14 (a)" }
      }
      dissect {
        mapping => {
          "event_description" => "%{?data} username %{user.id} %{?data}"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 14 (b)" }
      }
      dissect {
        mapping => {
          "event_description" => "%{event.code}. Removed username %{source.user.name} %{?data}"
        }
      }
    }
  }
  else if [event_description] =~ "Session for user" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 15" }
    }
    dissect {
      mapping => {
        "event_description" => "%{event.code} for user %{source.user.name} on host %{?data} %{+event.code}"
      }
    }
  }
  else {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 16" }
    }
    dissect {
      mapping => {
        "event_description" => "%{rule.description}"
      }
    }
  }
  # classification
  if[event_description] =~ "Primary authentication failed" or [event_description] =~ "Login failed" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 17" }
    }
    mutate {
      add_field => {
        "rule.category"=> "Audit/Authentication Failure"
      }
    }
  }
  else if[event_description] =~ "Primary authentication successful" or [event_description] =~ "Logout from" or [event_description] =~ "login succeeded"{
    mutate {
      add_field => { "agent.parse_rule" => "RULE 18" }
    }
    mutate {
      add_field => {
        "rule.category"=> "Audit/Authentication Success"
      }
    }
  }
  else if[event_description] =~ "User Accounts modified"{
    mutate {
        add_field => { "agent.parse_rule" => "RULE 19" }
      }
    mutate {
      add_field => {
        "rule.category"=> "Audit/Account Modified"
      }
    }
  }
  else if[event_description] =~ "Remote address for"{
    mutate {
        add_field => { "agent.parse_rule" => "RULE 20" }
      }
    mutate {
      add_field => {
        "rule.category"=> "Audit/Configuration"
      }
    }
  }
  else if[event_description] =~ "NTP server" and [event_description] =~ "unreachable" {
    mutate {
        add_field => { "agent.parse_rule" => "RULE 21" }
      }
    mutate {
      add_field => {
        "rule.category"=> "Ops/Error"
      }
    }
  }
  else if[event_description] =~ "OCSP" or [event_description] =~ "Key Exchange number" or [event_description] =~ "Number of concurrent users" or [message] =~ "Sending logMessageTrap" or [event_description] =~ "Number of NCP connections"  or [event_description] =~ "Transport mode switched" {
    mutate {
        add_field => { "agent.parse_rule" => "RULE 22" }
      }
    mutate {
      add_field => {
        "rule.category"=> "Audit/Information"
      }
    }
  }
  else if[event_description] =~ "Closed connection to" or ([event_description] =~ "VPN Tunneling" and [event_description] !~ "Session"){
    mutate {
        add_field => { "agent.parse_rule" => "RULE 23" }
      }
    mutate {
      add_field => {
        "rule.category"=> "Ops/Network Traffic"
      }
    }
  }
  else if[event_description] =~ "Testing Password realm" or ([event_description] =~ "Host Checker policy" and [event_description] =~ "failed on") {
    mutate {
        add_field => { "agent.parse_rule" => "RULE 24" }
      }
    mutate {
      add_field => {
        "rule.category"=> "Audit/Other Audit Failure"
      }
    }
  }
  else if([event_description] =~ "Host Checker policy" and [event_description] =~ "passed on") or ([event_description] =~ "Session" and [event_description] =~ "user" ){
    mutate {
        add_field => { "agent.parse_rule" => "RULE 25" }
      }
    mutate {
      add_field => {
        "rule.category"=> "Audit/Other Audit Success"
      }
    }
  }
  else if[event_description] =~ "Host Checker time out" or [event_description] =~ "Max session timeout "{
    mutate {
        add_field => { "agent.parse_rule" => "RULE 26" }
      }
    mutate {
      add_field => {
        "rule.category"=> "Ops/Warning"
      }
    }
  }
  else {
    mutate {
        add_field => { "agent.parse_rule" => "RULE 27" }
      }
    mutate {
      add_field => {
        "rule.category"=> "Others"
      }
    }
  }
  mutate {
    gsub => [ "log.date_time", "'", "" ]
  }
  date{
    match => ["event.created", "yyyy-MM-dd'T'HH:mm:ssZ","ISO8601","yyyy-MM-dd't'HH:mm:ss.SSSz"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
  }
  mutate{
    remove_field => ["log.date_time","event_description"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
