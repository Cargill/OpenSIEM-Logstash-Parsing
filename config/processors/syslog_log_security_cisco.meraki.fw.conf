# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "cisco.meraki.fw" }
    add_field => { "event.dataset" => "cisco.meraki.firewall" }
    add_field => { "observer.vendor" => "cisco" }
    add_field => { "observer.product" => "cisco.meraki.firewall" }
    add_field => { "observer.type" => "firewall" }
  }
  ### Header
  # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<rest_msg>.*?)%" }
  }
  syslog_pri {
  syslog_pri_field_name => "pri" 
  remove_field => [ "pri" ]
  }
  mutate{
    remove_field => ["pri"]
  }
  mutate {
    strip => ["message"]
    gsub => ["message" , '[\"]' , ""]
    gsub => ["message" , '[\"\"]' , ""]
  }
  dissect {
    mapping => {
      message => "%{log.date} {%{?data}} <%{event.severity_name}>%{?data} %{?data} %{rest_msg}"
    }
  }
  if [rest_msg] =~ "content_ing_block" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    dissect {
      mapping => {
        rest_msg => "%{?data} %{?data} %{event.action} %{rest_msg1}"
      }
    }
  }
  else if[rest_msg] =~ "_mfw flows " {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2" }
    }
    dissect {
      mapping => {
        rest_msg => "%{?data} %{?data} %{rest_msg1}"
      }
    }
  }
  else {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 3" }
    }
    dissect {
      mapping => {
        rest_msg => "%{?data} %{rest_msg1}"
      }
    }
  }
  if [rest_msg] =~ "pattern:" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 4" }
    }
    dissect {
      mapping => {
        rest_msg1 => "%{?data}pattern: %{event.action}"
      }
    }
  }
  kv {
    source => "rest_msg1"
    field_split => " "
    value_split => "="
    target => "meraki"
  }
  if [meraki][src] =~ ":" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5" }
      rename => {"[meraki][src]" => "src"}
    }
    dissect {
      mapping => {
        src => "%{source.ip}:%{source.port}"
      }
    }
    mutate {
      remove_field => ["src"]
    }
  }
  if [meraki][dst] =~ ":" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 6" }
      rename => {"[meraki][dst]" => "dst"}
    }
    dissect {
      mapping => {
        dst => "%{destination.ip}:%{destination.port}"
      }
    }
    mutate {
      remove_field => ["dst"]
    }
  }
  if [meraki][client_ip] =~ ":" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5 (a)" }
      rename => {"[meraki][client_ip]" => "src"}
    }
    dissect {
      mapping => {
        src => "%{source.ip}:%{source.port}"
      }
    }
    mutate {
      remove_field => ["src"]
    }
  }
  if [meraki][server] =~ ":" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 6 (a)" }
      rename => {"[meraki][server]" => "dst"}
    }
    dissect {
      mapping => {
        dst => "%{destination.ip}:%{destination.port}"
      }
    }
    mutate {
      remove_field => ["dst"]
    }
  }
  mutate {
    rename => {"[meraki][mac]" => "destination.mac"}
    rename => {"[meraki][sport]" => "source.port"}
    rename => {"[meraki][dport]" => "destination.port"}
    rename => {"[meraki][dst]" => "destination.ip"}
    rename => {"[meraki][src]" => "source.ip"}
    rename => {"[meraki][protocol]" => "network.protocol"}
    rename => {"[meraki][translated_port]" => "source.nat.port"}
    rename => {"[meraki][translated_src_ip]" => "source.nat.ip"}
    rename => {"[meraki][translated_dst_ip]" => "destination.nat.ip"}
    rename => {"[meraki][server]" => "destination.ip"}
    rename => {"[meraki][client_ip]" => "source.ip"}
    rename => {"[meraki][category0]" => "rule.category"}
    rename => {"[meraki][category1]" => "rule.category"}
    rename => {"[meraki][url]" => "url.full"}
  }
  # date {
  #   match => ["event.created" , "mm dd yyyy HH:mm:ss"]
  # }
  mutate {
    remove_field => ["rest_msg","log.date","rest_msg1","[meraki]"]
  }
  translate {
    field => "[syslog_severity]"
    destination => "[rule.category]"
    dictionary => {
      "error" => "Security/Vulnerability"
      "info" => "Security/Activity"
      "notice" => "Security/Activity"
      "warning" => "Security/Warning"
    }
      fallback => "Others"
  }
}
output {
  pipeline { send_to => [enrichments] }
}
