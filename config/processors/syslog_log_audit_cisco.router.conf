# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {

  mutate {
    add_field => { "observer.vendor" => "cisco" }
    add_field => { "event.module" => "cisco.router" }
    add_field => { "observer.product" => "cisco.router" }
    add_field => { "observer.type" => "router" }
    # log.source.hostname does not exist in ECS. this field comes from the relay. because it may break something we'll just copy it to the proper field name before someone addresses it
    copy => {"log.source.ip" => "host.ip"} 
  }

  mutate {
    strip => ["message"]
  }

  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" {
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "<%{pri}>%{rest_msg}"
      }
    }
  } else {
  ### Filebeats udp or tcp in
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "%{?data} {%{?data}} <%{pri}>%{rest_msg}"
      }
    }
  }
 

  # Note: The old version of this processor needs some rework (code after the numerated steps). 
  # However, there are functioning bits of it that we'll preserve (properly identified below), and since it relies on %{rest_msg} the new rules shouldn't affect it if we preserve such field.

  # 1. Hostname
  
  mutate {
    copy => { "log.source.hostname" => "[tmp][log_source_hostname]"}
  }
  mutate {
    split => { "[tmp][log_source_hostname]" => "." } 
    add_field => { "host.hostname" => "%{[tmp][log_source_hostname][0]}"}
  }

  # 2. Start by copying the original message to log.original (for integrity).  We'll then pick the common fields and placing them under [tmp]. [tmp] is a temporary slot to work out the parsing

  mutate {
    id => "cisco-mutate-logoriginal1"
    add_field => {"[log.original]" => "%{[message]}"}
  }

  mutate {
    id => "cisco-mutate-logoriginal2"
    lowercase => ["[message]"]
  }

  # 2. General cisco log format is 
  # {timesdtamp} {facility} {severity} {mnemonic} {description}
  # seq no:timestamp: %facility-severity-MNEMONIC:description

  grok {
    id => "cisco.router-mutate-grok-message"
    tag_on_failure => "_grokparsefailure_cisco.router-mutate-grok-message"
    match => { 
        "message" => [
          "%{GREEDYDATA:[tmp][ingest_timestamp]}\s\{name=%{GREEDYDATA:[tmp][logsource]}\}\s<%{NUMBER:syslog_pri}>%{NUMBER:[event.id]}:\s%{GREEDYDATA:[tmp][device_timestamp]}:\s\%%{WORD:[tmp][facility]}-%{WORD:[tmp][severity]}-%{WORD:[tmp][mnemonic]}:\s%{GREEDYDATA:[tmp][msg]}",
          "%{GREEDYDATA:[tmp][ingest_timestamp]}\s\{name=%{GREEDYDATA:[tmp][logsource]}\}\s<%{NUMBER:syslog_pri}>%{NUMBER:[event.id]}:\s%{GREEDYDATA:[tmp][host.hostname]}:\s%{GREEDYDATA:[tmp][device_timestamp]}:\s\%%{WORD:[tmp][facility]}-%{WORD:[tmp][severity]}-%{WORD:[tmp][mnemonic]}:%{WORD:[tmp][cisco_process]}:\s%{GREEDYDATA:[tmp][msg]}"
        ]
    }
  }


  # 3. Parse ingest date
  mutate {
    id => "cisco-mutate-gsub-date"
    gsub => [ "[tmp][ingest_timestamp]", "t", "-"]
  }

  date {
    id => "cisco-date-ingest"
    match => [ "[tmp][ingest_timestamp]", "MMM dd yyyy HH:mm:ss",
          "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd-HH:mm:ss.SSSZ", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss.SSS ZZZ", "MMM dd HH:mm:ss ZZZ", "MMM dd HH:mm:ss.SSS", "YYYY MMM dd HH:mm:ss.SSS ZZZ", "YYYY MMM dd HH:mm:ss ZZZ", "YYYY MMM dd HH:mm:ss.SSS" ]
    target => "event.ingested"
  }

  # 4. Syslog Pri
  syslog_pri {
  }

  # 5. Parse device log date
  date {
    id => "cisco-date-event"
    match =>[
        "[tmp][device_timestamp]", "MMM dd yyyy HH:mm:ss",
          "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd-HH:mm:ss.SSSZ", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss.SSS ZZZ", "MMM dd HH:mm:ss ZZZ", "MMM dd HH:mm:ss.SSS", "YYYY MMM dd HH:mm:ss.SSS ZZZ", "YYYY MMM dd HH:mm:ss ZZZ", "YYYY MMM dd HH:mm:ss.SSS" 
    ]
    target => "event.started"
  }

  # 6. Set action field
  mutate {
    add_field => { "event.action" => "%{[tmp][facility]}.%{[tmp][mnemonic]}"}
  }

  # 7. Rename Cisco facility ##
  # From Elastic: The translate filter plugin supports large dictionaries, and has been tested with up to 100,000 key/values.
 
  # a. perform facility translation
  mutate {
    uppercase => ["[tmp][facility]"]
  }
  translate {
    id => "cisco-translate-facility"
    field => "[tmp][facility]"
    destination => "[tmp][facility_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios_facility_categories.csv"  # ** Must set full "/path/to/lookup.json" to your lookup file **
    refresh_interval => 3000
    fallback => "not_found_facility"
  }

  # b. Translate full msg, explanation, recommendation
  translate {
    id => "cisco-translate-mnemonic"
    field => "[tmp][mnemonic]"
    destination => "[tmp][mnemonic_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios.json" # ** Must set full "/path/to/lookup.json" to your lookup file **
    refresh_interval => 3000
    fallback => '{"key1":"not_found"}'
  }

 
  # because a “fallback” value can only contain a string, additional processing is done to ensure that failed lookups store values in proper fields
  if [tmp][mnemonic_translation] == '{"key1":"not_found"}' {

    json { 
      source => "[tmp][mnemonic_translation]" 
      target => "[tmp][mnemonic_translation]"
    }

    mutate {
      remove_field => ["[tmp][mnemonic_translation"]
    }

    mutate {
      add_field => {"[tmp][mnemonic_translation][msg_explanation]" => "not_found_msg_explanation"}
      add_field => {"[tmp][mnemonic_translation][msg_recommendation]" => "not_found_msg_recommendation"}
      add_field => {"[tmp][mnemonic_translation][facility]" => "not_found_translation_facility"}
      add_field => {"[tmp][mnemonic_translation][msg_txt]" => "not_found_parsing_rule"}
    }
  }

  # c. add proper fields from [tmp] translated
  mutate {
    add_field => { "event.reason" => "%{[tmp][mnemonic_translation][msg_explanation]}"}
    add_field => { "error.message" => "%{[tmp][msg]}"}
    add_field => { "event.recommendation" => "%{[tmp][mnemonic_translation][msg_recommendation]}"}
  # Tip: the [tmp][msg_parse]] from the translate filter contains the format of the message, which may make parsing easier especially for dissect/grok filters. Anything under [tmp] is dropped from the event so this will need to be turned back on when parsing 
    add_field => { "[tmp][msg_parse]" => "%{[tmp][mnemonic_translation][msg_txt]}"}
  }

# 7. Specific event parsing
    
  # a. BGP Messages
  if [event.action] == "bgp.adjchange" {
    dissect {
      mapping => {
        "[tmp][msg]" => "neighbor %{[tmp][related.ip]} %{[tmp][bgp][state]} %{[tmp][bgp][reason]}"
      }
    }

    mutate {
      add_field => { "event.type" => "connection"}
      add_field => { "event.category" => "network"}
      add_field => { "event.kind" => "state"}
      
    }

    translate {
            field => "[tmp][bgp][state]"
            dictionary => [
            "down", "failure", 
            "up", "success"
            ]
            exact => true
            fallback => "unknown"
            destination => "event.outcome"
        }

  }

  # 7.2. Link up/down

  if [event.action] == "link.updown" {
    grok {
      id => "cisco.router-grok-link.updown"
      match => { 
          "[tmp][msg]" => "%{GREEDYDATA}interface %{GREEDYDATA:[tmp][ifname]}\, changed state to %{WORD:[tmp][interface][state]}"
      }
    }

    mutate {
      add_field => { "event.type" => "connection"}
      add_field => { "event.category" => "network"}
      add_field => { "event.kind" => "state"}
      add_field => { "observer.ingress.interface.name" => "%{[tmp][ifname]}"}
      add_field => { "observer.ingress.interface.alias" => "unknown_interface_alias"} #we're adding interface.alias here so later it can be used by enrichments to look for interface details
    }

    translate {
      field => "[tmp][interface][state]"
      dictionary => [
      "down", "failure", 
      "up", "success"
      ]
      exact => true
      # [field]-[error]
      fallback => "unknown"
      destination => "event.outcome"
    }

  }

  # 7.3. Line up/down

  if [event.action] == "line.updown" {
    grok {
      id => "cisco.router-grok-line.updown"
      match => {
        "[tmp][msg]" => "line protocol on interface %{GREEDYDATA:[tmp][ifname]}, changed state to %{WORD:[tmp][interface][state]}"
      }
    }

    mutate {
      add_field => { "event.type" => "connection"}
      add_field => { "event.category" => "network"}
      add_field => { "event.kind" => "state"}
      add_field => { "observer.ingress.interface.name" => "%{[tmp][ifname]}"}
      add_field => { "observer.ingress.interface.alias" => "unknown_interface_alias"} #we're adding interface.alias here so later it can be used by enrichments to look for interface details
    }

    translate {
            field => "[tmp][interface][state]"
            dictionary => [
            "down", "failure", 
            "up", "success"
            ]
            exact => true
            # [field]-[error]
            fallback => "unknown"
            destination => "event.outcome"
    }

  }

  # 8. Cleanup related IP

    if [related.ip] {
      mutate {
        gsub => [
          # cleanup ip address before adding to proper field
          "[tmp][related.ip]", "\*", ""
        ]
      }
      mutate {
        # related.ip should be an array, therefore adding twice. a ruby conversion filter may be a better fit
        add_field => { "related.ip" => "%{[tmp][related.ip]}"}
        add_field => { "related.ip" => "%{[tmp][related.ip]}"}
      }
    }
    
  # 9. Remove [tmp] fields
    mutate {
      remove_field => [ "[tmp]"]
    }

  # 10. >>>>>>>>> Old processor - These are the bits of the old processor that relies on [rest_msg]


  if [event.severity_name] =~ "SYSD" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 1" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event_start->} %{+event_start} %{+event_start} %{?data}: %{?data->} %{?data} %{?data} %{?data} %{source.mac} %{event.status}"
      }
    }
  }
  else if [rest_msg] =~ "%FMANFP-6-IPACCESSLOGDP" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 2" }
    }
    dissect {
        mapping => {
          rest_msg => "%{event.id}: %{chk_data} %{?data}"
        }
      }
    if [rest_msg] =~ "denied" and [chk_data] =~ ":" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 2 (a)" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{source.address}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} denied %{network.protocol} %{source.ip} -> %{destination.ip} %{?data}, %{network.packet} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "denied" and [chk_data] !~ ":" {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} denied %{network.protocol} %{source.ip} -> %{destination.ip} %{?data}, %{network.packet} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "permitted" and [chk_data] =~ ":" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 2 (b)" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{source.address}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} permitted %{network.protocol} %{source.ip} -> %{destination.ip} %{?data}, %{network.packet} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "permitted" and [chk_data] !~ ":" {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} permitted %{network.protocol} %{source.ip} -> %{destination.ip} %{?data}, %{network.packet} %{?data}"
        }
      }
    }
  }
  else if [rest_msg] =~ "%FMANFP-6-IPACCESSLOGP" and [rest_msg] =~ "denied" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 3" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} denied %{network.protocol} %{source.ip}(%{source.port}) -> %{destination.ip}(%{destination.port}), %{network.packet} %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "%FMANFP-6-IPACCESSLOGP" and [rest_msg] =~ "permitted" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 4" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} permitted %{network.protocol} %{source.ip}(%{source.port}) -> %{destination.ip}(%{destination.port}), %{network.packet} %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "%ISDN-6-CONNECT" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5" }
    }
    dissect {
      mapping => {
        rest_msg => "%{?data}%%{rule.name}: %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "%ISDN-6-DISCONNECT" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 6" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} %{rule.description} %{?data} lasted %{?event.duration} %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "%SEC-6-IPACCESSLOGP" and [rest_msg] =~ "denied" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 7" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} denied %{network.protocol} %{source.ip}(%{source.port}) -> %{destination.ip}(%{destination.port}), %{network.packet} %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "%SEC-6-IPACCESSLOGP" and [rest_msg] =~ "permitted" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 8" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} permitted %{network.protocol} %{source.ip}(%{source.port}) -> %{destination.ip}(%{destination.port}), %{network.packet} %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "SEC-6-IPACCESSLOGNP" or [rest_msg] =~ "SNMP-5-COLDSTART" or [rest_msg] =~ "SYS-6-BOOTTIME" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 9" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{chk_data} %{?data}"
      }
    }
    if [chk_data] =~ ":" {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{source.address}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{eventdescription}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{eventdescription}"
        }
      }
    }
    if [eventdescription] =~ "->" and [eventdescription] =~ "denied " {
      dissect {
        mapping => {
          eventdescription => "%{?data} denied %{?data} %{source.ip} -> %{destination.ip}, %{network.packet}"
        }
      }
    }
    mutate {
      rename => {"eventdescription" => "rule.description"}
    }
  }
  else if [rest_msg] =~ "FF8472-5-THRESHOLD_VIOLATION" or [rest_msg] =~ "TRACKING-5-STATE" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 10" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "VOIPAAA-5-VOIP_CALL_HISTORY" or [rest_msg] =~ "VOIPAAA-5-VOIP_FEAT_HISTORY" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 11" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{?data} %%{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "SYS-4-CONFIG_RESOLVE_FAILURE" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 12" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{?data}%%{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "SEC-6-IPACCESSLOGRP" or [rest_msg] =~ "SEC-6-IPACCESSLOGSP" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 13" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "SEC-6-IPACCESSLOGRL" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 14" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} missed %{network.packet} %{?data}"
      }
    }
  }
 
  else if [rest_msg] =~ "CDP-4-DUPLEX_MISMATCH" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 17" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data}, with %{destination.address} %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "CDP-4-NATIVE_VLAN_MISMATCH" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 18" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data}, with %{destination.address} %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "RECVD_PKT_INV_SPI" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 19" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "IKMP_NO_ID_CERT_ADDR_MATCH" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 20" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "IKMP_POLICY_DEFAULT" or [rest_msg] =~ "OT11-6-DISASSOC" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 21" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "FMANFP-6-IPACCESSLOGNP" and [rest_msg] =~ "denied 2" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 22" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{chk_data} %{?data}"
      }
    }
  # some logs do not have source/destination address
    if [chk_data] =~ ":" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 22 (a)" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{source.address}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} denied %{?data} %{source.ip} -> %{destination.ip}, %{network.packet} %{?data}"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 22 (b)" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} denied 2 %{source.ip} -> %{destination.ip}, %{network.packet} %{?data}"
        }
      }
    }
  }
  else if [rest_msg] =~ "FMANFP-6-IPACCESSLOGNP" {
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} denied %{?data} %{source.ip} -> %{destination.ip}, %{network.packet} %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "DSMP-3-DSP_TIMEOUT" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 23" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{?data}: %%{rule.name}: %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "DUAL-5-NBRCHANGE" and [rest_msg] =~ "down" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 24" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} Neighbor %{destination.ip} %{?data}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "DUAL-5-NBRCHANGE" and [rest_msg] =~ "up" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 25" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start} %{+event_start->} %{+event_start}: %%{rule.name}: %{?data} Neighbor %{destination.ip} %{?data}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "DUAL-6-NBRINFO" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 26" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{host.hostname} %{?data}: %%{rule.name}: %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "ENVMON-3-FAN_FAILED" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 27" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "ENVMON-4-ONE_FAN_LOW_RPM" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 28" }
    }
    # ENVMON-4-ONE_FAN_LOW_RPM without destination address
    if [rest_msg] =~ "Fan 1 is running at low RPM" or [rest_msg] =~ "Fan 2 is running at low RPM" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 28 (a)" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{rule.description}"
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 28 (b)" }
      }
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{destination.address}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{rule.description}"
        }
      }
    }
  }
  else if [rest_msg] =~ "FAN-3-FAN_FAILED" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 29" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "PORT_SECURITY-2-PSECURE_VIOLATION" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 30" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "NGWC_PLATFORM_FEP-1-FRU_PS_ACCESS" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 31" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "CRYPTO-4-PKT_REPLAY_ERR" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 32" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "ADJ-3-RESOLVE_REQ" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 33" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "PLATFORM_STACKPOWER-6-CABLE_EVENT" or [rest_msg] =~ "ADJ-5-RESOLVE_REQ_FAIL" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 34" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "DTP-5-TRUNKPORTON" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 35" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} %{observer.ingress.interface.name} %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "SW_MATM-4-MACFLAP_NOTIF" or [rest_msg] =~ "SW_DAI-4-DHCP_SNOOPING_DENY" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 36" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  
  else if [rest_msg] =~ "IOSXE-3-PLATFORM" and [rest_msg] != "IPSEC-3-REPLAY_ERROR"{
    mutate {
      add_field => { "agent.parse_rule" => "RULE 38" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{chk_data}:%{?data}"
      }
    }
    if [chk_data] =~ " " {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{rule.description}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{?data} %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{rule.description}"
        }
      }
    }
  }
  else if [rest_msg] =~ "IP_SNMP-4-NOTRAPIP" or [rest_msg] =~ "PQ3_TSEC-5-LATECOLL" or [rest_msg] =~ "PQII_PRO_FE-5-LATECOLL"  {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 39" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "IP-4-DUPADDR" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 40" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} %{?data} %{destination.ip} %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "IPSEC-3-REPLAY_ERROR" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 41" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} %%{rule.name}: %{rule.description}, %{?data}, %{?data} %{source.ip}, %{?data} %{?destination.ip}, %{?data}"
      }
    }
  }
  else if [rest_msg] =~ "MARS_NETCLK-3-HOLDOVER" or [rest_msg] =~ "MARS_NETCLK-3-CLK_TRANS" or [rest_msg] =~ "MARS_NETCLK-3-HOLDOVER_TRANS" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 42" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{chk_data} %{?data}"
      }
    }
    if [chk_data] =~ ":" {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{source.address}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{?data}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %{?data}-%{?data}-%{rule.name}: %{?data}"
        }
      }
    }
  }
  
  else if [rest_msg] =~ "FMANFP-6-FMANACLLOGMISSMSG" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 43" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{chk_data} %{?data}"
      }
    }
    if [chk_data] =~ ":" {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{source.address}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}:%{?data} missed %{packet.no} %{?data}"
        }
      }
    }
    else {
      dissect {
        mapping => {
          rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}: %{?data} %{process.name}: %{?data} missed %{packet.no} %{?data}"
        }
      }
    }
  }
  else if [rest_msg] =~ "INEPROTO-5-UPDOWN" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 44" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}-%{?data}: %{?data} Interface %{observer.ingress.interface.name}, %{rule.description}"
      }
    }
  }
  else if [rest_msg] =~ "INEPROTO-5-UPDOWN" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 45" }
    }
    dissect {
      mapping => {
        rest_msg => "%{event.id}: %{event_start->} %{+event_start} %{+event_start}: %%{rule.name}-%{?data}: %{?data} Interface %{observer.ingress.interface.name}, %{rule.description}"
      }
    }
  }
  date {
    # if we use event.start originally, if it's not in proper format,
    # it causes parsing error and since this field has to be a date field it won't go to elastic as data type mismatch
    match => ["event_start" , "MMM dd HH:mm:ss.SSS ZZZ","MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss"]
    timezone => "GMT"
    locale => "en"
    target => "event.start"
  }
  mutate {
    remove_field => ["rest_msg","log.date","chk_data","event_start","pri"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
