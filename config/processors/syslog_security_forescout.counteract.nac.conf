# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "forescout" }
    add_field => { "[event][dataset]" => "forescout.counteract_nac" }
	
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  if [actual_msg] =~ ": NAC Policy Log:" or [actual_msg] =~ "Application status" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 1" }
    }
    mutate {
      gsub => ["actual_msg", "\r",""]
      gsub => ["actual_msg", '[\"]',""]
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]} %{rest_msg}"
      }
    }
    if [actual_msg] =~ ": Log:" {
      if [actual_msg] =~ " CounterAct - " {
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 2" }
        }
        dissect {
          mapping => {
            rest_msg => "%{[[source][address]]} CounterAct - %{[[host][hostname]]}[%{[[source][port]]}]: %{?[[check][del]]}. %{?del}: %{?del1}: %{[[rule][ruleset]]} %{?del} %{somedata}"
          }
        }
      }
      else {
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 3" }
        }
        dissect {
          mapping => {
            rest_msg => "%{[[source][address]]} Counteract - %{[[host][hostname]]->} %{?[[check][del]]}. %{?del}: %{?del1}: %{[[rule][ruleset]]} %{?del} %{somedata}"
          }
        }
      }
      kv {
        source => "somedata"
        field_split => " ,"
        value_split => ":"
        target => "cact"
      }
      mutate {
        rename => {"[cact][Type]" => "[service][type]"}
        rename => {"[cact][Source]" => "[source][ip]"}
        rename => {"[cact][Target]" => "[destination][ip]"}
        rename => {"[cact][Vendor]" => "[host][type]"}
        rename => {"[cact][Severity]" => "[event][severity_name]"}

      }
    }
    else if [actual_msg] =~ "Application status" and [actual_msg] =~ "EM connection status:" and [actual_msg] =~ "Assigned hosts:" and [actual_msg] =~ "Engine status:" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 4" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data} %{chk_data} %{?data}"
        }
      }
      if [chk_data] == "-" {
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 4 (1)" }
        }
        dissect {
          mapping => {
            rest_msg => "%{[[source][address]]} - %{[[host][hostname]]}[%{[[source][port]]}]: Application status: %{[[service][state]]};Connected clients: %{[[source][address]]};EM connection status: %{[[event][action]]};Assigned hosts: %{?[[hosts][assigned]]};Engine status: %{[[rule][name]]};Installed Plugins: %{?installed_plugins}"
          }
        }
      }
      else if [rest_msg] =~ "Recovery EM:"{
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 4 (2)" }
        }
        dissect {
          mapping => {
            rest_msg => "%{[[source][address]]} %{?data} -%{[[host][hostname]]} %{?data}: Application status: %{[[service][state]]};Connected clients: %{[[source][address]]};Recovery EM: %{[[source][ip]]};EM connection status: %{[[event][action]]};Assigned hosts: %{?[[hosts][assigned]]};Engine status: %{[[rule][name]]};Installed Plugins: %{?installed_plugins}"
          }
        }
      }
      else {
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 4 (3)" }
        }
        dissect {
          mapping => {
            rest_msg => "%{[[source][address]]} %{[[host][hostname]]}[%{[[process][pid]]}]: Application status: %{[[service][state]]};Connected clients: %{[[source][address]]};EM connection status: %{[[event][action]]};Assigned hosts: %{?[[hosts][assigned]]};Engine status: %{[[rule][name]]};Installed Plugins: %{?installed_plugins}"
          }
        }
      }
    }
    else if [actual_msg] =~ "Application status" and [actual_msg] =~ "Attacked Services:" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 4 (a)" }
      }
      dissect {
        mapping => {
          rest_msg => "%{[[source][address]]} - %{[[host][hostname]]}[%{[[source][port]]}]: Application status: %{[[service][state]]};%{kv_msg}"
        }
      }
      kv {
        source => "kv_msg"
        field_split => ";"
        value_split => ":"
        target => "fsnac"
      }
    }
    else if [actual_msg] =~ ": NAC Policy " {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 5" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data} %{?data} %{chk_data} %{?data}"
        }
      }
      if [chk_data] == "-" {
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 5 (a)" }
        }
        dissect {
          mapping => {
            rest_msg => "%{[[source][address]]} %{?data} - %{[[host][hostname]]}[%{[[source][port]]}]: NAC Policy Log: Source: %{[[source][ip]]}, Rule: %{?[[rule][details]]} , Match: %{?[[rule][description]]}, Category: %{?category}, %{rest_msg1}"
          }
        }
      }
      else if [rest_msg] =~ "MAC Address-" and [chk_data] !~ "^-"{
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 5 (b)" }
        }
        dissect {
          mapping => {
            rest_msg => "%{[[source][address]]} %{[[host][hostname]]}[%{[[source][port]]}]: NAC Policy Log: Source: MAC Address-%{[[source][mac]]}, Rule: %{?[[rule][details]]} , Match: %{?[[rule][description]]}, Category: %{?category}, %{rest_msg1}"
          }
        }
      }
      else if [rest_msg] =~ "MAC Address-" and [chk_data] =~ "^-"{
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 5 (c)" }
        }
        dissect {
          mapping => {
            rest_msg => "%{[[source][address]]} %{?data} -%{[[host][hostname]]} %{?data}: NAC Policy Log: Source: MAC Address-%{[[source][mac]]}, Rule: %{?[[rule][details]]} , Match: %{?[[rule][description]]}, Category: %{?category}, %{rest_msg1}"
          }
        }
      }
      if [rest_msg1] =~ "Duration :" or [rest_msg1] =~ "Duration:"{
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 6" }
        }
        dissect {
          mapping => {
            rest_msg1 => "%{msg} Duration: %{[[event][duration]]}"
          }
        }
      }
      if [rest_msg1] =~ "MAC Address changed from" and [rest_msg1] =~ "Duration:"  {
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 7" }
        }
        dissect {
          mapping => {
            rest_msg1 => "%{msg} MAC Address changed from %{[[source][mac]]} to %{[[destination][mac]]}. %{?data}"
          }
        }
      }
      if [rest_msg1] =~ "MAC Address changed from" and [rest_msg1] !~ "Duration:"  {
        mutate {
          add_field => { "[agent][parse_rule]" => "RULE 7" }
        }
        dissect {
          mapping => {
            rest_msg1 => "%{msg} MAC Address changed from %{[[source][mac]]} to %{[[destination][mac]]}"
          }
        }
      }
      mutate {
        strip => ["[event][duration]"]
      }
    }
    else {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 8 " }
      }
      dissect {
        mapping => {
          rest_msg => "%{[[source][address]]} CounterAct - %{[[host][hostname]]}[%{[[source][port]]}]: %{[[event][original]]}"
        }
      }
    }
  }
  else if [actual_msg] =~ ":" and [actual_msg] =~ "Log:" and [actual_msg] =~ "CounterAct -" and [actual_msg] =~ "Source:" and [actual_msg] =~ "Target:" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 9" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]} %{[[source][address]]} CounterAct - %{[[host][hostname]]}[%{[[source][port]]}]: %{?[[check][del]]}. %{?del}: %{?del1}: %{[[rule][ruleset]]} %{?del} %{somedata}"
      }
    }
    kv {
      source => "somedata"
      field_split => " ,"
      value_split => ":"
      target => "cact"
    }
    mutate {
      rename => {"[cact][Type]" => "[service][type]"}
      rename => {"[cact][Source]" => "[source][ip]"}
      rename => {"[cact][Target]" => "[destination][ip]"}
      rename => {"[cact][Vendor]" => "[host][type]"}
      rename => {"[cact][Severity]" => "[event][severity_name]"}
    }
  }
  else if [actual_msg] =~ ":" and [actual_msg] =~ "Log:" and [actual_msg] =~ "CounterAct -" and [actual_msg] =~ "Source:" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 10" }
    }
    dissect {
      mapping => {
        actual_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]} %{[[source][address]]} CounterAct - %{[[host][hostname]]}[%{[[source][port]]}]: %{?[[check][del]]} Source: %{[[source][ip]]}, %{?data}"
      }
    }
  }
  
# Custom syslog action
# Use this message format 
# {"rule_name":"Forescout - Non <name> Device Detected","action":"Alert","project_name":"<name>","online":"{online}","netbiosname":"{nbthost}","ip":"{ip}","segment_path":"{segment_path}","user_name":"{user}","mac":"{mac}","dns_hostname":"{hostname}","dhcp_hostname":"{dhcp_hostname}","nic_vendor":"{vendor}","ad_display_name":"{ad_displayname}","ad_username":"{ad_name}","sw_ip_port":"{sw_ipport_desc}","sw_port_alias":"{sw_port_alias}","num_of_hosts_on_port":"{sw_port_multi}","function":"{prim_classification}","os":"{user_def_fp}","vendor_model":"{vendor_classification}","wlan_ap_name":"{wifi_ap_name}","wlan_ctp_ip":"{wifi_ip}","wlan_ssid":"{wifi_ssid}","serial_number":"{script_result.2f260255e8df159daf193e0f872dcd36}"}
  else if [actual_msg] =~ "(?i)^.*?Non (\w+ )?Device Detected" {
    mutate {
      add_field => { "[agent][parse_rule]" => "RULE 11" }
	  remove_field => ["host"]
    }
    mutate {
      lowercase => [ "json_data" ]
    } 
    grok {
      match => { "actual_msg" => "^(?<[event][start]>\w+\s+\w+\s+\d+:\d+:\d+)\s+(?<[source][address]>.*?)\s(?<[host][hostname]>.*?\[)(?<[source][port]>\d+)]: (?<json_data>.*?)$" }
    }
    json {
      source => "json_data"
      target => "tmp_data"
    }
    mutate{
      rename => { "[tmp_data][rule_name]" => "[rule][name]" }
      rename => { "[tmp_data][action]" => "[event][action]" }
      rename => { "[tmp_data][project_name]" => "[package][name]" }
      rename => { "[tmp_data][online]" => "[event][type]" }
      rename => { "[tmp_data][netbiosname]" => "[host][hostname]" }
      rename => { "[tmp_data][ip]" => "[source][ip]" }
      rename => { "[tmp_data][segment_path]" => "[package][path]" }
      rename => { "[tmp_data][user_name]" => "[user][name]" }
      rename => { "[tmp_data][mac]" => "[source][mac]" }
      rename => { "[tmp_data][dns_hostname]" => "[host][domain]" }
      rename => { "[tmp_data][dhcp_hostname]" => "[host][name]" }
      rename => { "[tmp_data][nic_vendor]" => "[observer][vendor]" }
      rename => { "[tmp_data][ad_display_name]" => "[user][full_name]" }
      rename => { "[tmp_data][ad_username]" => "[source][user][name]" }
      rename => { "[tmp_data][sw_ip_port]" => "[observer][ingress][interface][name]" }
      rename => { "sw_port_alias" => "[observer][ingress][interface][alias]" }
      rename => { "num_of_hosts_on_port" => "[observer][ingress][interface][host_count]" }
      rename => { "[tmp_data][function]" => "[event][category]" }
      rename => { "[tmp_data][os]" => "[host][os][full]" }
      rename => { "[tmp_data][vendor_model]" => "[host][os][family]" }
      rename => { "wlan_ap_name"=> "[observer][ingress][vlan][name]" }
      rename => { "[tmp_data][wlan_ctp_ip]" => "[host][ip]" }
      rename => { "[tmp_data][wlan_ssid]" => "[host][id]" }
      rename => { "[tmp_data][serial_number]" => "[host][serial]" }
    }
  }
  if [source][ip] and [source][ip] =~ "MAC Address" {
    mutate {
      add_field => { "[agent][parse_rule]" => "Invalid IP value" }
      remove_field => ["[source][ip]"]
    }
  }
  date {
    match => ["[event][start]" , "MMM dd HH:mm:ss","MMM dd HH:mm:ss.SSS ZZZ","MMM dd HH:mm:ss.SSS"]
    timezone => "GMT"
    locale => "en"
    target => "[event][start]"
  }

  mutate {
    remove_field => ["tmp_data", "actual_msg", "[log][date]", "server.host", "msg", "kv_msg", "chk_data", "[event][duration]", "cact", "somedata", "fsnac", "rest_msg", "rest_msg1", "json_data" ]
  }

  translate {
    source => "[[event][severity_name]]"
    target => "[rule][category]"
    dictionary => {
      "ERRR" => "Security/Failed Activity"
      "INFO" => "Security/Activity"
      "WARN" => "Security/Other"
      "Lost" => "Security/Failed Activity"
      "Failed" => "Security/Failed Activity"
      "6" => "Security/Failed Activity"
      "3" => "Security/Failed Activity"
    }
    fallback => "Others"
  }
  # Do not remove this, due to internal need.
  if [host][hostname] and ([host][hostname] != "" or [host][hostname][0] != ""){
    mutate {
      replace => { "[host][name]" => "%{[host][hostname]}" }
      replace => { "[log][source][hostname]" => "%{[host][hostname]}" }
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}
