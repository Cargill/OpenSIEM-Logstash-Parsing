# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "windows_wef" }
    add_field => { "[event][dataset]" => "windows_wef_events" }
    # rename => {"[winlog][channel]"  => "[event][dataset]"}
    rename => {"[agent][hostname]" => "[agent][name]"}
    rename => {"[winlog][keywords]" => "[rule][category]"}
    # User
    rename => {"[winlog][user][domain]" => "[user][domain]"}
    rename => {"[winlog][user][name]" => "user_name"}
    # Destination
    rename => { "[winlog][channel]" => "[event][kind]"}
    rename => {"[winlog][event_data][TargetLogonGuid]" => "[destination][user][group][id]"}
    rename => {"[winlog][event_data][TargetDomainName]" => "[destination][domain]"}
    rename => {"[winlog][event_data][TargetOutboundUserName]" => "destinationuser_name"}
    rename => {"[winlog][event_data][TargetUserName]" => "hostuser_name"}
    rename => {"[winlog][event_data][Data][TargetUserName]" => "hostuser_name"}
    rename => {"[winlog][event_data][DestAddress]" => "[destination][ip]"}
    rename => {"[winlog][event_data][Group]"  => "[destination][user][group][name]"}
    rename => {"[winlog][event_data][DestPort]" => "[destination][port]"}
    rename => {"[winlog][event_data][ClientName]" => "[client][user][name]"}
    rename => {"[winlog][event_data][ClientAddress]" => "[client][ip]"}
    rename => {"[winlog][event_data][ClientIP]" => "client_ip"}
    # File
    rename => {"[winlog][event_data][OriginalFileName]" => "[file][path]"}
    rename => {"[winlog][event_data][Path]" => "[file][path]"}
    rename => {"[winlog][event_data][ShareLocalPath]" => "[file][target_path]"}
    rename => {"[winlog][event_data][ObjectName]" => "[file][path]"}
    rename => { "[winlog][event_data][ServiceFileName]" => "[file][path]" }
    # Process fields
    rename => {"[winlog][event_data][TaskName]" => "[process][name]"}
    # these next 2 may be wrong
    rename => {"[winlog][event_data][ProcessID]" => "[process][pid]"}
    rename => {"[winlog][user_data][ProcessID]" => "[process][pid]"}
    rename => {"[winlog][process][pid]" => "[process][pid]"}
    rename => {"[winlog][event_data][NewProcessName]" => "[process][name]"}
    rename => {"[winlog][event_data][ServiceName]" => "[service][name]"}
    rename => {"[winlog][event_data][Service]" => "[service][name]"}
    rename => {"[winlog][event_data][ServiceSid]" => "[process][pid]"}
    rename => {"[winlog][event_data][ParentProcessName]" => "[process][parent][name]"}
    rename => {"[winlog][event_data][LogonProcessName]" => "[process][name]"}
    rename => {"[winlog][event_data][Application]" => "[process][name]"}
    rename => {"[winlog][event_data][ObjectType]" => "[process][args]"}
    rename => {"[winlog][event_data][SourceProcessId]" => "[process][parent][pid]"}
    rename => {"[winlog][event_data][ProcessId]" => "[process][pid]"}
    rename => {"[winlog][event_data][ProcessPath]" => "[process][path]"}
    rename => {"[winlog][event_data][ProcessPid]" => "[process][pid]"}
    rename => {"[winlog][process][thread][id]" => "[process][thread][id]"}
    # Source
    rename => {"[winlog][event_data][SubjectDomainName]" => "[source][user][domain]"}
    rename => {"[winlog][user_data][SubjectDomainName]" => "[source][user][domain]"}
    rename => {"[winlog][event_data][AccountName]" => "[source][user][id]"}
    rename => {"[winlog][event_data][AccountDomain]" => "[source][user][domain]"}
    rename => {"[winlog][event_data][IpAddress]" => "[source][ip]"}
    rename => {"[winlog][event_data][IpPort]" => "[source][port]"}
    rename => {"[winlog][event_data][SourceAddress]" => "[source][ip]"}
    rename => {"[winlog][event_data][SourcePort]" => "[source][port]"}
    rename => {"[winlog][event_data][SubjectUserName]" => "sourceuser_name"}
    rename => {"[winlog][user_data][SubjectUserName]" => "sourceuser_name"}
    rename => {"[winlog][user_data][SubjectUserSid]" => "sourceuser_id"}
    rename => {"[winlog][event_data][SubjectUserSid]" => "sourceuser_id"}
    # Other
    rename => {"[winlog][event_data][PackageName]" => "[package][name]"}
    rename => {"[winlog][event_data][Protocol]" => "[network][iana_number]"}
    rename => {"[winlog][event_data][LogonType]" => "[rule][uuid]"}
    rename => {"[winlog][event_data][RuleId]" => "[rule][id]"}
    rename => {"[winlog][event_data][RuleName]" => "[rule][name]"}
    rename => {"[winlog][event_data][ConnType]" => "[network][transport]"}
    #rename => {"[winlog][event_data][FailureReason]" => "[error][message]"}
    #rename => {"[winlog][event_data][SubStatus]" => "[error][code]"}
    # Flattening these fields
    # Host
    rename => {"[host][name]" => "[log][source][hostname]"}
    rename => {"[winlog][event_data][WorkstationName]" => "[destination][address]"}
    rename => {"[winlog][computer_name]" => "[log][source][hostname]"}
    # event
    rename => {"[event][action]" => "[event][action]"}
    rename => {"[winlog][event_id]" => "[event][id]"}
    rename => {"[log][event][original]" => "[event][original]"}
    rename => {"[winlog][event_data][Status]" => "[event][code]"}
    rename => {"[winlog][event_data][TargetLogonId]" => "[user][id]"}
    rename => {"[winlog][event_data][AuthenticationPackageName]" => "[package][name]"}

    # drop [process][pid] as it is not useful, and we see hex values for them
    remove_field => ["[event][original]", "[log][event][original]"]
  }
  if [winlog][event_data][ProcessName] and [winlog][event_data][ProcessName] !~ "-" {
    mutate {
      add_field => { "[process][name]" => "%{[winlog][event_data][ProcessName]}" }
    }
  }
  mutate {
    convert => {
      "[event][id]" => "string"
    }
  }
  if [event][id] == [event][code] {
    mutate {
      remove_field => [ "[event][code]" ]
    }
  }
  date {
    match => ["[event][created]", "yyyy-MM-dd'T'HH:mm:ssZ","ISO8601","yyyy-MM-dd't'HH:mm:ss.SSSz"]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
  }
  # spliting client ip and port
  if [client_ip] {
    if [client_ip] =~ ":" {
      dissect {
        mapping => {
          client_ip => "%{[[client][ip]]}:%{[[client][port]]}"
        }
      }
      mutate {remove_field => ["client_ip"]}
    }
    else {
      mutate {
        rename => {"client_ip" => "[client][ip]"}
      }
    }
  }
  # spliting user name and domain
  if [user_name] {
    if [user_name] =~ "@" {
      dissect {
        mapping => {
          user_name => "%{[[user][name]]}@%{[[user][domain]]}"
        }
      }
      mutate {remove_field => ["user_name"]}
    }
    else {
      mutate {
        rename => {"user_name" => "[user][name]"}
      }
    }
  }
  if [sourceuser_name] {
    if [sourceuser_name] =~ "@" {
      dissect {
        mapping => {
          sourceuser_name => "%{[[source][user][name]]}@%{[[source][user][domain]]}"
        }
      }
      mutate {remove_field => ["sourceuser_name"]}
    }
    else {
      mutate {
        rename => {"sourceuser_name" => "[source][user][name]"}
      }
    }
  }
  if [destinationuser_name] {
    if [destinationuser_name] =~ "@" {
      dissect {
        mapping => {
          destinationuser_name => "%{[[destination][user][name]]}@%{[[destination][user][domain]]}"
        }
      }
      mutate {remove_field => ["destinationuser_name"]}
    }
    else {
      mutate {
        rename => {"destinationuser_name" => "[destination][user][name]"}
      }
    }
  }
  if [sourceuser_id] {
    if [sourceuser_id] =~ "@" {
      dissect {
        mapping => {
          sourceuser_id => "%{[[source][user][id]]}@%{[[source][user][domain]]}"
        }
      }
      mutate {remove_field => ["sourceuser_id"]}
    }
    else {
      mutate {
        rename => {"sourceuser_id" => "[source][user][id]"}
      }
    }
  }
  if [hostuser_name] and [hostuser_name] != "None" {
    if [hostuser_name] =~ "@" {
      dissect {
        mapping => {
          hostuser_name => "%{[[host][user][name]]}@%{[[host][user][domain]]}"
        }
      }
      mutate {remove_field => ["hostuser_name"]}
    }
    else {
      mutate {
        rename => {"hostuser_name" => "[host][user][name]"}
      }
    }
  }
  mutate {
    copy => { "message" => "tmp" }
  }
  mutate {    
    gsub => [ "tmp", "\r", "" ]
    gsub => [ "tmp", "\n", "" ]
  }
  if [event][id] == "5829" {
    grok {
      tag_on_failure => "_grokparsefailure_1"
      match => { "tmp" => "^(?<[error][message]>.*?) Warning: (.*?please visit  (?<[event][reference]>.*?)\.\s+).*?Machine SamAccountName: (?<[observer][name]>.*?) .*?Domain: (?<[source][domain]>.*?\.) .*?Account Type:" }
      timeout_millis => 500
    }
  }
  if [event][id] == "411" {
    grok {
      tag_on_failure => "_grokparsefailure_2"
      match => { "tmp" => "^(?<[event][action]>.*?) Additional Data(.*?) Token Type: (?<[event][url]>.*?)(\s)?  Client IP: (?<[client][ip]>.*?) Error message: (?<[error][message]>.*?) Exception details: (?<[error][type]>.*?):(.*)" }
      timeout_millis => 500
    }
  }
  if [event][id] == "7036" {  
    mutate {
      rename => { "[winlog][event_data][param1]" => "[service][name]" }
      rename => { "[winlog][event_data][param2]" => "[service][state]" }
    }
  }
  if [event][id] == "1149" {  
    mutate {
      rename => { "[winlog][event_data][Param1]" => "[source][user][name]" }
      rename => { "[winlog][event_data][Param2]" => "[source][user][domain]" }
      rename => { "[winlog][event_data][Param2]" => "[source][ip]" }
    }
  }
  if [event][id] == "4769" {  
    mutate {
      rename => { "[winlog][event_data][TicketOptions]" => "ticket_option" }
      rename => { "[winlog][event_data][TicketEncryptionType]" => "ticket_encrypt" }
      gsub => [ "tmp", "\t", "" ]
    }
    grok {
      tag_on_failure => "_grokparsefailure_3"
      match => { "tmp" => "^.*Failure Code:(?<failure_code>.*)Transited Services.*$" }
      timeout_millis => 500
    }
    translate {
      source => "failure_code"
      target => "[event][reason]"
      dictionary => {
        "0x0" => "No errors were found"
        "0x1" => "Client's entry in database has expired"
        "0x2" => "Server's entry in database has expired"
        "0x3" => "Requested protocol version # not supported"
        "0x4" => "Client's key encrypted in old master key"
        "0x5" => "Server's key encrypted in old master key"
        "0x6" => "Client not found in Kerberos database"
        "0x7" => "Server not found in Kerberos database"
        "0x8" => "Multiple principal entries in database"
        "0x9" => "The client or server has a null key"
        "0x10" => "KDC has no support for padata type"
        "0x11" => "KDC has no support for transited type"
        "0x12" => "Clients credentials have been revoked"
        "0x13" => "Credentials for server have been revoked"
        "0x14" => "TGT has been revoked"
        "0x15" => "Client not yet valid - try again later"
        "0x16" => "Server not yet valid - try again later"
        "0x17" => "Password has expired"
        "0x18" => "Pre-authentication information was invalid"
        "0x19" => "Additional pre-authentication required"
        "0x20" => "Ticket expired"
        "0x21" => "Ticket not yet valid"
        "0x22" => "Request is a replay"
        "0x23" => "The ticket isn't for us"
        "0x24" => "Ticket and authenticator don't match"
        "0x25" => "Clock skew too great"
        "0x26" => "Incorrect net address"
        "0x27" => "Protocol version mismatch"
        "0x28" => "Invalid msg type"
        "0x29" => "Message stream modified"
        "0x30" => "Alternative authentication method required*"
        "0x31" => "Incorrect sequence number in message"
        "0x32" => "Inappropriate type of checksum in message"
        "0xA" => "Ticket not eligible for postdating"
        "0xB" => "Requested start time is later than end time"
        "0xC" => "KDC policy rejects request"
        "0xD" => "KDC cannot accommodate requested option"
        "0xE" => "KDC has no support for encryption type"
        "0xF" => "KDC has no support for checksum type"
        "0x1F" => "Integrity check on decrypted field failed"
        "0x2A" => "Message out of order"
        "0x2C" => "Specified version of key is not available"
        "0x2D" => "Service key not available"
        "0x2E" => "Mutual authentication failed"
        "0x2F" => "Incorrect message direction"
        "0x3C" => "Generic error (description in e-text)"
        "0x3D" => "Field is too long for this implementation"
      }
      fallback => "failed service ticket request"
    }
    translate {
      source => "ticket_encrypt"
      target => "[tls][cipher]"
      dictionary => {
        "0x1" => "DES-CBC-CRC"
        "0x3" => "DES-CBC-MD5"
        "0x11" => "AES128-CTS-HMAC-SHA1-96"
        "0x12" => "AES256-CTS-HMAC-SHA1-96"
        "0x17" => "RC4-HMAC"
        "0x18" => "RC4-HMAC-EXP"
      }
        fallback => "Audit Failures"
    }
    if [ticket_option] {
      ruby {
        code => "
            # decimal representations for the 32 bit binaries with check bit set
            # https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4769
            hash = {
              1073741824 => 'Forwardable',
              536870912 => 'Forwarded',
              268435456 => 'Proxiable',
              134217728 => 'Proxy',
              67108864 => 'Allow-postdate',
              33554432 => 'Postdated',
              16777216 => 'Invalid',
              8388608 => 'Renewable',
              4194304 => 'Initial',
              2097152 => 'Pre-authent',
              1048576 => 'Opt-hardware-auth',
              524288 => 'Transited-policy-checked',
              262144 => 'Ok-as-delegate',
              131072 => 'Request-anonymous',
              65536 => 'Name-canonicalize',
              32 => 'Disable-transited-check',
              16 => 'Renewable-ok',
              8 => 'Enc-tkt-in-skey',
              4 => 'Unused',
              2 => 'Renew',
              1 => 'Validate'
            }
            hexNum = event.get('ticket_option')
            num = hexNum.to_i(16)
            values_array = []
            hash.each do |bit_flag, flag_value|
              # bitwise multiplication on binary representation
              result = num & bit_flag
              if result == bit_flag
                values_array.append(flag_value)
              end
            end
            event.set('[service][type]', values_array)
        "
      }
    }
  }
  if [source][ip] {
    if [source][ip] =~ "::ffff:" {
      mutate {
        gsub => ["[source][ip]","::ffff:",""]
      }
    }
  }
  if [destination][ip] {
    if [destination][ip] =~ "::ffff:" {
      mutate {
        gsub => ["[destination][ip]","::ffff:",""]
      }
    }
  }

  # Copy any thing not mapped form "[winlog]" to [event][original] string  
  ruby {
    code => 'event.set("[event][original]", event.get("[winlog]").to_s)'
  }
  mutate {
    remove_field => [ "[winlog]", "ecs", "tmp", "type", "ticket_encrypt", "ticket_option", "[fields]", "failure_code" ]
  }

}
output {
  pipeline { send_to => [enrichments] }
}
