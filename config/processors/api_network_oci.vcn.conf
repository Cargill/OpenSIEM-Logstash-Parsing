# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  json {
    source => "message"
    target => "vcn"
  }
  mutate {
    add_field => { "[cloud][provider]" => "oci" }
    add_field => { "[event][module]" => "oci" }
    add_field => { "[event][dataset]" => "oci.vcn" }
    add_field => { "[log][source][hostname]" => "%{[vcn][oracle][tenantid]}"}
    #copy => { "message" => "[log][original]" }
  }
  mutate {
    rename => { "[vcn][data][action]" => "[event][action]" }
    rename => { "[vcn][data][bytesOut]" => "[network][bytes]" }
    rename => { "[vcn][data][destinationAddress]" => "[destination][ip]" }
    rename => { "[vcn][data][destinationPort]" => "[destination][port]" }
    rename => { "[vcn][data][protocolName]" => "[network][transport]" }
    rename => { "[vcn][data][protocol]" => "[network][iana_number]" }
    rename => { "[vcn][data][packets]" => "[network][packets]" }
    rename => { "[vcn][data][sourceAddress]" => "[source][ip]" }
    rename => { "[vcn][data][sourcePort]" => "[source][port]" }
    rename => { "[vcn][data][status]" => "[rule][description]" }
    rename => { "[vcn][oracle][ingestedtime]" => "[event][ingested]" }
    rename => { "[vcn][oracle][loggroupid]" => "[file][gid]" }
    rename => { "[vcn][specversion]" => "[rule][version]" }
    rename => { "[vcn][time]" => "[event][start]" }
    rename => { "[vcn][type]" => "[event][type]" }
    rename => { "[vcn][id]" => "[rule][uuid]" }
  }
  date {
    match => ["[event][start]" , "ISO8601" ]
    timezone => "GMT"
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_es"
  }
  if "_dateparsefailure_es" in [tags]  {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
     remove_field => ["[event][start]"]
    }
  }
  date {
    match => ["[event][ingested]" , "ISO8601" ] 
    timezone => "GMT"
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_ei"
  }
  if "_dateparsefailure_ei" in [tags]  {
    if ![log][original] {
      mutate {
        copy => { "message" => "[log][original]" }
      }
    }
    mutate {
     remove_field => ["[event][ingested]"]
    }
  }
  mutate {
    remove_field => [ "[vcn]" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}