# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}








filter {
  mutate {
    add_field => { "[event][module]" => "versa" }
    add_field => { "[event][dataset]" => "versa.sdwan_application" }
  }
  # 1. initial parsing

  # a) start by copying the original message to log.original.  
  # this needs to be done in two separate mutate steps in logstash > 8
  # also, on logstash 8 / ecs 8 , as soon as you touch the message the original event is copied to event.original, so log.original and event.original are redundant. 
  # both are kept for compatibility. this should be addressed by a later enrichment
  mutate {
    add_field => {"[log][original]" => "%{[message]}"}
  }
  mutate {
    lowercase => ["[message]"]
  }
  
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<[tmp][actual_msg]>.*$))|(^(?<[tmp][actual_msg]>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => ["pri"]
  }
  
  # b) we'll then pick the common fields and placing them under [tmp]. [tmp] is a temporary slot to work out the parsing
  dissect {
    id => "sdwan.app-dissect"
    tag_on_failure => "_dissect_error-sdwan.app-message"
    mapping => {
    "[tmp][actual_msg]" => "%{} %{[tmp][host]} %{[tmp][time]} %{[tmp][dataset]}, %{[tmp][rest_msg]}"
    }
  }

  # 2. convert the timestamp found in [tmp][time]. this is the time the log was generated as per versa
  date {
    id => "sdwan.app-date"
    tag_on_failure => "_dateparsefailure_error_sdwan.app-date"
    match => [ "[tmp][time]", "MMM dd yyyy HH:mm:ss",
    "MMM  d yyyy HH:mm:ss", "ISO8601" ]
  }

  # 3. extract the host provided in the beggining of the message, if it exists. move it to [observer][hostname]
  grok {
    id => "sdwan.app-grok"
    tag_on_failure => "_grokparsefailure_error_sdwan.app"
    match => { "[tmp][host]" => "{name=%{GREEDYDATA:[observer][hostname]}}" }
  }

    # remove domain from observer hostname if it exists
    mutate {
      gsub => [
          "[observer][hostname]", "(.*?)\.(.*)", "\1"
      ]
    }


  # 4. parse the sdwan module that generated the logs
  mutate {
    id => "sdwan.app-mutate-provider"
    tag_on_failure => "_mutate_error-sdwan.app-provider"
    add_field => { "[event][provider]" => "%{[[event][dataset]]}.%{[[tmp][dataset]]}"}
  }

  # 5. take the rest of the sdwan message, which is comprised of field=value split by comma. throw in [tmp][rest_msg]
  kv {
    id => "sdwan.app-kv-restmsg"
    tag_on_failure => "_kv_error-sdwan.app-restmsg"
    source => "[tmp][rest_msg]"
    field_split => "="
    field_split_pattern => ", "
    target => "[tmp][rest_msg]"
    # whitespace => "strict" #check later
  }

  # 6. event categorization

  # a. event kind (alert, event, metric, state, pipeline_error, signal). this filter translate all possible types of versa datasets into the kind field
  translate {
    id => "sdwan.app-translate-eventkind"
    source => "[tmp][dataset]"
    target => "[event][kind]"
    dictionary => {
    "alarmlog" => "alert"
    "accesslog" => "state"
    "sfwaccesslog" => "state"
    "denylog" => "state"
    "idplog" => "alert"
    "avlog" => "alert"
    "ipflog" => "alert"
    "urlflog" => "alert"
    "dosthreatlog" => "alert"
    "flowidlog" => "state"
    "flowmonlog" => "state"
    "flowmonhttplog" => "state"
    "monstatslog" => "metric"
    "bwmonlog" => "metric"
    "intfutillog" => "metric"
    "sdwanb2bslamlog" => "metric"
    "tcpappmonlog" => "metric"
    "systemloadlog" => "metric"
    "eventlog" => "event"
  }
    fallback => "event"
  }

  # 7. each event.dataset will require its own parsing since the contents of [tmp][rest_msg] will be specific to that dataset.

    # a. alarm logs

    if [tmp][dataset] == "alarmlog" {

      mutate {
        add_field => { "[event][reason]" => "unknown" }
      }

      mutate {
        rename => { "[tmp][rest_msg][appliancename]" => "[host][hostname]" } # the appliance sending logs is not the appliance where the event took place. this is provided by appliancename
        rename => { "[tmp][rest_msg][tenantname]" => "[organization][name]"}
        rename => { "[tmp][rest_msg][alarmtype]" => "[error][type]"}
        rename => { "[tmp][rest_msg][alarmseqno]" => "[event][sequence]"}
        rename => { "[tmp][rest_msg][alarmtext]" => "[error][message]"}
        rename => { "[tmp][rest_msg][serialnum]" => "[host][id]"}
        rename => { "[tmp][rest_msg][alarmeventtype]" => "[error][code]"}
        update => { "[event][reason]" => "%{[tmp][rest_msg][alarmcause]}"}
        tag_on_failure => "_mutate_error_alarmlog"
      }

      mutate {
        rename => {"[tags]" => "[tmp][original_tags]"}
      }


      mutate {
        add_tag => [
          "sdwan_alarm_class=%{[tmp][rest_msg][alarmclass]}", 
          "sdwan_alarm_kind=%{[tmp][rest_msg][alarmkind]}", 
          "sdwan_alarm_severity=%{[tmp][rest_msg][alarmseverity]}",
          "sdwan_alarm_key=%{[tmp][rest_msg][alarmkey]}",
          "sdwan_alarm_cause=%{[tmp][rest_msg][alarmcause]}",
          "sdwan_alarm_onwer=%{[tmp][rest_msg][alarmowner]}"
         ]
      }

      

      mutate {
        rename => {"[tags]" => "[labels][all]"}
      }
      mutate {
        rename => {"[tmp][original_tags]" => "[tags]"}
      }
        
      
      date {
        match => [ "[tmp][rest_msg][generatetime]", "UNIX" ]
        target => "[event][start]"
      }

      translate {
        source => "[event][action]"
        target => "[event][outcome]"
        dictionary => {
          "performancedegradeed" => "failure"
          "outofservice" => "failure"
          "thresholdcrossed" => "failure"
        }
        fallback => "unknown"
      }

      if [error][type] == "sdwan-datapath-sla-not-met"
      {
          dissect {
            mapping => {
            "[tmp][rest_msg][alarmkey]" => "%{[rule][name]}|%{[tmp][related_src]}|%{[observer][egress][interface][alias]}|%{[tmp][related_dst]}|%{[observer][egress][interface][alias]}|%{[tmp][cos]}"
            }
          }
          mutate {
            add_field => { "[related][hosts]" => "%{[tmp][related_src]}"}
            add_field => { "[source][domain]" => "%{[tmp][related_src]}"}
            add_field => { "[destination][domain]" => "%{[tmp][related_dst]}"}
            add_field => { "[related][hosts]" => "%{[tmp][related_dst]}"}
            add_field => { "[rule][category]" => "%{[error][type]}" }
            
          }

          mutate {update => {"[labels]" => "%{[labels]}&&&network_cos=%{[tmp][cos]}"}}

      }


      if [error][type] == "lef-collector-queue-utilization"
      {
        grok {
          match => { "[error][message]" => "%{GREEDYDATA:[tmp][lefcollectorqueueutilization]}queue %{NOTSPACE:[tmp][queue]} %{GREEDYDATA:[tmp][action]} \(%{WORD:[tmp][paramname]}: %{NOTSPACE:[tmp][paramvalue]}\)"  }
        }
        mutate {update => {"[labels]" => "%{[labels]}&&&sdwan_queue=%{[tmp][queue]"}}
        mutate {update => {"[labels]" => "%{[labels]}&&&%{[tmp][paramname]}=%{[tmp][paramvalue]"}}
        
      }

      if [error][type] == "cgnat-pool-utilization"
      {
        grok {
          match => { "[error][message]" => "%{GREEDYDATA}\(%{GREEDYDATA:[tmp][paramname]}: %{NOTSPACE:[tmp][paramvalue]}\)"}
        }
        mutate {
          update => {"[labels]" => "%{[labels]&&&%{[tmp][paramname]}=%{[tmp][paramvalue]}"}
          
        }
      }

    # rfc 5424 translation. see https://datatracker.ietf.org/doc/html/rfc5424#appendix-a.3 on why we do this
    translate {
      source => "[tmp][rest_msg][alarmseverity]"
      target => "[log][syslog][severity][name]"
      dictionary => {
        "warning" => "warning"
        "indeterminate" => "informational"
        "minor" => "notice"
        "major" => "error"
        "critical" => "critical"
        "cleared" => "informational"
      }
      fallback => "debug"
    }

    translate {
      source => "[tmp][rest_msg][alarmseverity]"
      target => "[log][syslog][severity][code]"
      dictionary => {
        "warning" => 4
        "indeterminate" => 6
        "minor" => 5
        "major" => 3
        "critical" => 2
        "cleared" => 6
      }
      fallback => 7
    }


    }

    # b. sdwanb2bslamlog

    if [tmp][dataset] == "sdwanb2bslamlog" {
      mutate {
        rename => { "[tmp][rest_msg][appliancename]" => "[host][hostname]" }
        rename => { "[tmp][rest_msg][tenantname]" => "[organization][name]"}
        add_field => { "[related][hosts]" => "%{[tmp][rest_msg][localsitename]}"}
        add_field => { "[related][hosts]" => "%{[tmp][rest_msg][remotesitename]}"}
        add_field => { "[observer][ingress][interface][name]" => "%{[tmp][rest_msg][remoteacccktname]}"}
        add_field => { "[observer][egress][interface][name]" => "%{[tmp][rest_msg][localacccktname]}"}
        add_field => { "[network][direction]" => "outbound"}
        update => { "[labels]" => "%{[labels]}&&&network_cos=%{[tmp][rest_msg][fwdclass]}"}

      }
      
    }

    # c. systemloadlogs

    if [tmp][dataset] == "systemloadlog" {
      mutate {
        rename => {"[tmp][rest_msg][cpuload]" => "[host][cpu][usage]"}
        rename => {"[tmp][rest_msg][memload]" => "[host][memory][usage]"} 
      }
    }

    # d. eventlogs

    if [tmp][dataset] == "eventlog" {

      mutate {
        rename => {"[tags]" => "[tmp][original_tags]"}
      }


      mutate {
        id => "sdwan.app-mutate-eventlog"
        tag_on_failure => "_mutate_error-sdwan.app-eventlog"
        rename => { "[tmp][rest_msg][appliancename]" => "[host][hostname]" }
        rename => { "[tmp][rest_msg][tenantname]" => "[organization][name]"}
        rename => { "[tmp][rest_msg][eventtype]" => "[error][type]"}
        rename => { "[tmp][rest_msg][rule]" => "[network][application]"}
        add_field => {"[related][hosts]" => "%{[tmp][rest_msg][localsitename]}"}
        add_field => {"[related][hosts]" => "%{[tmp][rest_msg][remotesitename]}"}
        add_field => { "[observer][ingress][interface][name]" => "%{[tmp][rest_msg][remoteacccktname]}"}
        add_field => { "[observer][egress][interface][name]" => "%{[tmp][rest_msg][localacccktname]}"}
        
      }

      
      mutate {
        add_tag => [
          "network_cos=%{[tmp][rest_msg][fwdclass]}"
         ]
      }

     

      date {
        match => [ "[tmp][rest_msg][generatetime]", "UNIX" ]
        target => "[event][start]"
      }

      if [error][type] == "sdwan-datapath-sla-not-met"
      {
          dissect {
            mapping => {
            "[tmp][rest_msg][alarmkey]" => "%{[network][application]}|%{[related][hosts]}|%{[observer][egress][interface][alias]}|%{[related][hosts]}|%{[observer][ingress][interface][name]}|%{[tmp][cos]}"
            }
          }

          mutate {
            add_tag => [
          "network_cos=%{[tmp][cos]}"
         ]
          }

      }

       mutate {
        rename => {"[tags]" => "[labels][all]"}
      }
      mutate {
        rename => {"[tmp][original_tags]" => "[tags]"}
      }
    }

    
  

    # ...
    # q. tcp app mon logs

  # 8. Handle specific error types

  # parse cpu threshold cross for cpu-utilization error-type
  if [error][type] == "cpu-utilization" {
    grok {
        match => { "[error][message]" => "%{NUMBER:[tmp][cpu_usage]}" }
      }
    mutate {
      add_field => {"[host][cpu][usage]" => "0.%{[tmp][cpu_usage]}"}
    }
    mutate {
        convert => {
          "[host][cpu][usage]" => "float"
        }
      }
  }

  # 9. convert fields (i.e. extract site, appliance type, etc)
  if [host.hostname] {
    if "" in [network][name] or ![network][name]  {
      mutate {
          add_field => {"[network][name]" => "%{[host][hostname]}" }
      }
    }


  mutate {
      gsub => [
          "[service][type]", "(.*)-([a-z]*)", "\2",
          "[network][name]", "([a-z]*)([0-9].*)", "\1"
      ]
  }

    mutate {
        gsub => [
            "[service][type]", "(.*)-([a-z]*)", "\2",
            "[network][name]", "([a-z]*)([0-9].*)", "\1"
        ]
    }
  }

  
  # 11. drop unwanted fields
  mutate{
    remove_field => ["rest_msg", "event_kind", "[tmp]"]
  }

}


output {
  pipeline { send_to => [enrichments] }
}
