# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "sap" }
    add_field => { "[event][dataset]" => "sap.onapsis" }
  }
  mutate {
    strip => ["message"]
  }
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }
  if [actual_msg] =~ '^*"event_id": "HeartBeat"*' or [actual_msg] !~ '^.*? {name=.*?} .*?$' {
    # drop {}
    mutate {
      add_field => { "[rule][category]" => "hearbeat" }
    }
  }
  dissect {
    mapping => {
      actual_msg => "%{[[log][date_time]]} {%{?data}} %{msg}"
    }
  }

  if [msg] =~ '^{"incident_type":' {
    json {
      source => "msg"
      target => "sap"
    }
    mutate {
      lowercase => [ "sap" ]
    }
    mutate {
      rename => {"[sap][event_type]" => "[event][type]"}
      rename => {"[sap][protocol]" => "[network][protocol]"}
      rename => {"[sap][event_id]" => "[event][id]" }
      rename => {"[sap][username]" => "[user][name]" }
      rename => {"[sap][erp_time]" => "[event][created]"}
      rename => {"[sap][incident_detail]" => "[event][original]"}
      rename => {"[sap][success]" => "[rule][ruleset]"}
      rename => {"[sap][sid]" => "[service][id]"}
      rename => {"[sap][reason]" => "[rule][description]"}
      rename => {"[sap][source_port]" => "[source][port]"}
      rename => {"[sap][user_type]"  => "[user_agent][original]"}
      rename => {"[sap][system_type]" => "[package][name]"}
      rename => {"[sap][asset_name]" => "[service][node][name]"}
      rename => {"[sap][incident_name]" =>  "[rule][name]"}
      rename => {"[sap][client]" => "[host][type]"}
      rename => {"[sap][sev]" => "[event][severity]"}
      rename => {"[sap][incident_type]" => "[process][name]"}
      rename => {"[sap][modified]" => "[user][id]"}
    }
    ruby {
      code => "
        alarm_name_list = []
        if event.get('[sap][alarm_profile_matches]').kind_of?(Array)
          event.get('[sap][alarm_profile_matches]').each do |item|
            if item['alarm_name'] != ''
              alarm_name_list.push(item['alarm_name'])
            end
          end
        end
        if !alarm_name_list.empty?
          event.set('[rule][group]', alarm_name_list)
        end
      "
      tag_on_exception => "ruby_block_exception"
    }
    
    # Some times src and erp_host are IP's and some times they are hostnames
    if [sap][src] =~ "\d+\.\d+\.\d+\.\d+" {
      mutate {
        rename => {"[sap][src]" => "[source][ip]"}
      }
    } else {
      mutate {
        rename => {"[sap][src]" => "[source][adress]"}
      }
    }
    if [sap][erp_host] =~ "\d+\.\d+\.\d+\.\d+" {
      mutate {
        rename => {"[sap][erp_host]" => "[destination][ip]" }
      }
    } else {
      mutate {
        rename => {"[sap][erp_host]" => "[destination][ip]" }
      }
    }
    date {
      match => [ "[event][created]", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss.SSS","MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss","ISO8601"]
      timezone => "GMT"
      locale => "en"
      target => "[event][created]"
    }
  } else {
      grok {
        match => { "msg" => '.*?dst=(?<destination_ip>.*?)\s.*?erpHost=(?<source_ip>.*?)\s.*?eventType=(?<event_type>.*?)\s.*?incidentDetail=(?<event_original>.*?)incidentName.*?protocol=(?<network_protocol>.*?)\s.*?reason=(?<rule_description>.*?)\ssourcePort=(?<source_port>.*?)\s.*?success=(?<rule_ruleset>.*?)\s.*?systemType=(?<package_name>.*?)\sterminalSource=(?<source_address>.*?)\s.*?usrName=(?<user_name>.*?)\s.*?userType=(?<user_agent_original>.*?)\salarmProfileMatches=.*?alarm_name\": \"(?<rule_name>.*?)",.*?eventId=(?<event_id>\w+)'}
        timeout_millis => 500
      }
    }
    mutate {
      remove_field => ["[sap]","[log][date_time]","msg","actual_msg"]
    }
    translate {
    source => "[event][type]"
    target => "[rule][category]"
    dictionary => {
      "UserLogin" => "Audit/Access Success"
      "UserUnlocked" => "Audit/Access Granted"
      "SystemChangeGlobalSettingUpdate" => "Audit/Other"
      "ClientSpecificSettingsAllowance" => "Audit/Other"
    }
    fallback => "Others"
  }
}
output {
  pipeline { send_to => [enrichments] }
}
