input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "a10" }
    add_field => { "event.dataset" => "a10.proxy" }
    add_field => { "observer.vendor" => "a10" }
    add_field => { "observer.product" => "a10 waf" }
    add_field => { "observer.type" => "waf" }
  }

### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" { 
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => "(\<(?<pri>\d+)\>( )?)?(?<rest_msg>.*?)$" }
    }
  } else {
  ### Filebeats udp or tcp in
    grok {
      tag_on_failure => "_parsefailure_header"
      match => { "message" => ".*?\{name=.*?\} (\<(?<pri>\d+)\>( )?)?(?<rest_msg>.*?)$" }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  
  if [rest_msg] == "a10" or [message] == "^A10" {
    # drop a10 health checks
    drop {}
  }

### message
  if [rest_msg] =~ "^.*?(CEF|cef):.*?$" {
    grok {
      match => { "rest_msg" => "^.*?rt=(?<event.created>.*?) src=(?<source.ip>.*?) spt=(?<source.port>.*?) dst=(?<destination.ip>.*?) dpt=(?<destination.port>.*?) dhost=(?<url.full>.*?) cs1=(?<rule.category>.*?) cs2=(?<event.id>.*?) act=(?<event.action>.*?) cs3=(?<rule.name>.*?) app=(?<url.scheme>.*?) requestmethod=(?<http.request.method>.*?) cn1=.*? request=(?<url.path>.*?) msg=(?<rule.description>.*?)$" }                            
      tag_on_failure => "_groktimeout_1"
    }
    if [url.domain] {
      mutate {
        add_field => { "url.full" => "%{url.scheme}://%{url.domain}/%{url.path}" }
      }
    }
  } else if [message] =~ "(r|R)esets (C|c)onnection" {
    dissect {
      add_field => { "agent.parse_rule" => "RULE 2" }
      tag_on_failure => "_dissectfailure_1"
      mapping => {
        "rest_msg" => "[%{?data}] %{network.transport} %{source.ip} > %{destination.ip}:%{destination.port} %{?data} %{event.action} %{?data}"
        
      }
    }
  } else if "_groktimeout_1" in [tags] or "_dissectfailure_1" in [tags] {
    mutate {
      add_field => { "agent.parse_rule" => "no rule match" }
      rename => { "rest_msg" => "log.original" }

    }
  } else {
      mutate {
      add_field => { "agent.parse_rule" => "no rule match" }
      rename => { "rest_msg" => "log.original" }

    }
  }
  # event.created = jan 06 2021 15:14:53
  date {
    match => ["event.created","MMM dd yyyy HH:mm:ss"]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  if "_dateparsefailure_ec" in [tags] {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
      remove_field => ["event.created"]
    }
  }
  mutate {
    remove_field => ["rest_msg", "pri", "cn1"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}