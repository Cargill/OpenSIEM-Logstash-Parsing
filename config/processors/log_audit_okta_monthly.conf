input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  # using plain codec with json filter to retain message field
  # message field is a json array with 1000(limit) events
  json {
    source => "message"
    target => "okta"
  }
  if [http_response_error] {
    # if okta api encountered error okta field won't be an array
    # so don't split and also don't remove message field
    mutate { remove_field => ["http_response_error"] }
  }
  else {
    # create 1000 events from one
    split {
      field => "okta"
    }
    mutate {
      rename => {"[okta][outcome][reason]" => "rule.description"}
      rename => {"[okta][outcome][result]" => "event.outcome"}
      rename => {"[okta][ipChain][0][ip]" => "source.ip"}
      rename => {"[okta][eventType]" => "event.action"}
      rename => {"[okta][displayMessage]" => "event.category"}
      rename => {"[okta][severity]" => "log.level"}
      rename => {"[okta][debugContext][debugData][requestUri]" => "url.path"}
      rename => {"[okta][client][userAgent][os]" => "user_agent.os.name"}
      rename => {"[okta][client][userAgent][rawUserAgent]" => "user_agent.original"}
      rename => {"[okta][securityContext][domain]" => "source.domain"}
      rename => {"[okta][transaction][type]" => "user.type"}
      rename => {"[okta][actor][alternateId]" => "source.user.email"}
      rename => {"[okta][target][alternateId]" => "destination.user.email"}
    }
    if [event.action] == "user.account.update_password" {
      # password change event
      mutate {
        rename => {"[logInfo.target[0].alternateId]" => "destination.user.email"}
      }
    }
    # convert okta json to string to recreate message field for this one event
    # original message field contains 1000 events, too big for elastic
    json_encode {
      source => "okta"
      target => "message"
    }
  }
  # always remove target field okta, in case of http_response_error it is same as the message
  mutate { remove_field => ["okta"] }

  # VAR_ENRICHMENTS
}
output {
# VAR_OUTPUT
}