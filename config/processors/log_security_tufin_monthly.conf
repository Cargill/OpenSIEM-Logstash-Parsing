input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "tufin" }
    add_field => { "event.dataset" => "tufin.fw.acl_manager" }
    add_field => { "observer.vendor" => "tufin" }
    add_field => { "observer.product" => "tufin" }
    add_field => { "observer.type" => "network_management" }
  }
  ### Header
  ### Logstash tcp or udp in
  if [agent.type] == "logstash" {
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "<%{pri}> %{rest_msg}"
      }
    }
  } else {
  ### Filebeats udp or tcp in
    dissect {
      tag_on_failure => "_dateparsefailure_header"
      mapping => {
        message => "%{?data} {%{?data}} <%{pri}> %{rest_msg}"
      }
    }
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
  }
  mutate{
    remove_field => ["pri","rest_msg"]
  }
  if [message] =~ "KERN:NOTE" {
    if [message] =~ "Automatic Policy Fetched:" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 1" }
      }
      dissect {
        mapping => {
          "message" => "%{log.date} {%{?data}} <%{event.severity_name}>%{subject}: revision %{revision.del} on %{destination.domain}; revision ticket ids:%{revision.ticket.id}, %{event.message}:"
        }
      }
    }
    else if [message] =~ " Policy" {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 2" }
      }
      dissect {
        mapping => {
          "message" => "%{log.date} {%{?data}} <%{event.severity_name}>%{subject}: %{version} %{revision} on %{destination.domain}; %{revision.del}: %{revision.ticket.id}, %{last} %{modified} %{by} %{user.id}, %{event.message}"
        }
      }
      if [user.id] =~ "SC" {
        mutate {
        add_field => { "agent.parse_rule" => "RULE 3" }
      }
        mutate {
          gsub => ["user.id" , "[SC (]", ""]
          gsub => ["user.id" , "[)]", ""]
        }
      }
    }
    else {
      mutate {
        add_field => { "agent.parse_rule" => "RULE 4" }
      }
      dissect {
        mapping => {
          "message" => "%{log.date} {%{?data}} <%{event.severity_name}>%{subject}, %{server.address} %{observer.name}(%{source.ip}): %{destination.host.name} %{destination.ip} (%{destination.port}): %{event.message}"
        }
      }
    }
    mutate {
      remove_field => ["log.date","month","day","year","time","server","last","modified","by","event.message","event.type","revision.del"]
    }


  }
  else if [message] =~ "USER:INFO" {
    mutate {
      add_field => { "agent.parse_rule" => "RULE 5" }
    }
    dissect {
      mapping => {
        "message" => "%{log.date} {%{?data}} <%{event.severity_name}>%{rt.month} %{rt.day} %{rt.time} %{server.host.name} %{subject}: %{event.message}"
      }
    }
    date {
      match => ["log.date" , "ISO8601"]
      target => "@timestamp"
    }
  }
  mutate {
    remove_field => ["log.date","month","day","year","time","rt.day","rt.month","rt.year","rt.time"]
  }
### classification Part ############
  translate {
    field => "[event.severity_name]"
    destination => "[rule.category]"
    dictionary => {
      "ERRR" => "Security Failed Activity"
      "INFO" => "Security Activity"
      "WARN" => "Security Other"
      "NOTE" => "Security Other"
    }
    fallback => "Others"
  }
}
output {
  pipeline { send_to => [enrichments] }
}