input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
      add_field => { "agent.parse_rule" => "no rules" }
            }
  ruby {
    code => '
    processed_logs = []
    messages_blocked = event.get("messagesBlocked")
    messages_blocked.each do |b_msg|
      threat_urls = []
      file_hashes = []
      b_msg["threatsInfoMap"].each do |threat|
        threat_urls.push(threat["threatUrl"])
      end

      b_msg["messageParts"].each do |message_part|
        file_hashes.push(message_part["md5"])
      end

      from_address = b_msg["fromAddress"].join(",")
      cc_addresses = b_msg["ccAddresses"].join(",")
      to_addresses = b_msg["toAddresses"].join(",")
      modules_run = b_msg["modulesRun"].join(",")
      policy_routes = b_msg["policyRoutes"].join(",")
      reply_to_address = b_msg["replyToAddress"].join(",")
      recipient = b_msg["recipient"].join(",")
      threat_urls = threat_urls.join(",")
      message_partmd5 = file_hashes.join(",")
      data = {
        "spamScore" => b_msg["spamScore"],
        "phishScore" => b_msg["phishScore"],
        "messageTime" => b_msg["messageTime"],
        "impostorScore" => b_msg["impostorScore"],
        "malwareScore" => b_msg["malwareScore"],
        "cluster" => b_msg["cluster"],
        "subject" => b_msg["subject"],
        "quarantineFolder" => b_msg["quarantineFolder"],
        "quarantineRule" => b_msg["quarantineRule"],
        "messageSize" => b_msg["messageSize"],
        "headerFrom" => b_msg["headerFrom"],
        "headerReplyTo" => b_msg["headerReplyTo"],
        "xmailer" => b_msg["xmailer"],
        "QID" => b_msg["QID"],
        "GUID" => b_msg["GUID"],
        "sender" => b_msg["sender"],
        "senderIP" => b_msg["senderIP"],
        "messageID" => b_msg["messageID"],
        "fromAddress" => from_address,
        "ccAddresses" => cc_addresses,
        "toAddresses" => to_addresses,
        "modulesRun" => modules_run,
        "policyRoutes" => policy_routes,
        "replyToAddress" => reply_to_address,
        "recipient" => recipient,
        "threatUrls" => threat_urls,
        "messagePartmd5" => message_partmd5
      }
      processed_logs.push(data)
    end
    event.set("[p_logs]", processed_logs)
    '
  }
}
output {
  pipeline { send_to => [enrichments] }
}