input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
      add_field => { "parse_rule_name" => "no rules" }
            }
  ruby {
    code => '
    processed_logs = []
    messages_blocked = event.get("messagesBlocked")
    messages_blocked.each do |b_msg|
      threat_urls = []
      file_hashes = []
      b_msg["threatsInfoMap"].each do |threat|
        threat_urls.push(threat["threatUrl"])
      end
      
      b_msg["messageParts"].each do |message_part|
        file_hashes.push(message_part["md5"])
      end
      
      from_address = b_msg["fromAddress"].join(",")
      cc_addresses = b_msg["ccAddresses"].join(",")
      to_addresses = b_msg["toAddresses"].join(",")
      modules_run = b_msg["modulesRun"].join(",")
      policy_routes = b_msg["policyRoutes"].join(",")
      reply_to_address = b_msg["replyToAddress"].join(",")
      recipient = b_msg["recipient"].join(",")
      threat_urls = threat_urls.join(",")
      message_partmd5 = file_hashes.join(",")
      data = {
        "spamScore" => b_msg["spamScore"],
        "phishScore" => b_msg["phishScore"],
        "messageTime" => b_msg["messageTime"],
        "impostorScore" => b_msg["impostorScore"],
        "malwareScore" => b_msg["malwareScore"],
        "cluster" => b_msg["cluster"],
        "subject" => b_msg["subject"],
        "quarantineFolder" => b_msg["quarantineFolder"],
        "quarantineRule" => b_msg["quarantineRule"],
        "messageSize" => b_msg["messageSize"],
        "headerFrom" => b_msg["headerFrom"],
        "headerReplyTo" => b_msg["headerReplyTo"],
        "xmailer" => b_msg["xmailer"],
        "QID" => b_msg["QID"],
        "GUID" => b_msg["GUID"],
        "sender" => b_msg["sender"],
        "senderIP" => b_msg["senderIP"],
        "messageID" => b_msg["messageID"],
        "fromAddress" => from_address,
        "ccAddresses" => cc_addresses,
        "toAddresses" => to_addresses,
        "modulesRun" => modules_run,
        "policyRoutes" => policy_routes,
        "replyToAddress" => reply_to_address,
        "recipient" => recipient,
        "threatUrls" => threat_urls,
        "messagePartmd5" => message_partmd5
      }
      processed_logs.push(data)
    end
    event.set("[p_logs]", processed_logs)
    '
  }

  ruby {
    code => '
    processed_logs = event.get("p_logs")
    path = "C:/Dev/output/tap_api_siem_pp.log"
    File.open(path, "a") do |f|
      processed_logs.each do |data_json|
        msg_str = "-:spamScore:-" + data_json["spamScore"].to_s + "-:phishScore:-" + data_json["phishScore"].to_s + "-:messageTime:-" + data_json["messageTime"].to_s + "-:impostorScore:-" + data_json["impostorScore"].to_s + "-:malwareScore:-" + data_json["malwareScore"].to_s + "-:cluster:-" + data_json["cluster"].to_s + "-:subject:-" + data_json["subject"].to_s + "-:quarantineFolder:-" + data_json["quarantineFolder"].to_s + "-:quarantineRule:-" + data_json["quarantineRule"].to_s + "-:policyRoutes:-" + data_json["policyRoutes"].to_s + "-:modulesRun:-" + data_json["modulesRun"].to_s + "-:messageSize:-" + data_json["messageSize"].to_s + "-:headerFrom:-" + data_json["headerFrom"].to_s + "-:headerReplyTo:-" + data_json["headerReplyTo"].to_s + "-:fromAddress:-" + data_json["fromAddress"].to_s + "-:ccAddresses:-" + data_json["ccAddresses"].to_s + "-:replyToAddress:-" + data_json["replyToAddress"].to_s + "-:toAddresses:-" + data_json["toAddresses"].to_s + "-:xmailer:-" + data_json["xmailer"].to_s + "-:QID:-" + data_json["QID"].to_s + "-:GUID:-" + data_json["GUID"].to_s + "-:sender:-" + data_json["sender"].to_s + "-:recipient:-" + data_json["recipient"].to_s + "-:senderIP:-" + data_json["senderIP"].to_s + "-:messageID:-" + data_json["messageID"].to_s + "-:threatUrls:-" + data_json["threatUrls"].to_s + "-:messagePartmd5:-" + data_json["messagePartmd5"].to_s
        f.write(msg_str + "\n")
      end
    end
    '
  }
  # VAR_ENRICHMENTS
}
output {
# VAR_OUTPUT
}