# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => {
      "[event][module]" => "versa"
      "[event][dataset]" => "versa_sdwan.os_ubuntu"
    }

  }
    
  # 1. start by copying the original message to [log][original].  we'll then pick the common fields and placing them under [tmp]. [tmp] is a temporary slot to work out the parsing

  mutate {
    id => "sdwan.os-mutate-logoriginal"
    tag_on_failure => "_mutate_error-sdwan.os-logoriginal"
  }
  mutate {
    lowercase => ["[message]"]
  }
  
  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "^(.*?{name=.*?}(\s)?)?(<(?<pri>\d+)>)?(\s)?(?<actual_msg>.*)$|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri" 
    remove_field => [ "pri" ]
  }

  # 2. OS log format is not consistent. The easiest way to parse seem to be identifying the log type first and then using common parsing that work for that given process

  if "com.tailf.ncs.alarmman.common.alarm" in [actual_msg]
  {
    mutate {
      add_field => { "[event][provider]" => "%{[[event][module]]}.alarmman"}
    }

    grok {
      tag_on_failure => "_grokparsefailure_header"
      match => { "actual_msg" => "%{GREEDYDATA:[[tmp][header]]} event %{GREEDYDATA:[[tmp][msg]]}.*\.alarm\[%{GREEDYDATA:[[tmp][alarm_msg]]}"}
      timeout_millis => 500
    }

    dissect {
      id => "sdwan.os-dissect-alarmman"
      tag_on_failure => "_dissect_error-sdwan.os-alarmman"
      mapping => {
        "[tmp][header]" => "%{[[tmp][date]]} %{+[[tmp][date]]} %{+[[tmp][date]]} %{[[observer][hostname]]} %{}}"
      }
    }

    mutate {
      rename => { "syslog_severity_code" => "[log][syslog][severity][code]"}
      rename => { "syslog_severity" => "[log][syslog][severity][name]"}
      rename => { "syslog_facility" => "[log][syslog][facility][name]"}
      rename => { "syslog_facility_name" => "[log][syslog][facility][code]"}
    }

    # parse the log
    mutate {
      strip => ["[tmp][alarm_msg]", "[tmp][process]"]
    }
    kv {
      field_split => ","
      target => "[tmp][details]"
      source => "[tmp][alarm_msg]"
    }

    # depending on the alarm/object, the field [tmp][details][device] will present either the appliance name or if the alarm comes straight from director, the value "vdirector". 
    # in the first case we need to inform the director is the observer
    # in the second case we need to inform the director is the host

    if [tmp][details][device] == "vdirector"
    {
      mutate {
        update => { "[tmp][details][device]" => "%{[[observer][hostname]]}"} #director is the host
      }
    }
   
    mutate {
      rename => { "[tmp][details][device]" => "[host][hostname]"}
      rename => { "[tmp][details][alarm-text]" => "[error][message]"}
      split => { "[tmp][details][type]" => ":"}
      add_field => { "[error][type]" => "%{[[tmp][details][type][1]]}"}
    }

    # if the alarm comes with a severity code, we'll trust that instead of that taken from syslog_pri, as versa strangely sends different severity on syslog_pri and inside the payload 
    if [tmp][details][severity] {
      mutate {
        remove_field => ["[log][syslog][severity][name]", "[log][syslog][severity][code]"]
      }
    }

    # rfc 5424 translation. see https://datatracker.ietf.org/doc/html/rfc5424#appendix-a.3 on why we do this
    translate {
      source => "[tmp][details][severity]"
      target => "[log][syslog][severity][name]"
      dictionary => {
        "warning" => "warning"
        "indeterminate" => "informational"
        "minor" => "notice"
        "major" => "error"
        "critical" => "critical"
        "cleared" => "informational"
      }
      fallback => "debug"
    }

    translate {
      source => "[tmp][details][severity]"
      target => "[log][syslog][severity][code]"
      dictionary => {
        "warning" => 4
        "indeterminate" => 6
        "minor" => 5
        "major" => 3
        "critical" => 2
        "cleared" => 6
      }
      fallback => 7
    }
  }
  else if [actual_msg] =~ "connection closed" {
    dissect {
      id => "sdwan.os-dissect-alarmman_2"
      tag_on_failure => "_dissectfailure_2"
      mapping => {
        "actual_msg" => "%{[[tmp][date]]} %{+[[tmp][date]]} %{+[[tmp][date]]} %{[[observer][hostname]]} %{}: %{[[event][action]]} by %{[[source][ip]]} %{}]}"
      }
    }
  }
  #this is a more generic parse but don't expect it to work on all kinds of messages
  else {
    dissect {
      id => "sdwan.os-dissect"
      tag_on_failure => "_dissect_error-sdwan.os-message"
      mapping => {
        "actual_msg" => "%{} %{[[tmp][host]]} %{[[tmp][rest_msg]]}"
      }
    }
  }
  mutate {
    remove_field => ["[tmp]", "actual_msg"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}
