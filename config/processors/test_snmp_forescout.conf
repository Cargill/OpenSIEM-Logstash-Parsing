# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier:  Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {

  dissect {
    tag_on_failure => "_dissectfailure"
    mapping => {
      "message" => "%{[data]} MESSAGE %{[[rest_msg]]}"
    }
  }

  mutate {
    gsub => [
       "rest_msg", "(.\d+ =)", " ="
      ]
  }

  kv {
    source => "rest_msg"
    target => "oid"
    field_split => ","
    value_split => "="
    ##trim_key => " "
    transform_key => "lowercase"
 }
  mutate {
    rename => { "[oid][forescout-mib::fstrapseverity ]" => "[severity]" }
    rename => { "[oid][forescout-mib::ctdeviceipaddress ]" => "[source][ip]" }
    rename => { "[oid][forescout-mib::fstrapid ]" => "[event][id]" }
    #rename => { "[oid][forescout-mib::fstraptime ]" => "[event][created]" }
    rename => { "[oid][forescout-mib::ctdeviceipaddresstype ]" => "[network][type]" }
    rename => { "[oid][forescout-mib::ctdeviceid ]" => "[agent][id]" }

  }


#   date {
#     match => ["[event][created]","UNIX"]
#     timezone => "UTC"
#     locale => "en"
#     target => "[event][created]"
#     tag_on_failure => "_dateparsefailure"
#   }
  mutate { remove_field => [ "rest_msg", "data", "oid" ] }

#   translate {
#     source => "[oid]"
#     target => "[OID_DESCRIPTION]"
#
#     dictionary => {
# 	  "fsGenId" => "Identifies forescout agent - counterACT / Management Server"
# 	  "fsGenVersion" => "The current installed version"
# 	  "fsGenLicenseExpirationDate" => "License expiration date represented as string"
# 	  "intrudBlockedNumber" => "Number of currently blocked addresses"
# 	  "intrudOffensiveNumber" => "Number of currently offensive addresses"
# 	  "haStatus" => "Indicates HA status"
# 	  "intrudBiteDetectionEventsTable" => "Table of last bite events"
# 	  "intrudBiteDetectionEventsEntry" => "A single detection event"
# 	  "biteEventIndex" => "The index of the referenced event"
# 	  "biteEventTime" => "Time of the detection event"
# 	  "biteEventSourceAddress" => "The address of the intruder"
# 	  "biteEventType" => "Attack method (e.g. port bite)"
# 	  "biteEventcounterACTOperation" => "The action took place in CounterACT as a respond to the detected event"
# 	  "biteEventcounterACTOperationDuration" => "Period in which CounterACT action will be effective"
# 	  "biteEventSpecificDetails" => "Event specific attributes (e,g. user name)"
# 	  "biteEventDestinationAddress" => "The address of the attacked host"
# 	  "biteEventDestinationPort" => "The port used by this event"
# 	  "biteEventProtocol" => "Protocol used (e.g. TCP, UDP, ICMP)"
# 	  "intrudScanDetectionEventsTable" => "Table of last scan events"
# 	  "intrudScanDetectionEventsEntry" => "A single detection event"
# 	  "scanEventIndex" => "The index of the referenced event"
# 	  "scanEventSourceAddress" => "The address of the intruder"
# 	  "scanEventTime" => "Time of the detection event"
# 	  "scanEventType" => "Scan method (e.g. port scan)"
# 	  "scanEventcounterACTOperation" => "The action took place in CounterACT as a respond to the detected event"
# 	  "scanEventcounterACTOperationDuration" => "Period in which CounterACT action will be effective"
# 	  "intrudProbeEventsTable" => "Table of last probe events"
# 	  "intrudProbeEventsEntry" => "A single detection event"
# 	  "probeEventIndex" => "The index of the referenced event"
# 	  "probeEventSourceAddress" => "The address of the intruder"
# 	  "probeEventTime" => "Time of the detection event"
# 	  "probeEventType" => "The used probe method (e.g. port scan)"
# 	  "probeEventScanIndex" => "The index of the attached detected scan event"
# 	  "probeEventDestinationAddress" => "The address of the attacked host"
# 	  "probeEventDestinationPort" => "The port used by this event"
# 	  "probeEventProtocol" => "Protocol used (e.g. TCP, UDP, ICMP)"
# 	  "probeEventSpecificDetails" => "Event specific attributes (e,g. user name)"
# 	  "intrudTotlaActiveNumber" => "Total number of  active hosts"
# 	  "intrudServiceAttackEventsTable" => "Table of last service scan detected events"
# 	  "intrudServiceAttackEventsEntry" => "A single service scan detection event"
# 	  "serviceAttackEventIndex" => "The index of the referenced event"
# 	  "serviceAttackEventDetectionTime" => "Time of the detection event"
# 	  "serviceAttackEventDetectionMode" => "Was the service scan detected by CounterACT or added manualy by the user"
# 	  "serviceAttackEventDestinationPort" => "The scanned port"
# 	  "serviceAttackEventDestinationProtocol" => "The scanned protocol"
# 	  "serviceAttackEventcounterACTOperation" => "The action took place in CounterACT as a respond to the detected event"
# 	  "serviceAttackEventcounterACTOperationDuration" => "Period in which CounterACT action will be effective"
# 	  "cactEngineLastStart" => "Last time engine was started"
# 	  "cactEngineLastShutdown" => "Last time engine was shutdown"
# 	  "cactCurrentPolicyName" => "The current defined policy name"
# 	  "cactCurrentBitePolicy" => "The current bite policy - how do CounterACT handle detected bite"
# 	  "cactHandeledPackets" => "Total number of packets being handeled by CounterACT"
# 	  "cactHandeledBytes" => "Total number of bytes being handeled by CounterACT"
# 	  "cactEngineCpuUsage" => "Precentage of engine's CPU usage"
# 	  "cactTotalCpuUsage" => "Total CPU usage at CounterACT's machine"
# 	  "cactTotalMemUsage" => "Amount of memory (in Kb) currently used at CounterACT machine"
# 	  "cactEngineMemUsage" => "Amount of memory (in Kb) currently used by the engine process"
# 	  "cactAcuMemUsage" => "Amount (in Kb) of memory used by the ACU process"
# 	  "cactPhysicalMem" => "The physical memory (in Kb) capacity at CounterACT's machine"
# 	  "cactSwapMem" => "The available swap memory (in Kb) capacity at CounterACT's machine"
# 	  "cactDiskPartitionTable" => "Disk partitions at CounterACT's machine"
# 	  "cactDiskPartitionEntry" => "Single partition"
# 	  "name" => "Name of the partition"
# 	  "totalSpace" => "Total amount of disk space (in Kb) under this partition"
# 	  "usedSpace" => "Amount of disk space (in Kb) currently used under this partition"
# 	  "cactLastWarning" => "Last system warning"
# 	  "cactPEParamRefresh" => "Packet engine parameter refresh"
# 	  "fsTrapSeverity" => "Assigned event severity. The following are the possible severity level assignments: Cleared (assigned value = 1): Indicates the clearing of one or more previously reported alarms. This alarm clears all alarms for this managed object that have the same Alarm type, Probable cause and Specific problems (if given). Indeterminate (assigned value = 2): Indicates that the severity level cannot be determined. Critical (assigned value = 3): Indicates that a service affecting condition has occurred and an immediate corrective action is required. Such a severity can be reported, for example, when a managed object becomes totally out of service and its capability must be restored. Major (assigned value = 4): Indicates that a service affecting condition has developed and an urgent corrective action is required. Such a severity can be reported, for example, when there is a severe degradation in the capability of the managed object and its full capability must be restored. Minor (assigned value = 5): Indicates the existence of a non-service affecting fault condition and that corrective action should be taken in order to prevent a more serious (for example, service affecting) fault. Such a severity can be reported, for example, when the detected alarm condition is not currently degrading the capacity of the managed object. Warning (assigned value = 6): Indicates the detection of a potential or impending service affecting fault, before any significant effects have been felt. Action should be taken to further diagnose (if necessary) and correct the problem in order to prevent it from becoming a more serious service affecting fault. Informational (assigned value = 7): Provided for informational purposes only. With the exception of the Informational severity, all the other severity levels are defined in the CCITT standard X.733."
# 	  "fsTrapTime" => "Date and time that the event occurred in the Appliance, provided in the format of the DateAndTime field, which is specified in the SNMPv2-Textual Conventions standard."
# 	  "fsTrapId" => "Unique identifier for each issued, trap notification. The ID is a counter based number representing a non-negative integer which monotonically increases until the assigned ID reaches its maximum value. When reaching its maximum, assigned value, the ID wraps around and begins increasing again from zero."
# 	  "fsFieldOid" => "The OID of the changed attribute. For example, if the CounterACT operator changed the ArcSight server name, this varbind contains the OID of the arcSightServerName."
# 	  "fsOldValue" => "The former value of the MIB attribute, that is, the attribute value before making the configuration change."
# 	  "fsNewValue" => "The updated value of the MIB attribute, that is, the attribute value after making the configuration change."
# 	  "orgRegisteredCounterACTTable" => "Current registered appliances"
# 	  "orgRegisteredCounterACTEntry" => "A single registered counterACT"
# 	  "counterACTId" => "counterACT identifier"
# 	  "counterACTAddress" => "counterACT's address"
# 	  "counterACTConnectionStatus" => "counterACT's connection to the CCU status"
# 	  "counterACTLastConnectionStatusTime" => "Last time connection status was changed"
# 	  "orgRegisteredCounterACT2Table" => "Current registered appliances"
# 	  "orgRegisteredCounterACT2Entry" => "A single registered counterACT"
# 	  "counterACT2Id" => "counterACT identifier"
# 	  "counterACT2Address" => "counterACT's address"
# 	  "counterACT2AddressType" => "counterACT's address"
# 	  "counterACT2ConnectionStatus" => "counterACT's connection to the CCU status"
# 	  "counterACT2LastConnectionStatusTime" => "Last time connection status was changed"
# 	  "ctDeviceTable" => "The table of CounterACT devices managed by this host. For Enterprise Manager (EM) this would return the list of all the managed appliances. For EM managed or standalone Appliance this table would contain a single entry representing the status of this host. Whenever the administrator adds or removes CounterACT devices from the EM a trap notification will be sent from the EM indicating that the configuration has changed."
# 	  "ctDeviceEntry" => "An entry containing a CounterACT device identification information and information describing its status."
# 	  "ctDeviceId" => "A unique identifier used to identify a managed CounterACT device. This internally defined value is commonly used with trap notifications providing consistent reference to the appliance throughout its life and for as long as it is associated with the EM."
# 	  "ctDeviceIpAddress" => "The IP address of the CounterACT Appliance or the Enterprise Manager(EM) as perceived by the EM."
# 	  "ctDeviceIpAddressType" => "Type of IP address, for example, an IPv4 address type or an IPv6 address type. A value that represents a type of CounterACT Internet address. This value would be ipv4(1) indicating that the IPv4 address as defined by the InetAddressIPv4 textual convention. ipv6(2) indicating an IPv6 address as defined by the InetAddressIPv6 textual convention."
# 	  "ctDeviceConnectionStatus" => "Indicates the status of the CounterACT device network connectivity. Possible states are: connectionOK (1) Indicate that the CounterACT device is up and ready. connectionFailed (2) possibly due to network outage or appliance down. connectionStatusUnknown (3) Indicates that the connection status cannot be verified at this time (for example if the CounterACT device is down or unreachable)."
# 	  "ctDeviceCpuUtilization" => "Percentage of CounterACT Appliance allocated CPU resources being used."
# 	  "ctDeviceMemorySwaps" => "Amount of memory swap (kbytes) consecutively occurring over the last minute. If this value exceeds the recommended threshold, the system may work slowly. To resolve this issue, add physical memory to the Appliance or replace the Appliance with a new Appliance that has more physical memory."
# 	  "ctDeviceNtpStatus" => "Indicates the status of the CounterACT device network time synchronization service; it is responsible for the monitoring the status of the synchronization process with the associated NTP server. Possible states are: ntpSyncOk (1) Indicates the CounterACT device synchronization process with the NTP server is OK. ntpSyncFailed (2) Indicates the CounterACT device failed to connect or failed to get valid response from the NTP server. ntpNotApplicable (3) Indicate that the NTP is not configured or that the NTP service is down. ntpStatusUnknown (4) Indicates that the CounterACT device is currently unreachable and that the current status cannot be verified."
# 	  "ctDeviceLicenseStatus" => "Indicates the status of the CounterACT device licensing service; it is responsible for the monitoring the status of the licensed modules and their usage. Possible states are: licenseValid(1) indicate that the current license status is OK and within the licensed capacity. licenseViolation(2) indicate that there are one or more license violations, for example services running or their capacity is exceeding the currently deployed licenses. licenseInvalid (3) indicates that the currently deployed license is expired or invalid. licenseStatusUnknown(4) indicates that the license status cannot be verified at this time (for example CounterACT device is down or unreachable)."
# 	  "ctDeviceHaStatus" => "Indicates the status of the High Availability (HA) service, which monitors the status of the active and the passive (standby) Appliances in a High Availability cluster. Possible states are: ok (1) Indicates that the standby CounterACT device is up, responsive and is in sync with the active CounterACT device. statusDegraded (2) Indicates that the standby CounterACT device is unreachable, down, or currently out of sync with the active CounterACT device. inMaintenanceMode(3) Indicates that the active or the standby CounterACT device is currently undergoing maintenance operations such as setup or upgrade. notSupported (4) Indicates that High Availability is not supported or configured on this Appliance. statusUnknown (5) Indicates that the High Availability status cannot be determined because the Enterprise Manager cannot connect to the Appliance."
# 	  "ctDeviceCurrentBandwidth" => "A measurement of bit-rate of consumed by the CounterACT device communication resources expressed in kilobytes bits per second; averaging over a consecutive sliding window (see user guide for more details) accounting for internal traffic between CounterACT devices and traffic handled by the packet engine. If this value exceeds the recommended threshold, the CounterACT device may work slowly. To resolve this issue, contact ForeScout support or sales representative."
# 	  "ctDeviceEngineStatus" => "Indicates the status of the packet engine service; it is responsible for the monitoring of network traffic and the discovery of network endpoints. Possible states are: engineReady (1) indicating that the packet engine is up and ready. engineInitlizing (2) indicates that  the packet engine is stating up and currently initializing. engineDown (3) Indicates that the  packet engine is currently down. engineStatusUnknown (4) indicates  that, at the present time, the packet engine status cannot be verified. For example, if the CounterACT device is down or unreachable. engineNotApplicable (5) indicates  that the packet engine is administratively disabled."
# 	  "ctNumberOfManagedEndpoints" => "The total number of endpoints currently being managed by the CounterACT Appliance."
# 	  "ctDevicePacketLoss" => "The percent of the received IP packets representing the packet loss, that is, the amount of packets that were not handled by the CounterACT Appliance over a sliding window of the last 30 seconds. When packet loss exceeds the recommended thresholds HTTP Redirection and Virtual Firewall may not work consistently. For the same source and destination, they might work in some cases and fail in others. To resolve, upgrade the Appliance or configure the channels to monitor less traffic."
# 	  "ctDeviceActionsOnHoldStatus" => "Indicates the CounterACT appliance pending actions queue status; it indicates if there are policy driven actions that were blocked because of the number of pending actions exceeded the administrator defined queue size. Possible states are: actionsOk (1) indicates that policy actions are within the administrator predefined threshold, and that there are no policy driven actions in a blocked state. actionsBlockedOnExceedingTreshold(2) Indicates that one or more policies have created a queue of actions that exceeds the administrator defined threshold. It is expected that the CounterACT operator would manually decide if he wishes to commit or delete the blocked actions in the queue.  actionsBlockStatusUnknown (3) Indicates that the queue status cannot be verify if the CounterACT has actions in pending state and if they are blocked or not at this time (for example if the CounterACT device is down or unreachable)"
# 	  "ctDeviceChannelStatus" => "Indicates the status of the CounterACT appliance packet engine monitored traffic (channel) status; it indicates if there are policy driven actions that were blocked because of the number of pending actions exceeded the administrator defined queue size. Possible states are: channelsOk (1) indicates that the CounterACT device is currently monitoring network traffic. channelsWarning (2) indicates that the CounterACT device has degraded ability to monitor network traffic and or temporarily limited in its ability to protect (for example with actions such as virtual firewall). channelsError (3) indicates that the CounterACT device is unable to monitor network traffic and or unable to protect (for example with actions like virtual firewall). channeStatuslsUnknown(4) indicates that the traffic mirroring status cannot be verified at this time (for example if the CounterACT device is down or unreachable). channelsStatusNotApplicable(5) indicates that the network interfaces configuration for traffic mirroring is not configured or administratively disabled."
# 	  "ctDeviceFailoverStatus" => "Indicates the status of the CounterACT device and whether or not it has experienced failover. Possible states are: ok(1) Indicates that the CounterACT device is running. failed(2) Indicates that the CounterACT device has failed to connect to the Enterprise Manager for the configured timeout period."
# 	  "ctDeviceFailoverConfig" => "Indicates the status of the Failover feature on the CounterACT Appliance. Possible states are: enabled(1) Indicates that Failover is enabled on the Appliance. disabled(2) Indicates that Failover is disabled on the Appliance."
# 	  "ctFailoverClusterName" => "Indicates the name of the Failover Cluster that the CounterACT device belongs to."
# 	  "ctNumberOfFailoverEndpoints" => "Indicates the number of endpoints handled by this CounterACT device due to a failover assignment."
# 	  "ctNumberOfFailoverExcessEndpoints" => "Indicates the number of endpoints that exceed the CounterACT device capacity as a result of a failover."
# 	  "dbType" => "The installed database type and version"
# 	  "dbWriteQuerySize" => "Number of insert / update statement waiting to be executed"
# 	  "cactLogPartitionName" => "The name of the disk partition in which ForeScout logs reside"
# 	  "cactDbPartitionName" => "The disk partition in which the database resides"
# 	  "cactFloodMode" => "Indicates whether CounterACT is being flooded"
# 	  "cactThreatLevel" => "CounterACT current threat level"
# 	  "counterACTStartTrap" => "CounterACT was started"
# 	  "counterACTShutDownTrap" => "CounterACT was stopped"
# 	  "policyChangeTrap" => "Current policy was modified"
# 	  "biteEventTrap" => "Bite attempt detection notification"
# 	  "counterACTConnectionStatusChange" => "CounterACT is connected to / disconnected from Management Server"
# 	  "counterACTFloodModeChange" => "CounterACT has detected start/end of flood attack"
# 	  "scanEventTrap" => "Scan attempt detection notification"
# 	  "probeEventTrap" => "Probe attempt detection notification"
# 	  "serviceAttackEventTrap" => "Service scan attempt detection notification"
# 	  "lastSystemWarningTrap" => "System warning notification"
# 	  "haStatusChange" => "Appliance changed its status mode"
# 	  "counterACTPEParamRefreshTrap" => "CounterACT was started"
# 	  "counterACT2ConnectionStatusChange" => "CounterACT is connected to / disconnected from Management Server"
# 	  "ctConfigurationChangedTrap" => "Trap notification indicating a configuration change. The trap attributes indicate the plugin name of service whose configuration has change. This trap also includes the property that changed as well as other information regarding the change, refer to the CounterACT documentation for more detailed specification."
# 	  "ctDeviceAddedTrapNotification" => "Trap notification sent whenever a CounterACT device is added to CounterACT Enterprise Manager (EM)."
# 	  "ctDeviceRemovedTrapNotification" => "Trap notification sent whenever a CounterACT device is removed from CounterACT Enterprise Manager (EM)."
# 	  "ctDeviceLicenseStatusChangedTrap" => "Trap notification sent any time the license status changes. By default the trap contains notification attributes like appliance IP address, and more (see user guide for details). Specifically this trap severity attribute depends on the license , its type, the deployed modules and their usage: licenseValid (1) severity is cleared(1), licenseViolation(2) severity is warning(6), licenseInvalid(3) severity is major(4), licenseStatusUnknown(4) severity is indeterminate(2)."
# 	  "ctDeviceNTPStatusChangedTrap" => "Trap notification sent any time the network time synchronization status changes. By default the trap contains notification attributes like appliance IP address, and more (see user guide for details). Specifically this trap severity attribute depends on the NTP server state and the synchronization process: ntpSyncOk (1) severity is cleared(1). ntpSyncFailed (2) severity is major(4). ntpNotApplicable(3) severity is indeterminate(2). ntpStatusUnknown (4) severity is indeterminate(2) indicating that the CounterACT device is currently unreachable and that the current NTP status cannot be verified."
# 	  "ctDeviceTrapHighCPUUtilization" => "Alarm notification sent indicating that the CPU utilization exceeded the administrator defined upper-bound threshold. This notification trap is generated when the CPU utilization has moved from normal state into high CPU utilization. It will be cleared by the ctDeviceTrapNormalCPUUtilization trap notification event when the CPU utilization is below the lower bound threshold set indicating that CPU utilization has returned to normal state."
# 	  "ctDeviceTrapNormalCPUUtilization" => "Alarm notification sent indicating that the CPU utilization has returned to normal state. It is sent if and only if the CPU utilization was previously in high CPU utilization state and since then the CPU utilization has dropped below the administrator defined lower threshold."
# 	  "ctDeviceHighBandwidthUtilizationTrap" => "Alarm notification sent indicating that the bandwidth utilization exceeded the administrator defined upper-bound threshold. This notification trap is generated when the bandwidth utilization has moved from normal state into high bandwidth utilization. Bandwidth utilization accounts for CounterACT internal communication and the packet engine monitored traffic. Exceeding the recommended threshold may impact the appliance performance. The high bandwidth utilization will be cleared by the ctDeviceTrapNormalBandwidthUtilization trap notification event when the bandwidth utilization is below the lower bound threshold; indicating that bandwidth utilization has returned to normal state."
# 	  "ctDeviceNormalBandwidthUtilizationTrap" => "Alarm notification sent indicating that the CounterACT device bandwidth utilization has returned to normal state. It is sent if and only if the bandwidth utilization was previously in high bandwidth utilization state and since then the bandwidth utilization has dropped below the administrator defined lower threshold."
# 	  "ctDeviceTrapHighMemorySwapping" => "Alarm notification sent indicating that the CounterACT device is exceeded the administrator defined upper-bound threshold. This notification trap is generated when the large volume of data is moved to or from the RAM and persistent store (disk) exceeding the administrator defined threshold (potentially slowing the CounterACT device). ctDeviceTrapNormalMemorySwapping trap notification event will be sent when the swapped data size will be lower than the administrator defined lower bound threshold indicating that the appliance returned to normal state."
# 	  "ctDeviceTrapNormalMemorySwapping" => "Alarm notification sent indicating that the appliance memory swap data size has returned to normal state. This event is sent if and only if the appliance was previously in high memory swap state and since then the swapped memory data size has dropped below the administrator defined lower threshold."
# 	  "ctDeviceTrapEndpointCapacityExceeded" => "Alarm notification indicating that the number of managed endpoints has exceeded the operator defined threshold; it is sent if and only if the appliance was within the capacity as specified by its license and the operator defined lower bound threshold. This trap notification is similar to other CounterACT notification containing attributes describing the appliance IP (and more, refer to the CounterACT documentation for more details) specifically this trap severity is set to warning (6) and is cleared by the ctDeviceTrapEndpointCapacityNormal event (sent when the number of managed endpoints drops below the lower bound administrator set threshold)."
# 	  "ctDeviceTrapEndpointCapacityNormal" => "Alarm notification sent indicating that the number of managed endpoint has returned to normal state (within the license and the administrator defined threshold). It is sent if and only if the number of managed endpoint capacity was previously in exceeding capacity state and since then the number of managed endpoints has dropped below the administrator defined lower threshold."
# 	  "ctDevicePacketEngineStatusChangedTrap" => "Trap notification sent any time the packet engine status changes. By default the trap contains notification attributes like appliance IP address, and more (see user guide for details). Specifically this trap severity attribute depends on the packet engine new state: engineReady (1)= cleared(1), engineInitlizing (2)=Indeterminate(2), engineDown(3)=critical(3), engineStatusUnknown (4)=indeterminate(2),engineNotApplicable (5)=warning(6)"
# 	  "ctDeviceTrapHighPacketLoss" => "Alarm notification sent indicating that the packet engine exceeded the administrator defined upper-bound threshold. This notification trap is generated when the packet engine exceeded the administrator defined threshold for number of packets dropped over the last 30 seconds and indicating that the packet engine has moved from normal state into high packet loss state. Potentially affecting HTTP redirect and Virtual Firewall, this state will be cleared by the ctDeviceTrapNormalPacketLoss trap notification event when the number of dropped packets will be lower than the administrator defined lower bound threshold indicating that the packet engine has returned to normal state."
# 	  "ctDeviceTrapNormalPacketLoss" => "Alarm notification sent indicating that the packet engine has returned to normal state. It is sent if and only if the packet engine status was previously in high packet loss state and since then the number of lost packets has dropped below the administrator defined lower threshold."
# 	  "ctDeviceHaStatusChangedTrap" => "Trap notification sent any time the High Availability (HA) status changes. By default the trap contains notification attributes like appliance IP address, and more (see user guide for details). Specifically this trap severity attribute depends on the active and or passive (standby node) state: haStatusOK (1) severity is cleared(1), haStandbyDisconnected (2) severity is major(4), haStandbySyncPending (3) severity is minor(5),  haInMaintenanceMode(4)severity is warning(6), haNotSupported(5) severity is  cleared(1), haStatusUnknown(6) severity is Indeterminate(2). See CounterACT documentation for more details."
# 	  "ctDeviceChannelStatusChangedTrap" => "Trap notification sent any time the CounterACT device packet engine monitored traffic (channel) status changes. By default the trap contains notification attributes like appliance IP address, and more (see user guide for details). Specifically this trap severity attribute depends on the status monitored channel traffic seen by the packet engine. The trap severity will vary depending on the channel state: channelsOk (1) severity is cleared(1). channelsWarning (2) severity is warning(6), hannelsError (3) severity is critical(6). channelsUnknown (4) severity is indeterminate(2) indicating that the traffic mirroring status cannot be verified at this time (for example if the CounterACT device is down or unreachable). channelsNotApplicable (5) severity is warning(6) indicating that the network interfaces configuration for traffic mirroring is not configured or administratively disabled."
# 	  "ctDeviceActionOnHoldStatusChanged" => "Trap notification sent any time the CounterACT device outgoing action queue state changes with respect to blocked actions in the queue. By default the trap contains notification attributes like appliance IP address, and more (see user guide for details). Specifically this trap severity attribute depends on the status of the queue and the existence of blocked actions. The trap severity will vary depending on the queue state: actionsOk(1) severity is cleared(1), actionsBlockedOnExceedingTreshold (2) severity is major(4), actionsBlockStatusUnknown (3) severity is indeterminate(2) indicating that the queue status cannot be verify if the CounterACT has actions in pending state and if they are blocked or not at this time (for example if the CounterACT device is down or unreachable)"
# 	  "ctDeviceConnectionStatusChangedTrap" => "Trap notification sent any time the CounterACT device connectivity status changes. By default the trap contains notification attributes like appliance IP address, and more (see user guide for details). Specifically that the trap severity depends on the ctDeviceConnectionStatus where connectionOK(1) severity is cleared(1). connectionDegraded (2) severity is indeterminate(2) possibly due to degraded network connection or appliance overload. connectionFailed(3) severity is critical(3) possibly due to network outage or appliance down. connectionStatusUnknown (4) severity is indeterminate(2). connectionStatusNotApplicable (5) severity is cleared(1)"
# 	  "ctDeviceFailoverStatusChangedTrap" => "This trap notification is sent when there is a change in the ctDeviceFailoverStatus MIB attribute."
# 	  "ctDeviceFailoverCapacityExceeded" => "This trap notification is sent when the CounterACT device has exceeded its configured capacity as a result of a failover."
# 	  "ctDeviceFailoverCapacityNormal" => "This trap notification is sent when the CounterACT device no longer exceeds its configured capacity."
# 	  "ctTestTrap" => "TEST - This trap is used for testing."
#     }
#
#   fallback => "Code not found"
#   }
#


}
output {
  pipeline { send_to => [enrichments] }
}