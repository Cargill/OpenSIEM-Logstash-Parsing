# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "[event][module]" => "ubiquiti" }
    add_field => { "[event][dataset]" => "ubiquiti.controller" }
  }

  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
    remove_field => [ "pri" ]
  }
  json {
    source => "message"
    target => "ubiq"
  }
  mutate {
    rename => {"[ubiq][log][offset]" => "[log][offset]"}
    rename => {"[ubiq][log][file][path]" => "[log][file][path]"}
    rename => {"[ubiq][message]" => "[event][description]"}
    rename => {"[ubiq][fields][observer][product]" => "[observer][product]"}
    rename => {"[ubiq][fields][observer][type]" => "[observer][type]"}
    rename => {"[ubiq][fields][observer][vendor]" => "[observer][vendor]"}
    rename => {"[ubiq][fields][organization][name]" => "[organization][name]"}
    rename => {"[ubiq][fields][event][module]" => "[event][provider]"}
    rename => {"[ubiq][fields][event][dataset]" => "[event][category]"}
    rename => {"[ubiq][host][name]" => "[host][hostname]"}
    rename => {"[ubiq][ecs][version]" => "[ecs][version]"}
  }

  dissect {
    tag_on_failure => "_dissectfailure"
    mapping => {
      "[event][description]" => "%{[[event][created]]} [%{[[service][name]]}] %{[[event][type]]}: %{[[rule][description]]}"
    }
  }
  if [rule][description] =~ "unsuccessful login attempts" {
    mutate {
      copy => { "[rule][description]" => "tmp" }
     }
    dissect {
      tag_on_failure => "_dissectfailure"
      mapping => {
        tmp => "penalizing %{[[user][name]]} %{?data}"
     }
    }
  }
  mutate {
    remove_field => ["ubiq", "tmp", "actual_msg"]
  }
  date {
    match => ["[event][created]","yyy.MM.dd-HH:mm:ss.SSS"]
    timezone => "GMT"
    locale => "en"
    target => "[event][created]"
    tag_on_failure => "_dateparsefailure_ec"
  }
  # Do not remove this, due to internal need.
  if [host][hostname] and ([host][hostname] != "" or [host][hostname][0] != "" ){
    mutate {
      copy => { "[host][hostname]" => "[host][name]" }
    }
  }
  mutate {
    rename => {"[host][name]" => "[log][source][hostname]"}
  }
}
output {
  pipeline { send_to => [enrichments] }
}
