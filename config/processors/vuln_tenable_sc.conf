# Copyright [2023] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  json {
    source => "message"
    target => "tmp"
  }
  mutate{
    add_field => { "[log][source][hostname]" => "%{[tmp][netbiosName]}" }
  }
  mutate {
    add_field => { 
      "[event][module]" => "tenable"
      "[event][dataset]" => "tenable.sc_api"
    }
    rename => {
      "[tmp][severity][id]" => "[event][severity]"
      "[tmp][severity][name]" => "[event][severity_name]"
      "[tmp][ip]" => "[host][ip]"
      "[tmp][uuid]" => "[event][id]"
      "[tmp][port]" => "[destination][port]"
      "[tmp][protocol]" => "[network][transport]"
      "[tmp][firstSeen]" => "[event][start]"
      "[tmp][lastSeen]" => "[event][end]"
      "[tmp][cve]" => "[vulnerability][id]"
      "[tmp][dnsName]" => "[host][name]"
      "[tmp][macAddress]" => "[host][mac]"
      "[tmp][netbiosName]" => "[host][hostname]"
      "[tmp][operatingSystem]" => "[host][os][full]"
      "[tmp][repository][dataFormat]" => "[network][type]"
      "[tmp][seeAlso]" => "[vulnerability][reference]"
      "[tmp][pluginInfo]" => "[vulnerability][description]"
      "[tmp][pluginName]" => "[service][name]"
      "[tmp][version]" => "[service][version]"
      "[tmp][synopsis]" => "[rule][description]"
      "[tmp][cvssV3BaseScore]" => "[vulnerability][score][base]"
      "[tmp][cvssV3TemporalScore]" => "[vulnerability][score][temporal]"
      "[tmp][vprScore]" => "[vulnerability][score][environmental]"
      "[tmp][repository][name]" => "[repository][name]"
      "[tmp][xref]" => "[rule][reference]"
      "[tmp][baseScore]" => "[event][risk_score]"
      "[tmp][cvssVector]" => "[vulnerability][classification]"
      "[tmp][temporalScore]" => "[event][risk_score_norm]"
      "[tmp][pluginID]" => "[service][id]"
      "[tmp][solution]" => "[event][recommendation]"
      "[tmp][pluginPubDate]" => "[file][created]"
      "[tmp][pluginModDate]" => "[file][mtime]"
      "[tmp][exploitFrameworks]" => "[threat][framework]"
      "[tmp][exploitEase]" => "[threat][list][attribute_tag]"
    }
  }
  json{
      source=> "[tmp][vprContext]"
      target=> "[tmp][vprContext]"
  }
  ruby {
    code => "      
      if event.get('[tmp][vprContext]').kind_of? Array
        event.get('[tmp][vprContext]').each do |item|
          if item['id'] == 'threat_intensity_last_28'
            event.set('[threat][list][severity_name]', item['value'])
          end
          if item['id'] == 'threat_sources_last_28'
            event.set('[threat][list][event_info]' ,item['value'])
          end
          if item['id'] == 'exploit_code_maturity'
            event.set('[threat][list][comment]' ,item['value'])
          end
        end
      end
    "
    tag_on_exception => "ruby_block_exception"
  }
  date {
    match => [ "[event][start]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_es"
  }
  date {
    match => [ "[event][end]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[event][end]"
    tag_on_failure => "_dateparsefailure_ee"
  }
  date {
    match => [ "[file][created]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[file][created]"
    tag_on_failure => "_dateparsefailure_ee"
  }
  date {
    match => [ "[file][mtime]", "UNIX" ]
    timezone => "GMT"
    locale => "en"
    target => "[file][mtime]"
    tag_on_failure => "_dateparsefailure_ee"
  }
  if [tmp][hasBeenMitigated] == "1" {
      mutate{
        add_tag => [ "mitigated" ]
      }
  }
  if [tmp][exploitAvailable] == "yes" {
      mutate{
        add_tag => [ "exploit_available" ]
      }
  }
  mutate {
    remove_field => [ "tmp" ]
  }
}
output {
  pipeline { send_to => [enrichments] }
}