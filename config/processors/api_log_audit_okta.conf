# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  # use plain codec with json filter to retain message field
  # message field is a json array with 1000(limit) events
  json {
    source => "message"
    target => "okta"
  }
  mutate {
    add_field => {"[log][source][hostname]" => "api_okta"}
    add_field => { "[event][module]" => "api_okta" }
    add_field => { "[event][dataset]" => "okta iam" }
    add_field => { "[observer][vendor]" => "okta" }
    add_field => { "[observer][product]" => "okta" }
    add_field => { "[observer][type]" => "okta" }
  }
  # if okta is an array, split
  if [okta][0] {
    split {
      field => "okta"
    }
    mutate {
      rename => {"[okta][outcome][reason]" => "[rule][description]"}
      rename => {"[okta][outcome][result]" => "[event][outcome]"}
      rename => {"[okta][ipChain][0][ip]" => "[source][ip]"}
      rename => {"[okta][eventType]" => "[event][action]"}
      rename => {"[okta][displayMessage]" => "[event][category]"}
      rename => {"[okta][severity]" => "[log][level]"}
      rename => {"[okta][debugContext][debugData][requestUri]" => "[url][path]"}
      rename => {"[okta][client][userAgent][os]" => "[user_agent][os][name]"}
      rename => {"[okta][client][userAgent][rawUserAgent]" => "[user_agent][original]"}
      rename => {"[okta][securityContext][domain]" => "[source][domain]"}
      # rename => {"[okta][transaction][type]" => "[user][type]"}
      rename => {"[okta][actor][alternateId]" => "[source][user][email]"}
      rename => {"[okta][target][alternateId]" => "[destination][user][email]"}
    }
    if [event][action] == "user.account.update_password" {
      # password change event
      mutate {
        rename => {"logInfo.target[0].alternateId" => "[destination][user][email]"}
      }
    }
    # convert okta json to string to recreate message field for this one event
    # original message field contains 1000 events, too big for elastic
    json_encode {
      source => "okta"
      target => "message"
    }
  }
  mutate { remove_field => ["okta"] }
}
output {
  pipeline { send_to => [enrichments] }
}
