# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
 input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}

filter {
  # Parsing the syslog pri header if present
  grok {
    match => { "message" => "^.*?<(?<pri>\d+)>(\s)?(?<actual_msg>.*)" }
  }
  syslog_pri {
  syslog_pri_field_name => "pri" 
  remove_field => [ "pri" ]
  }
  mutate {
    add_field => { "observer.vendor" => "tanium" }
    add_field => { "observer.product" => "tanium inventory" }
    add_field => { "observer.type" => "syslog" }
    add_field => { "event.module" => "tanium inventory" }
  }

  json {
    source => "actual_msg"
    skip_on_invalid_json => true
    target => "tanm"
  }
  mutate {
      rename => { "[tanm][Computer Name]" => "host.hostname" }
      rename => { "[tanm][Operating System]" => "host.os.name" }
      rename => { "[tanm][Operating System Install Date]" => "host.os.installation_date" }
      rename => { "[tanm][Computer Serial Number]" => "host.serial" }
      rename => { "[tanm][Domain Name]" => "host.domain" }
      rename => { "[tanm][MAC Address]" => "host.mac" }
      rename => { "[tanm][IPv4 Address]" => "host.ip" }
      rename => { "[tanm][Tanium Client IP Address]" => "source.ip" }
      rename => { "[tanm][Tanium Client NAT IP Address]" => "source.nat.ip" }
      rename => { "[tanm][Tanium Server Name]" => "observer.hostname" }
      rename => { "[tanm][Logged In Users]" => "host.logged_in_users" }
      rename => { "[tanm][Last Logged In User]" => "host.last_logged_in_user" }
      rename => { "[tanm][Time Zone]" => "host.timezone" }
      rename => { "[tanm][Manufacturer]" => "host.manufacturer"}
      rename => { "[tanm][Model]" => "host.model" }
      rename => { "[tanm][Intel Type]" => "event.dataset" }
  }
  # Do not remove this, due to internal need.
  if [host.hostname] and ([host.hostname] != "" or [host.hostname][0] != "" ){
    mutate {
      copy => { "host.hostname" => "host.name" }
    }
  }
  if [host.domain] and [host.domain] =~ "\[current result unavailable\]" {
    mutate {
        remove_field => ["host.domain"]
    }
  }
  if [host.last_logged_in_user] and [host.last_logged_in_user] =~ "\[current result unavailable\]" {
    mutate {
        remove_field => ["host.last_logged_in_user"]
    }
  }
  if [source.ip] and [source.ip] =~ "\[current result unavailable\]" {
    mutate {
        remove_field => ["source.ip"]
    }
  }
  if [source.nat.ip] and [source.nat.ip] =~ "\[current result unavailable\]" {
    mutate {
        remove_field => ["source.nat.ip"]
    }
  }
  if [host.ip] and [host.ip] =~ "\[current result unavailable\]" {
    mutate {
        remove_field => ["host.ip"]
    }
  }
  if [host.timezone] and [host.timezone] =~ "\[current result unavailable\]" {
    mutate {
        remove_field => ["host.timezone"]
    }
  }
  if [host.logged_in_users] and [host.logged_in_users] =~ "\[current result unavailable\]" {
    mutate {
        remove_field => ["host.logged_in_users"]
    }
  }  
  date {
      match => ["host.os.installation_date", "M/d/yyyy"]
      timezone => "GMT"
      locale => "en"
      target => "host.os.installation_date"
      tag_on_failure => "_dateparsefailure_hoid"
  }
  if "_dateparsefailure_hoid" in [tags]  {
    if ![log.original] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["host.os.installation_date"]
    }
  }
  mutate {
    remove_field => ["rest_msg","actual_msg", tanm]
  }

}
output {
  pipeline { send_to => [enrichments] }
}

