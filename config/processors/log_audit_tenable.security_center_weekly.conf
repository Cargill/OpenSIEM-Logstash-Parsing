input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "tenable.security_center" }
    add_field => { "event.dataset" => "vulnerability.scanner.audit_logs" }
    add_field => { "observer.vendor" => "tenable" }
    add_field => { "observer.product" => "security_center" }
    add_field => { "observer.type" => "vulnerability.scanner" }
  }
  grok {
    match => {
      "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname}\s\<(?<pri>.*?)\>.*\[%{WORD:product}\]\:\s%{WORD:day},\s%{GREEDYDATA:date}\s-%{INT:value}\|%{WORD:status}\|%{WORD:infotype}\|%{WORD:messagetype}\|%{WORD:errorlevel}\|%{GREEDYDATA:finalmessage}"
    }
  }
  mutate {
    rename => {"syslog_hostname" => "host.hostname"}
    rename => {"date" => "event.created"}
    rename => {"status" => "event.action"}
    rename => {"messagetype" => "error.code"}
    rename => {"infotype" => "error.id"}
    rename => {"finalmessage" => "event.outcome"}
    rename => {"product" => "observer.product"}
  }
  date {
    match => [ "event.created", "dd MMM yyyy HH:mm:ss", "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }

  if "_dateparsefailure_ec" in [tags]  {
    if ![log.orignal] {
      mutate {
        copy => { "message" => "log.original" }
      }
    }
    mutate {
     remove_field => ["event.created"]
    }
  }
}
output {
  pipeline { send_to => [enrichments] }
}