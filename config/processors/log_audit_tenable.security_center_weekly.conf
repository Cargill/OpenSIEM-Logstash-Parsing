input {
  pipeline {
    address => VAR_PIPELINE_NAME
  }
}
filter {
  mutate {
    add_field => { "event.module" => "tenable.security_center" }
    add_field => { "event.dataset" => "vulnerability.scanner.audit_logs" }
    add_field => { "observer.vendor" => "tenable" }
    add_field => { "observer.type" => "vulnerability.scanner" }
    # observer.product is parsed from the log
  }
  grok {
    match => {
      "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname}\s(?<technology_name>.*?):.*\[%{WORD:product}\]\:\s%{WORD:day},\s%{GREEDYDATA:date}\s-%{INT:value}\|%{WORD:status}\|%{WORD:infotype}\|%{WORD:messagetype}\|%{WORD:errorlevel}\|%{GREEDYDATA:finalmessage}"
    }
  }
  mutate {
    rename => {"syslog_hostname" => "host.hostname"}
    rename => {"product" => "observer.product"} #securitycenter
    rename => {"status" => "event.action"} #nightlycleanup
    rename => {"infotype" => "error.id"} #message
    rename => {"messagetype" => "error.code"} #critical
    rename => {"errorlevel" => "error.type"} #0
    rename => {"finalmessage" => "event.outcome"}
  }
  date {
    match => [ "date", "dd MMM yyyy HH:mm:ss", "ISO8601" ]
    timezone => "GMT"
    locale => "en"
    target => "event.created"
    tag_on_failure => "_dateparsefailure_ec"
  }
  mutate {
    remove_field => ["syslog_timestamp", "technology_name", "day", "value", "date"]
  }
}
output {
  pipeline { send_to => [enrichments] }
}