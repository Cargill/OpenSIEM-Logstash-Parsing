# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
# 1. Removes all url.x fields, except for [url][full]
# 2. Copies [url][full] to [url][original]
# 3. Lowercase [url][full]
# 4. If [url][full] then parses [url][full] into subfields
# 5. if [url][domain] processes [url][domain] with Top Level Domain (TLD) filter
# 6. Rename tld fields to ECS fields
# 7. Remove the remaining TLD fields not ECS
filter {
  if "disable_url_enrichment" in [tags] or "disable_code_reduction" in [tags] or "disable_enrichments" in [tags] {
    mutate {
      remove_tag => ["disable_url_enrichment"]
    }
  } else {
    ### URL enrichment
    if [url][original] and [url][original] != "" and ![url][full] {
      mutate {
        copy => { "[url][full]" => "[url][original]" }
      }
    }
    if [url][full] and [url][full] != "" {
      mutate {
        remove_field => [ "[url][domain]", "[url][extension]", "[url][fragment]", "[url][full][text]", "[url][original][text]", "[url][password]", "[url][path]", "[url][port]", "[url][query]", "[url][registered_domain]", "[url][scheme]", "[url][top_level_domain]", "[url][username]" ]
        tag_on_failure => "_mutate_error_url_en_1"
      }
      ### mutate order of operation has lowercase before copy
      if ![url][original] {
        mutate {
          copy => { "[url][full]" => "[url][original]" }
          tag_on_failure => "_mutate_error_url_en_2"
        }
      }
      mutate {
        lowercase => [ "[url][full]" ]
      }
      grok {
        match => {"[url][full]" => "^((?<[url][scheme]>.*?)://)?((?<[user][name]>.*?):(?<[user][password]>.*?)@)?(?<[url][domain]>\w+((\.\w+){1,})|\d+\.\d+\.\d+\.\d+)(:(?<[url][port]>\d+))?(/|$)((?<[url][path]>.*?))?(\?(?<[url][query]>.*?))?(\#(?<[url][fragment]>.*?))?$" }
        timeout_millis => 500
        tag_on_failure => "_groktimeout_url_en_1"
      }
      if [url][path] and [url][path] != "" and [url][path] =~ "^.*?\..*?$" {
        grok {
          match => {"[url][path]" => "^(.*)?\.(?<[url][extension]>.*?)$"}
          timeout_millis => 500
          tag_on_failure => "_groktimeout_url_en_2"
        }
      }
      # add tld enrichment
      # if [url][domain] exists parse it for top level domain
      # tld filter produces object like
      # {trd=clients4, domain=google.com, subdomain=clients4.google.com, sld=google, tld=com}
      # mutate the tld and domain fields to [url][top_level_domain] and [url][registered_domain] respectively
      ### Disabling tld enrichment for now as the logstash tld filter have issue
      # https://github.com/logstash-plugins/logstash-filter-tld/issues/8
      tld {
        source => "[url][domain]"
        target => "tmp"
      }
      mutate {
        convert => { "[url][port]" => "integer" }
        rename => {      
          "[tmp][domain]" => "[url][registered_domain]"
          "[tmp][sld]" => "[url][subdomain]"
          "[tmp][tld]" => "[url][top_level_domain]"
        }
        "remove_field" => [ "tmp" ]
      }
    }
  }
}
