# Copyright [2021] [Cargill, Incorporated.] 
# SPDX-License-Identifier: Apache-2.0
# mitre attack id lookups note this current as of 2/26/2021 - does not include depricated id's 
filter {
if "disable_lookups" in [tags] or "disable_mitre_lookup_enrichment" in [tags] or "disable_enrichments" in [tags] {
    mutate {
      remove_tag => ["disable_mitre_lookup_enrichment"]
    }
  } else {
  ### MITRE tactic
    if [threat][tactic][id][0] or [threat][tactic][id] != "" { 
      if ![threat][tactic][id][0] and [threat][tactic][id] !~ ".*?" {
        mutate {
          remove_field => ["[threat][tactic][id]"]
        }
      } else {
        ruby {
          code => 'event.set("[threat][tactic][id]", event.get("[threat][tactic][id]").uniq)'
        }
      }
      translate {
        iterate_on => "[threat][tactic][id]"
        field => "[threat][tactic][id]"
        dictionary_path => "${LOGSTASH_HOME}/config/mitre_tactics.json"
        destination => "[threat][tactic][tmp]"
        override => "true"
        # Disable refresh from disk because when we update the dictionary file, we restart logstash explicitly
        refresh_interval => 0
        fallback => "[threat][tactic][name]: new/deprecated mitre tactic; [threat][tactic][reference]:  none;"
      }
      kv {
        source => "[threat][tactic][tmp]"
        allow_duplicate_values => false
        tag_on_failure => "_kv_filter_error_tactic"
        value_split => ":"
        field_split => ";"
      }
      mutate {
        lowercase => [ "[threat][tactic][name]" ]
        remove_field => [ "[threat][tactic][tmp]" ]
      }
    }
  ### MITRE technique
    if [threat][technique][id][0] or [threat][technique][id] != "" { 
      if ![threat][technique][id][0] and [threat][technique][id] !~ ".*?" {
        mutate {
          remove_field => ["[threat][technique][id]"]
        }
      } else {
        ruby {
          code => 'event.set("[threat][technique][id]", event.get("[threat][technique][id]").uniq)'
        }
      }
      translate {
        iterate_on => "[threat][technique][id]"
        field => "[threat][technique][id]"
        dictionary_path => "${LOGSTASH_HOME}/config/mitre_technique.json"
        destination => "[threat][technique][tmp]"
        override => "true"
        # Disable refresh from disk because when we update the dictionary file, we restart logstash explicitly
        refresh_interval => 0
        fallback => "[threat][technique][name]: new/deprecated mitre technique; [threat][technique][reference]:  none;"
      }
      kv {
        source => "[threat][technique][tmp]"
        allow_duplicate_values => false
        tag_on_failure => "_kv_filter_error_technique"
        value_split => ":"
        field_split => ";"
      }
      mutate {
        lowercase => [ "[threat][technique][name]" ]
        remove_field => [ "[threat][technique][tmp]" ]
      }
    }
  ### MITRE technique.subtechnique
    if [threat][technique][subtechnique][id][0] or [threat][technique][subtechnique][id] != "" { 
      if ![threat][technique][subtechnique][id][0] and [threat][technique][subtechnique][id] !~ ".*?" {
        mutate {
          remove_field => ["[threat][technique][subtechnique][id]"]
        }
      } else {
        ruby {
          code => 'event.set("[threat][technique][subtechnique][id]", event.get("[threat][technique][subtechnique][id]").uniq)'
        }
      }
      translate {
        iterate_on => "[threat][technique][subtechnique][id]"
        field => "[threat][technique][subtechnique][id]"
        dictionary_path => "${LOGSTASH_HOME}/config/mitre_subtechnique.json"
        destination => "[threat][technique][subtechnique][tmp]"
        override => "true"
        # Disable refresh from disk because when we update the dictionary file, we restart logstash explicitly
        refresh_interval => 0
        fallback => "[threat][technique][subtechnique][name]: new/deprecated mitre subtechnique; [technique][subtechnique][reference]:  none;"
      }
      kv {
        source => "[threat][technique][subtechnique][tmp]"
        allow_duplicate_values => false
        tag_on_failure => "_kv_subtechnique"
        value_split => ":"
        field_split => ";"
      }
      mutate {
        lowercase => [ "[threat][technique][subtechnique][name]" ]
        remove_field => [ "[threat][technique][subtechnique][tmp]" ]
      }
    }
  }
}
