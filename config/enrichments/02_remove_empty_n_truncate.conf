# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
# remove empty fields and truncate all fields to 1024 bytes
filter {
  if "disable_remove_empty_n_truncate_enrichment" in [tags] or "disable_data_quality" in [tags] or "disable_enrichments" in [tags] {
    mutate {
      remove_tag => ["disable_remove_empty_n_truncate_enrichment"]
    }
  } else {
    ruby {
      code => '
        truncate_exclude_list = [
          "message",
          "client.as.organization.name.text",
          "client.user.full_name.text",
          "client.user.name.text",
          "destination.as.organization.name.text",
          "destination.user.full_name.text",
          "destination.user.name.text",
          "destination.user.email",
          "error.message",
          "error.stack_trace.text",
          "file.path.text",
          "file.target_path.text",
          "host.os.full.text",
          "host.os.name.text",
          "host.user.full_name.text",
          "host.user.name.text",
          "http.request.body.content.text",
          "http.response.body.content.text",
          "log.original",
          "observer.os.full.text",
          "observer.os.name.text",
          "organization.name.text",
          "process.command_line.text",
          "process.executable.text",
          "process.name.text",
          "process.parent.command_line.text",
          "process.parent.executable.text",
          "process.parent.name.text",
          "process.parent.title.text",
          "process.parent.working_directory.text",
          "process.title.text",
          "process.working_directory.text",
          "server.as.organization.name.text",
          "server.user.full_name.text",
          "server.user.name.text",
          "source.as.organization.name.text",
          "source.user.full_name.text",
          "source.user.name.text",
          "threat.technique.name.text",
          "url.full.text",
          "url.original.text",
          "user.full_name.text",
          "user.name.text",
          "user_agent.original.text",
          "user_agent.os.full.text",
          "user_agent.os.name.text",
          "vulnerability.description.text",
        ]
        # defining it once
        invalid_value_list = ["-", "null", "nil", "n/a", "\'\'"]

        def walk_hash(parent, path, hash)
          path << parent if parent
          hash.each do |key, value|
            walk_hash(key, path, value) if value.is_a?(Hash)
            @paths << (path + [key]).map {|p| "[" + p + "]" }.join("")
          end
          path.pop
        end

        @paths = []
        walk_hash(nil, [], event.to_hash)
        @paths.each do |k|
          v = event.get(k)
          if v.nil? || (v.respond_to?(:empty?) && v.empty?)
            event.remove(k)
          else
            if v.is_a? String
              stripd_val = v.to_s.strip.downcase
              # remove emtpy field or if its value is invalid or if its like %{field}
              # re.match? is faster
              if stripd_val.empty? or invalid_value_list.include?stripd_val or /^%{[a-z\-_.]+}$/.match?(stripd_val)
                event.remove(k)
              else
                if truncate_exclude_list.include?k
                  next
                end
                # event.set(k, v.to_s[0, 1023])
              end
            else
              # check if its an array
              if v.kind_of?(Array)
                # copy valid values only to the enriched array
                enrc_arr = []
                v.each do |item|
                  if item.is_a? String
                    stripd_val = item.to_s.strip.downcase
                    if !(stripd_val.empty? or invalid_value_list.include?stripd_val or /^%{[a-z\-_.]+}$/.match?(stripd_val))
                      if !truncate_exclude_list.include?k
                        enrc_arr.append(item.to_s[0,1023])
                      else
                        enrc_arr.append(item.to_s)
                      end
                    end
                  else
                    enrc_arr.append(item)
                  end
                end
                event.set(k, enrc_arr)
              end
            end
          end
        end
      '
      tag_on_exception => "enrichment_remove_empty_ruby_exception"
    }
  }
}
