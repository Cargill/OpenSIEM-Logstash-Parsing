# remove empty fields and truncate all fields to 1024 bytes
filter {
  if "disable_ecs_data_type_enrichment" in [tags] or "disable_data_quality" in [tags] or "disable_enrichments" in [tags] {
    mutate {
      remove_tag => ["disable_ecs_data_type_enrichment"]
    }
  } else {
    # Remove custom shipper topic name
    mutate {
      remove_field => ["log_source_type"]
    }
    # remove fields which are not convertible to ecs datatypes
    ruby {
      code => '
        long_fields = ["client.bytes",
                        "client.packets",
                        "client.port",
                        "destination.bytes",
                        "destination.packets",
                        "destination.port",
                        "event.duration",
                        "event.severity",
                        "event.code",
                        "network.bytes",
                        "network.packets",
                        "process.parent.pid",
                        "process.pid",
                        "server.bytes",
                        "server.packets",
                        "server.port",
                        "source.bytes",
                        "source.packets",
                        "source.port",
                        "client.as.number",
                        "client.nat.port",
                        "destination.as.number",
                        "destination.nat.port",
                        "dns.answers.ttl",
                        "event.sequence",
                        "file.size",
                        "host.uptime",
                        "http.request.body.bytes",
                        "http.request.bytes",
                        "http.response.body.bytes",
                        "http.response.bytes",
                        "http.response.status_code",
                        "log.syslog.facility.code",
                        "log.syslog.priority",
                        "log.syslog.severity.code",
                        "package.size",
                        "process.args_count",
                        "process.exit_code",
                        "process.parent.args_count",
                        "process.parent.exit_code",
                        "process.parent.pgid",
                        "process.parent.ppid",
                        "process.parent.thread.id",
                        "process.parent.uptime",
                        "process.pgid",
                        "process.ppid",
                        "process.thread.id",
                        "process.uptime",
                        "server.as.number",
                        "server.nat.port",
                        "source.as.number",
                        "source.nat.port",
                        "url.port"]

        float_fields = ["event.risk_score",
                      "event.risk_score_norm",
                      "vulnerability.score.base",
                      "vulnerability.score.environmental",
                      "vulnerability.score.temporal"]

        float_fields.each do |k|
          field_value = event.get(k)
          if field_value != nil
            begin
              converted_v = Float(field_value)
              event.set(k, converted_v)
            rescue
              event.remove(k)
            end
          end
        end

        long_fields.each do |k|
          field_value = event.get(k)
          if field_value != nil
            begin
              converted_v = Integer(field_value)
              event.set(k, converted_v)
            rescue
              event.remove(k)
            end
          end
        end
      '
      tag_on_exception => "enrichment_data_type_ruby_exception"
    }
    ### Validate IP data types
    mutate {
      strip => ["client.ip", "client.nat.ip", "destination.ip", "destination.nat.ip", "dns.resolved_ip", "host.ip", "network.forwarded_ip", "observer.ip", "server.ip", "server.nat.ip", "source.ip", "source.nat.ip"]
    }
    # log.source.ip
    if [log.source.ip] and [log.source.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
      add_tag => [ "invalid ip format log.source.ip" ]
      }
      if ![log.source.hostname] {
        mutate {
          rename => { "log.source.ip" => "log.source.hostname" }
        }
      } else {
        mutate {
          remove_field => ["log.source.ip"]
        }
      }
    }

    # source.ip	source.address
    if [source.ip] and [source.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        add_tag => [ "invalid ip format source.ip" ]
      }
      if ![source.address] {
        mutate {
            rename => { "source.ip" => "source.address" }
        }
      } else {
        mutate {
          remove_field => ["source.ip"]
        }
      }
    }
    # client.ip	client.address
    if [client.ip] and [client.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        add_tag => [ "invalid ip format client.ip" ]
      }
      if ![client.address] {
        mutate {
            rename => { "client.ip" => "client.address" }
        }
      } else {
        mutate {
          remove_field => ["client.ip"]
        }
      }
    }
    # client.nat.ip	drop field
    if [client.nat.ip] and [client.nat.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        remove_field => ["client.nat.ip"]
        add_tag => [ "invalid ip format client.nat.ip" ]
      }
    }
    # destination.ip	destination.address
    if [destination.ip] and [destination.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        add_tag => [ "invalid ip format destination.ip" ]
      }
      if ![destination.address] {
        mutate {
            rename => { "destination.ip" => "destination.address" }
        }
      } else {
        mutate {
          remove_field => ["destination.ip"]
        }
      }
    }
    # destination.nat.ip	drop field
    if [destination.nat.ip] and [destination.nat.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        remove_field => ["destination.nat.ip"]
        add_tag => [ "invalid ip format destination.nat.ip" ]
      }
    }
    # dns.resolved_ip	dns.answers.name
    if [dns.resolved_ip] and [dns.resolved_ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        add_tag => [ "invalid ip format dns.resolved_ip" ]
      }
      if ![dns.answers.name] {
        mutate {
            rename => { "dns.resolved_ip" => "dns.answers.name" }
        }
      } else {
        mutate {
          remove_field => ["dns.resolved_ip"]
        }
      }
    }
    # host.ip	host.name
    if [host.ip] and [host.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        add_tag => [ "invalid ip format host.ip" ]
      }
      if ![host.hostname] {
        mutate {
            rename => { "host.ip" => "host.hostname" }
        }
      } else {
        mutate {
          remove_field => ["host.ip"]
        }
      }
    }
    # network.forwarded_ip	drop field
    if [network.forwarded_ip] and [network.forwarded_ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        remove_field => ["network.forwarded_ip"]
        add_tag => [ "invalid ip format network.forwarded_ip" ]
      }
    }
    # observer.ip	observer.name
    if [observer.ip] and [observer.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        add_tag => [ "invalid ip format observer.ip" ]
      }
      if ![observer.name] {
        mutate {
            rename => { "observer.ip" => "observer.name" }
        }
      } else {
        mutate {
          remove_field => ["observer.ip"]
        }
      }
    }
    # related.ip	n/a if all fields are fixed before adding to related field then will not have issue

    # server.ip	server.address
    if [server.ip] and [server.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        add_tag => [ "invalid ip format server.ip" ]
      }
      if ![server.address] {
        mutate {
            rename => { "server.ip" => "server.address" }
        }
      } else {
        mutate {
          remove_field => ["server.ip"]
        }
      }
    }
    # server.nat.ip	drop field
    if [server.nat.ip] and [server.nat.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        remove_field => ["server.nat.ip"]
        add_tag => [ "invalid ip format server.nat.ip" ]
      }
    }
    # source.nat.ip	drop field
    if [source.nat.ip] and [source.nat.ip] !~ "^(\d+\.\d+\.\d+\.\d+|[0-9a-zA-Z]+:.*?:.*?:.*?:.*?:.*?:.*?:[0-9a-zA-Z]+)$" {
      mutate {
        remove_field => ["source.nat.ip"]
        add_tag => [ "invalid ip format source.nat.ip" ]
      }
    }

    ### Drop unparsed date fields and add tag
    ruby {
      code => '
        # field names to check with their corresponding failure tags
        date_fields_hash = {
          "event.created"	=> "_dateparsefailure_ec",
          "event.end"	=> "_dateparsefailure_ee",
          "event.ingested"	=> "_dateparsefailure_ei",
          "event.start"	=> "_dateparsefailure_es",
          "file.accessed"	=> "_dateparsefailure_fa",
          "file.created"	=> "_dateparsefailure_fc",
          "file.ctime"	=> "_dateparsefailure_fct",
          "file.mtime"	=> "_dateparsefailure_fm",
          "package.installed"	=> "_dateparsefailure_pi",
          "process.parent.start"	=> "_dateparsefailure_pps",
          "process.start"	=> "_dateparsefailure_ps",
          "tls.client.not_after"	=> "_dateparsefailure_tcna",
          "tls.client.not_before"	=> "_dateparsefailure_tcnb",
          "tls.server.not_after"	=> "_dateparsefailure_tsna",
          "tls.server.not_before"	=> "_dateparsefailure_tsnb"
        }
        # for each field in the above has, check if the value in the event is a string
        # if yes, remove that field and add the corresponding tag,
        # also add log.original if it does not exist
        date_fields_hash.each do |k,v|
          if event.get(k).is_a? String
            event.remove(k)
            event.tag(v)
            if event.get("log.original") == nil
              event.set("log.original", event.get("message"))
            end
          end
        end
      '
    }
  }
}