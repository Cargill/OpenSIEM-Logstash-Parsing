# Copyright [2021] [Cargill, Incorporated.]
# SPDX-License-Identifier: Apache-2.0
##### mapping logs with MISP memcache
# If IOC exists fetch it's stored value from memcached
# JSON to extract fields
# Remove the fetched field so that same key can be used to get new value in next `if block`.
filter {
  if "disable_misp_enrichment" in [tags] or "disable_lookups" in [tags] or "disable_enrichments" in [tags] {
    mutate {
      remove_tag => ["disable_misp_enrichment"]
    }
  } else {
    if [process][hash][md5] {
      fingerprint {
        source => ["[process][hash][md5]"]
        target => "process.hash.md5_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "process.hash.md5"
        get => { "%{process.hash.md5_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_process.hash.md5" ]
      }
      if "memcached_get_success_process.hash.md5" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_process.hash.md5"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "process.hash.md5_hashed"]
      }
    }
    if [process][parent][hash][md5] {
      fingerprint {
        source => ["[process][parent][hash][md5]"]
        target => "process.parent.hash.md5_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "process.parent.hash.md5"
        get => { "%{process.parent.hash.md5_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_process.parent.hash.md5" ]
      }
      if "memcached_get_success_process.parent.hash.md5" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_process.parent.hash.md5"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "process.parent.hash.md5_hashed"]
      }
    }
    if [file][hash][md5] {
      fingerprint {
        source => ["[file][hash][md5]"]
        target => "file.hash.md5_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.hash.md5"
        get => { "%{file.hash.md5_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.hash.md5" ]
      }
      if "memcached_get_success_file.hash.md5" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.hash.md5"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.hash.md5_hashed"]
      }
    }
    if [file][hash][sha1] {
      fingerprint {
        source => ["[file][hash][sha1]"]
        target => "file.hash.sha1_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.hash.sha1"
        get => { "%{file.hash.sha1_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.hash.sha1" ]
      }
      if "memcached_get_success_file.hash.sha1" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.hash.sha1"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.hash.sha1_hashed"]
      }
    }
    if [file][hash][sha256] {
      fingerprint {
        source => ["[file][hash][sha256]"]
        target => "file.hash.sha256_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.hash.sha256"
        get => { "%{file.hash.sha256_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.hash.sha256" ]
      }
      if "memcached_get_success_file.hash.sha256" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.hash.sha256"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.hash.sha256_hashed"]
      }
    }
    if [file][hash][sha512] {
      fingerprint {
        source => ["[file][hash][sha512]"]
        target => "file.hash.sha512_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.hash.sha512"
        get => { "%{file.hash.sha512_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.hash.sha512" ]
      }
      if "memcached_get_success_file.hash.sha512" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.hash.sha512"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.hash.sha512_hashed"]
      }
    }
    if [file][name] {
      fingerprint {
        source => ["[file][name]"]
        target => "file.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.name"
        get => { "%{file.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.name" ]
      }
      if "memcached_get_success_file.name" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.name"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.name_hashed"]
      }
    }
    if [file][name] and [file][hash][md5] {
      fingerprint {
        source => ["[file][name]"]
        target => "file.name_hashed"
        method => "MD5"
      }
      fingerprint {
        source => ["[file][hash][md5]"]
        target => "file.hash.md5_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.name_file.hash.md5"
        get => { "%{file.name_hashed}|%{file.hash.md5_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.name_file.hash.md5" ]
      }
      if "memcached_get_success_file.name_file.hash.md5" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.name_file.hash.md5"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.name_hashed", "file.hash.md5_hashed"]
      }
    }
    if [file][name] and [file][name_hash][sha1] {
      fingerprint {
        source => ["[file][name]"]
        target => "file.name_hashed"
        method => "MD5"
      }
      fingerprint {
        source => ["[file][hash][sha1]"]
        target => "file.hash.sha1_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.name_file.hash.sha1"
        get => { "%{file.name_hashed}|%{file.name_hash.sha1_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.name_file.hash.sha1" ]
      }
      if "memcached_get_success_file.name_file.hash.sha1" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.name_file.hash.sha1"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.name_hashed", "file.name_hash.sha1_hashed"]
      }
    }
    if [file][name] and [file][hash][sha256] {
      fingerprint {
        source => ["[file][name]"]
        target => "file.name_hashed"
        method => "MD5"
      }
      fingerprint {
        source => ["[file][hash][sha256]"]
        target => "file.hash.sha256_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.name_file.hash.sha256"
        get => { "%{file.name_hashed}|%{file.hash.sha256_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.name_file.hash.sha256" ]
      }
      if "memcached_get_success_file.name_file.hash.sha256" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.name_file.hash.sha256"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.name_hashed", "file.hash.sha256_hashed"]
      }
    }
    if [file][name] and [file][hash][sha512] {
      fingerprint {
        source => ["[file][name]"]
        target => "file.name_hashed"
        method => "MD5"
      }
      fingerprint {
        source => ["[file][hash][sha512]"]
        target => "file.hash.sha512_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.name_file.hash.sha512"
        get => { "%{file.name_hashed}|%{file.hash.sha512_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.name_file.hash.sha512" ]
      }
      if "memcached_get_success_file.name_file.hash.sha512" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.name_file.hash.sha512"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.name_hashed", "file.hash.sha512_hashed"]
      }
    }
    if [source][ip] {
      fingerprint {
        source => ["[source][ip]"]
        target => "source.ip_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "source.ip"
        get => { "%{source.ip_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_source.ip" ]
      }
      if "memcached_get_success_source.ip" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_source.ip"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "source.ip_hashed"]
      }
    }
    if [destination][ip] {
      fingerprint {
        source => ["[destination][ip]"]
        target => "destination.ip_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "destination.ip"
        get => { "%{destination.ip_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.ip" ]
      }
      if "memcached_get_success_destination.ip" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_destination.ip"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.ip_hashed"]
      }
    }
    if [destination][mac] {
      fingerprint {
        source => ["[destination][mac]"]
        target => "destination.mac_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.mac"
        get => { "%{destination.mac_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.mac" ]
      }
      if "memcached_get_success_destination.mac" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_destination.mac"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.mac_hashed"]
      }
    }
    if [host][hostname] {
      fingerprint {
        source => ["[host][hostname]"]
        target => "host.hostname_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.hosts"
        get => { "%{host.hostname_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_host.hostname" ]
      }
      if "memcached_get_success_host.hostname" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_host.hostname"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "host.hostname_hashed"]
      }
    }
    if [observer][hostname] {
      fingerprint {
        source => ["[observer][hostname]"]
        target => "observer.hostname_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.hosts"
        get => { "%{observer.hostname_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_observer.hostname" ]
      }
      if "memcached_get_success_observer.hostname" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_observer.hostname"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "observer.hostname_hashed"]
      }
    }
    if [log][source][hostname] {
      fingerprint {
        source => ["[log][source][hostname]"]
        target => "log.source.hostname_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.hosts"
        get => { "%{log.source.hostname_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_log.source.hostname" ]
      }
      if "memcached_get_success_log.source.hostname" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_log.source.hostname"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "log.source.hostname_hashed"]
      }
    }
    if [host][mac] {
      fingerprint {
        source => ["[host][mac]"]
        target => "host.mac_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.mac"
        get => { "%{host.mac_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_host.mac" ]
      }
      if "memcached_get_success_host.mac" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_host.mac"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "host.mac_hashed"]
      }
    }
    if [url][domain] {
      fingerprint {
        source => ["[url][domain]"]
        target => "url.domain_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "url.domain"
        get => { "%{url.domain_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_url.domain" ]
      }
      if "memcached_get_success_url.domain" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_url.domain"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "url.domain_hashed"]
      }
    }
    if [url][domain] and [destination][ip] {
      fingerprint {
        source => ["[url][domain]"]
        target => "url.domain_hashed"
        method => "MD5"
      }
      fingerprint {
        source => ["[destination][ip]"]
        target => "destination.ip_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "url.domain_destination.ip"
        get => { "%{url.domain_hashed}|%{destination.ip_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_url.domain_destination.ip" ]
      }
      if "memcached_get_success_url.domain_destination.ip" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_url.domain_destination.ip"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "url.domain_hashed", "destination.ip_hashed"]
      }
    }
    if [url][full] {
      fingerprint {
        source => ["[url][full]"]
        target => "url.full_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "url.full"
        get => { "%{url.full_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_url.full" ]
      }
      if "memcached_get_success_url.full" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_url.full"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "url.full_hashed"]
      }
    }
    if [http][request][method] {
      fingerprint {
        source => ["[http][request][method]"]
        target => "http.request.method_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "http.request.method"
        get => { "%{http.request.method_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_http.request.method" ]
      }
      if "memcached_get_success_http.request.method" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_http.request.method"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "http.request.method_hashed"]
      }
    }
    if [user_agent][original] {
      fingerprint {
        source => ["[user_agent][original]"]
        target => "user_agent.original_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user_agent.original"
        get => { "%{user_agent.original_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_user_agent.original" ]
      }
      if "memcached_get_success_user_agent.original" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_user_agent.original"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "user_agent.original_hashed"]
      }
    }
    if [tls][server][hash][md5] {
      fingerprint {
        source => ["[tls][server][hash][md5]"]
        target => "tls.server.hash.md5_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "tls.server.hash.md5"
        get => { "%{tls.server.hash.md5_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_tls.server.hash.md5" ]
      }
      if "memcached_get_success_tls.server.hash.md5" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_tls.server.hash.md5"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "tls.server.hash.md5_hashed"]
      }
    }
    if [registry][key] {
      fingerprint {
        source => ["[registry][key]"]
        target => "registry.key_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "registry.key"
        get => { "%{registry.key_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_registry.key" ]
      }
      if "memcached_get_success_registry.key" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_registry.key"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "registry.key_hashed"]
      }
    }
    if [registry][key] and [registry][value] {
      fingerprint {
        source => ["[registry][key]"]
        target => "registry.key_hashed"
        method => "MD5"
      }
      fingerprint {
        source => ["[registry][value]"]
        target => "registry.value_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "registry.key_registry.value"
        get => { "%{registry.key_hashed}|%{registry.value_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_registry.key_registry.value" ]
      }
      if "memcached_get_success_registry.key_registry.value" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_registry.key_registry.value"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "registry.key_hashed", "registry.value_hashed"]
      }
    }
    if [source][as][organization.name] {
      fingerprint {
        source => ["[source][as][organization][name]"]
        target => "source.as.organization.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "source.as.organization.name"
        get => { "%{source.as.organization.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_source.as.organization.name" ]
      }
      if "memcached_get_success_source.as.organization.name" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_source.as.organization.name"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "source.as.organization.name_hashed"]
      }
    }
    if [file][mime_type] {
      fingerprint {
        source => ["[file][mime_type]"]
        target => "file.mime_type_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.mime_type"
        get => { "%{file.mime_type_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.mime_type" ]
      }
      if "memcached_get_success_file.mime_type" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.mime_type"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.mime_type_hashed"]
      }
    }
    if [user][id] {
      fingerprint {
        source => ["[user][id]"]
        target => "user.id_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.id"
        get => { "%{user.id_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_user.id" ]
      }
      if "memcached_get_success_user.id" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_user.id"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "user.id_hashed"]
      }
    }
    if [http][cookie][name] {
      fingerprint {
        source => ["[http][cookie][name]"]
        target => "http.cookie.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "http.cookie.name"
        get => { "%{http.cookie.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_http.cookie.name" ]
      }
      if "memcached_get_success_http.cookie.name" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_http.cookie.name"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "http.cookie.name_hashed"]
      }
    }
    if [vulnerability][reference] {
      fingerprint {
        source => ["[vulnerability][reference]"]
        target => "vulnerability.reference_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "vulnerability.reference"
        get => { "%{vulnerability.reference_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_vulnerability.reference" ]
      }
      if "memcached_get_success_vulnerability.reference" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_vulnerability.reference"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "vulnerability.reference_hashed"]
      }
    }
    if [file][path] {
      fingerprint {
        source => ["[file][path]"]
        target => "file.path_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "file.path"
        get => { "%{file.path_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_file.path" ]
      }
      if "memcached_get_success_file.path" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_file.path"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "file.path_hashed"]
      }
    }
    if [destination][user][name] {
      fingerprint {
        source => ["[destination][user][name]"]
        target => "destination.user.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.user"
        get => { "%{destination.user.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.user.name" ]
      }
      if "memcached_get_success_destination.user.name" in [tags] {
        mutate {
          remove_tag => ["memcached_get_success_destination.user.name"]
          add_tag => ["log_enriched_by_misp"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.user.name_hashed"]
      }
    }
    if [host][user][name] {
      fingerprint {
        source => ["[host][user][name]"]
        target => "host.user.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.user"
        get => { "%{host.user.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_host.user.name" ]
      }
      if "memcached_get_success_host.user.name" in [tags] {
        mutate {
          remove_tag => ["memcached_get_success_host.user.name"]
          add_tag => ["log_enriched_by_misp"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "host.user.name_hashed"]
      }
    }
    if [source][user][name] {
      fingerprint {
        source => ["[source][user][name]"]
        target => "source.user.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.user"
        get => { "%{source.user.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_source.user.name" ]
      }
      if "memcached_get_success_source.user.name" in [tags] {
        mutate {
          remove_tag => ["memcached_get_success_source.user.name"]
          add_tag => ["log_enriched_by_misp"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "source.user.name_hashed"]
      }
    }
    if [user][name] {
      fingerprint {
        source => ["[user][name]"]
        target => "user.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.user"
        get => { "%{user.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_user.name" ]
      }
      if "memcached_get_success_user.name" in [tags] {
        mutate {
          remove_tag => ["memcached_get_success_user.name"]
          add_tag => ["log_enriched_by_misp"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "user.name_hashed"]
      }
    }
    if [database][user][name] {
      fingerprint {
        source => ["[database][user][name]"]
        target => "database.user.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.user"
        get => { "%{database.user.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_database.user.name" ]
      }
      if "memcached_get_success_database.user.name" in [tags] {
        mutate {
          remove_tag => ["memcached_get_success_database.user.name"]
          add_tag => ["log_enriched_by_misp"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "database.user.name_hashed"]
      }
    }
    if [client][user][name] {
      fingerprint {
        source => ["[client][user][name]"]
        target => "client.user.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.user"
        get => { "%{client.user.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_client.user.name" ]
      }
      if "memcached_get_success_client.user.name" in [tags] {
        mutate {
          remove_tag => ["memcached_get_success_client.user.name"]
          add_tag => ["log_enriched_by_misp"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "client.user.name_hashed"]
      }
    }
    if [server][user][name] {
      fingerprint {
        source => ["[server][user][name]"]
        target => "server.user.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.user"
        get => { "%{server.user.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_server.user.name" ]
      }
      if "memcached_get_success_server.user.name" in [tags] {
        mutate {
          remove_tag => ["memcached_get_success_server.user.name"]
          add_tag => ["log_enriched_by_misp"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "server.user.name_hashed"]
      }
    }
    if [destination][user][email] {
      fingerprint {
        source => ["[destination][user][email]"]
        target => "destination.user.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{destination.user.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.user.email" ]
      }
      if "memcached_get_success_destination.user.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_destination.user.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.user.email_hashed"]
      }
    }
    if [client][user][email] {
      fingerprint {
        source => ["[client][user][email]"]
        target => "client.user.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{client.user.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_client.user.email" ]
      }
      if "memcached_get_success_client.user.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_client.user.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "client.user.email_hashed"]
      }
    }
    if [host][user][email] {
      fingerprint {
        source => ["[host][user][email]"]
        target => "host.user.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{host.user.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_host.user.email" ]
      }
      if "memcached_get_success_host.user.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_host.user.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "host.user.email_hashed"]
      }
    }
    if [server][user][email] {
      fingerprint {
        source => ["[server][user][email]"]
        target => "server.user.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{server.user.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_server.user.email" ]
      }
      if "memcached_get_success_server.user.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_server.user.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "server.user.email_hashed"]
      }
    }
    if [source][address] {
      fingerprint {
        source => ["[source][address]"]
        target => "source.address_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.hosts"
        get => { "%{source.address_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_source.address" ]
      }
      if "memcached_get_success_source.address" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_source.address"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "source.address_hashed"]
      }
    }
    if [destination][address] {
      fingerprint {
        source => ["[destination][address]"]
        target => "destination.address_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.hosts"
        get => { "%{destination.address_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.address" ]
      }
      if "memcached_get_success_destination.address" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_destination.address"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.address_hashed"]
      }
    }
    if [destination][as][organization][name] {
      fingerprint {
        source => ["[destination][as][organization][name]"]
        target => "destination.as.organization.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "destination.as.organization.name"
        get => { "%{destination.as.organization.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.as.organization.name" ]
      }
      if "memcached_get_success_destination.as.organization.name" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_destination.as.organization.name"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.as.organization.name_hashed"]
      }
    }
    if [process][name] {
      fingerprint {
        source => ["[process][name]"]
        target => "process.name_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "process.name"
        get => { "%{process.name_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_process.name" ]
      }
      if "memcached_get_success_process.name" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_process.name"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "process.name_hashed"]
      }
    }
    if [tls][server][hash][sha1] {
      fingerprint {
        source => ["[tls][server][hash][sha1]"]
        target => "tls.server.hash.sha1_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "tls.server.hash.sha1"
        get => { "%{tls.server.hash.sha1_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_tls.server.hash.sha1" ]
      }
      if "memcached_get_success_tls.server.hash.sha1" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_tls.server.hash.sha1"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "tls.server.hash.sha1_hashed"]
      }
    }
    if [tls][server][hash][md5] {
      fingerprint {
        source => ["[tls][server][hash][md5]"]
        target => "tls.server.hash.md5_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "tls.server.hash.md5"
        get => { "%{tls.server.hash.md5_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_tls.server.hash.md5" ]
      }
      if "memcached_get_success_tls.server.hash.md5" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_tls.server.hash.md5"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "tls.server.hash.md5_hashed"]
      }
    }
    if [tls][server][hash][sha256] {
      fingerprint {
        source => ["[tls][server][hash][sha256]"]
        target => "tls.server.hash.sha256_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "tls.server.hash.sha256"
        get => { "%{tls.server.hash.sha256_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_tls.server.hash.sha256" ]
      }
      if "memcached_get_success_tls.server.hash.sha256" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_tls.server.hash.sha256"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "tls.server.hash.sha256_hashed"]
      }
    }
    if [destination][port] {
      fingerprint {
        source => ["[destination][port]"]
        target => "destination.port_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "destination.port"
        get => { "%{destination.port_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.port" ]
      }
      if "memcached_get_success_destination.port" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_destination.port"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.port_hashed"]
      }
    }
    if [destination][ip] and [destination][port] {
      fingerprint {
        source => ["[destination][ip]"]
        target => "destination.ip_hashed"
        method => "MD5"
      }
      fingerprint {
        source => ["[destination][port]"]
        target => "destination.port_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "destination.ip_destination.port"
        get => { "%{destination.ip_hashed}|%{destination.port_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.ip_destination.port" ]
      }
      if "memcached_get_success_destination.ip_destination.port" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_destination.ip_destination.port"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.ip_hashed", "destination.port_hashed"]
      }
    }
    if [destination][address] and [destination][port] {
      fingerprint {
        source => ["[destination][address]"]
        target => "destination.address_hashed"
        method => "MD5"
      }
      fingerprint {
        source => ["destination.port"]
        target => "destination.port_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "destination.address_destination.port"
        get => { "%{destination.address_hashed}|%{destination.port_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.address_destination.port" ]
      }
      if "memcached_get_success_destination.address_destination.port" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_destination.address_destination.port"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.address_hashed", "destination.port_hashed"]
      }
    }
    if [client][mac] {
      fingerprint {
        source => ["[client][mac]"]
        target => "client.mac_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.mac"
        get => { "%{client.mac_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_client.mac" ]
      }
      if "memcached_get_success_client.mac" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_client.mac"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "client.mac_hashed"]
      }
    }
    if [observer][mac] {
      fingerprint {
        source => ["[observer][mac]"]
        target => "observer.mac_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.mac"
        get => { "%{observer.mac_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_observer.mac" ]
      }
      if "memcached_get_success_observer.mac" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_observer.mac"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "observer.mac_hashed"]
      }
    }
    if [server][mac] {
      fingerprint {
        source => ["[server][mac]"]
        target => "server.mac_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.mac"
        get => { "%{server.mac_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_server.mac" ]
      }
      if "memcached_get_success_server.mac" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_server.mac"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "server.mac_hashed"]
      }
    }
    if [network][mac] {
      fingerprint {
        source => ["[network][mac]"]
        target => "network.mac_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.mac"
        get => { "%{network.mac_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_network.mac" ]
      }
      if "memcached_get_success_network.mac" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_network.mac"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "network.mac_hashed"]
      }
    }
    if [source][mac] {
      fingerprint {
        source => ["[source][mac]"]
        target => "source.mac_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "related.mac"
        get => { "%{source.mac_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_source.mac" ]
      }
      if "memcached_get_success_source.mac" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_source.mac"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "source.mac_hashed"]
      }
    }
    if [source][user][email] {
      fingerprint {
        source => ["[source][user][email]"]
        target => "source.user.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{source.user.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_source.user.email" ]
      }
      if "memcached_get_success_source.user.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_source.user.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "source.user.email_hashed"]
      }
    }
    if [user][changes][email] {
      fingerprint {
        source => ["[user][changes][email]"]
        target => "user.changes.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{user.changes.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_user.changes.email" ]
      }
      if "memcached_get_success_user.changes.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_user.changes.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "user.changes.email_hashed"]
      }
    }
    if [user][effective][email] {
      fingerprint {
        source => ["[user][effective][email]"]
        target => "user.effective.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{user.effective.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_user.effective.email" ]
      }
      if "memcached_get_success_user.effective.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_user.effective.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "user.effective.email_hashed"]
      }
    }
    if [destination][user][email] {
      fingerprint {
        source => ["[destination][user][email]"]
        target => "destination.user.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{destination.user.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_destination.user.email" ]
      }
      if "memcached_get_success_destination.user.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_destination.user.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "destination.user.email_hashed"]
      }
    }
    if [database][user][email] {
      fingerprint {
        source => ["[database][user][email]"]
        target => "database.user.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{database.user.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_database.user.email" ]
      }
      if "memcached_get_success_database.user.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_database.user.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "database.user.email_hashed"]
      }
    }
    if [user][target][email] {
      fingerprint {
        source => ["[user][target][email]"]
        target => "user.target.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{user.target.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_user.target.email" ]
      }
      if "memcached_get_success_user.target.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_user.target.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "user.target.email_hashed"]
      }
    }
    if [user][email] {
      fingerprint {
        source => ["[user][email]"]
        target => "user.email_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "user.email"
        get => { "%{user.email_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_user.email" ]
      }
      if "memcached_get_success_user.email" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_user.email"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "user.email_hashed"]
      }
    }
    if [email][subject] {
      fingerprint {
        source => ["[email][subject]"]
        target => "email.subject_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "email.subject"
        get => { "%{email.subject_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_email.subject" ]
      }
      if "memcached_get_success_email.subject" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_email.subject"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "email.subject_hashed"]
      }
    }
    if [email][body] {
      fingerprint {
        source => ["[email][body]"]
        target => "email.body_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "email.body"
        get => { "%{email.body_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_email.body" ]
      }
      if "memcached_get_success_email.body" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_email.body"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "email.body_hashed"]
      }
    }
    if [email][header] {
      fingerprint {
        source => ["[email][header]"]
        target => "email.header_hashed"
        method => "MD5"
      }
      memcached {
        hosts => [VAR_MEMCACHED_ADDRESS]
        namespace => "email.header"
        get => { "%{email.header_hashed}" => "memcache_value" }
        add_tag => [ "memcached_get_success_email.header" ]
      }
      if "memcached_get_success_email.header" in [tags] {
        mutate {
          add_tag => ["log_enriched_by_misp"]
          remove_tag => ["memcached_get_success_email.header"]
        }
        json {
          source => "memcache_value"
        }
      }
      mutate {
        remove_field => ["memcache_value", "email.header_hashed"]
      }
    }

    # memcache JSON output fields will be in dot notation which needs to be changed to nested. So, mutate filter to copy the fields to nested and removing dot notation fields. Following are the memcache fields:
    # "threat.list.ioc": "%{threat.list.ioc}", "threat.list.type": "%{threat.list.type}", "threat.list.event_analysis": "%{threat.list.event_analysis}", "threat.list.member_org": "%{threat.list.member_org}", "threat.list.source_org": "%{threat.list.source_org}", "threat.list.event_info": "%{threat.list.event_info}", "threat.list.severity_name": "%{threat.list.severity_name}", "threat.list.category": "%{threat.list.category}", "threat.list.object_category": "%{threat.list.object_category}", "threat.list.comment": "%{threat.list.comment}", "threat.list.event_tag": "%{threat.list.event_tag}", "threat.list.safe_to_enable_ids": "%{threat.list.safe_to_enable_ids}", "threat.list.object_relation": "%{threat.list.object_relation}", "threat.list.attribute_tag": "%{threat.list.attribute_tag}", "threat.list.object_name": "%{threat.list.object_name}"

    mutate {
      copy => {"[threat.list.ioc]" => "[threat][list][ioc]"}
      copy => {"[threat.list.type]" => "[threat][list][type]"}
      copy => {"[threat.list.event_analysis]" => "[threat][list][event_analysis]"}
      copy => {"[threat.list.member_org]" => "[threat][list][member_org]"}
      copy => {"[threat.list.source_org]" => "[threat][list][source_org]"}
      copy => {"[threat.list.event_info]" => "[threat][list][event_info]"}
      copy => {"[threat.list.severity_name]" => "[threat][list][severity_name]"}
      copy => {"[threat.list.category]" => "[threat][list][category]"}
      copy => {"[threat.list.object_category]" => "[threat][list][object_category]"}
      copy => {"[threat.list.comment]" => "[threat][list][comment]"}
      copy => {"[threat.list.event_tag]" => "[threat][list][event_tag]"}
      copy => {"[threat.list.safe_to_enable_ids]" => "[threat][list][safe_to_enable_ids]"}
      copy => {"[threat.list.object_relation]" => "[threat][list][object_relation]"}
      copy => {"[threat.list.attribute_tag]" => "[threat][list][attribute_tag]"}
      copy => {"[threat.list.object_name]" => "[threat][list][object_name]"}
    }
    mutate {
      remove_field => [ "[threat.list.ioc]", "[threat.list.type]", "[threat.list.event_analysis]", "[threat.list.member_org]", "[threat.list.source_org]", "[threat.list.event_info]", "[threat.list.severity_name]", "[threat.list.category]", "[threat.list.object_category]", "[threat.list.comment]", "[threat.list.event_tag]", "[threat.list.safe_to_enable_ids]", "[threat.list.object_relation]", "[threat.list.attribute_tag]", "[threat.list.object_name]"]
    }
  }
}